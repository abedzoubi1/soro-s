!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.webpackSigmaGraph=e():t.webpackSigmaGraph=e()}(self,(()=>(()=>{var t={796:t=>{t.exports=function(t,e){var r=e.length;if(0!==r){var i=t.length;t.length+=r;for(var a=0;a<r;a++)t[i+a]=e[a]}}},187:t=>{"use strict";var e,r="object"==typeof Reflect?Reflect:null,i=r&&"function"==typeof r.apply?r.apply:function(t,e,r){return Function.prototype.apply.call(t,e,r)};e=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var a=Number.isNaN||function(t){return t!=t};function o(){o.init.call(this)}t.exports=o,t.exports.once=function(t,e){return new Promise((function(r,i){function a(r){t.removeListener(e,o),i(r)}function o(){"function"==typeof t.removeListener&&t.removeListener("error",a),r([].slice.call(arguments))}f(t,e,o,{once:!0}),"error"!==e&&function(t,e,r){"function"==typeof t.on&&f(t,"error",e,{once:!0})}(t,a)}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var n=10;function s(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function u(t){return void 0===t._maxListeners?o.defaultMaxListeners:t._maxListeners}function d(t,e,r,i){var a,o,n,d;if(s(r),void 0===(o=t._events)?(o=t._events=Object.create(null),t._eventsCount=0):(void 0!==o.newListener&&(t.emit("newListener",e,r.listener?r.listener:r),o=t._events),n=o[e]),void 0===n)n=o[e]=r,++t._eventsCount;else if("function"==typeof n?n=o[e]=i?[r,n]:[n,r]:i?n.unshift(r):n.push(r),(a=u(t))>0&&n.length>a&&!n.warned){n.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+n.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=t,c.type=e,c.count=n.length,d=c,console&&console.warn&&console.warn(d)}return t}function c(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function h(t,e,r){var i={fired:!1,wrapFn:void 0,target:t,type:e,listener:r},a=c.bind(i);return a.listener=r,i.wrapFn=a,a}function l(t,e,r){var i=t._events;if(void 0===i)return[];var a=i[e];return void 0===a?[]:"function"==typeof a?r?[a.listener||a]:[a]:r?function(t){for(var e=new Array(t.length),r=0;r<e.length;++r)e[r]=t[r].listener||t[r];return e}(a):p(a,a.length)}function g(t){var e=this._events;if(void 0!==e){var r=e[t];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function p(t,e){for(var r=new Array(e),i=0;i<e;++i)r[i]=t[i];return r}function f(t,e,r,i){if("function"==typeof t.on)i.once?t.once(e,r):t.on(e,r);else{if("function"!=typeof t.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof t);t.addEventListener(e,(function a(o){i.once&&t.removeEventListener(e,a),r(o)}))}}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return n},set:function(t){if("number"!=typeof t||t<0||a(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");n=t}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||a(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},o.prototype.getMaxListeners=function(){return u(this)},o.prototype.emit=function(t){for(var e=[],r=1;r<arguments.length;r++)e.push(arguments[r]);var a="error"===t,o=this._events;if(void 0!==o)a=a&&void 0===o.error;else if(!a)return!1;if(a){var n;if(e.length>0&&(n=e[0]),n instanceof Error)throw n;var s=new Error("Unhandled error."+(n?" ("+n.message+")":""));throw s.context=n,s}var u=o[t];if(void 0===u)return!1;if("function"==typeof u)i(u,this,e);else{var d=u.length,c=p(u,d);for(r=0;r<d;++r)i(c[r],this,e)}return!0},o.prototype.addListener=function(t,e){return d(this,t,e,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(t,e){return d(this,t,e,!0)},o.prototype.once=function(t,e){return s(e),this.on(t,h(this,t,e)),this},o.prototype.prependOnceListener=function(t,e){return s(e),this.prependListener(t,h(this,t,e)),this},o.prototype.removeListener=function(t,e){var r,i,a,o,n;if(s(e),void 0===(i=this._events))return this;if(void 0===(r=i[t]))return this;if(r===e||r.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete i[t],i.removeListener&&this.emit("removeListener",t,r.listener||e));else if("function"!=typeof r){for(a=-1,o=r.length-1;o>=0;o--)if(r[o]===e||r[o].listener===e){n=r[o].listener,a=o;break}if(a<0)return this;0===a?r.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(r,a),1===r.length&&(i[t]=r[0]),void 0!==i.removeListener&&this.emit("removeListener",t,n||e)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(t){var e,r,i;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[t]),this;if(0===arguments.length){var a,o=Object.keys(r);for(i=0;i<o.length;++i)"removeListener"!==(a=o[i])&&this.removeAllListeners(a);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=r[t]))this.removeListener(t,e);else if(void 0!==e)for(i=e.length-1;i>=0;i--)this.removeListener(t,e[i]);return this},o.prototype.listeners=function(t){return l(this,t,!0)},o.prototype.rawListeners=function(t){return l(this,t,!1)},o.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):g.call(t,e)},o.prototype.listenerCount=g,o.prototype.eventNames=function(){return this._eventsCount>0?e(this._events):[]}},186:t=>{t.exports=function(t){return null!==t&&"object"==typeof t&&"function"==typeof t.addUndirectedEdgeWithKey&&"function"==typeof t.dropNode&&"boolean"==typeof t.multi}},698:function(t){t.exports=function(){"use strict";function t(e){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function e(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,i(t,e)}function r(t){return r=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},r(t)}function i(t,e){return i=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},i(t,e)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}function o(t,e,r){return o=a()?Reflect.construct.bind():function(t,e,r){var a=[null];a.push.apply(a,e);var o=new(Function.bind.apply(t,a));return r&&i(o,r.prototype),o},o.apply(null,arguments)}function n(t){var e="function"==typeof Map?new Map:void 0;return n=function(t){if(null===t||(a=t,-1===Function.toString.call(a).indexOf("[native code]")))return t;var a;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,n)}function n(){return o(t,arguments,r(this).constructor)}return n.prototype=Object.create(t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),i(n,t)},n(t)}function s(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var u=function(){for(var t=arguments[0],e=1,r=arguments.length;e<r;e++)if(arguments[e])for(var i in arguments[e])t[i]=arguments[e][i];return t};function d(t,e,r,i){var a=t._nodes.get(e),o=null;return a?o="mixed"===i?a.out&&a.out[r]||a.undirected&&a.undirected[r]:"directed"===i?a.out&&a.out[r]:a.undirected&&a.undirected[r]:o}function c(e){return"object"===t(e)&&null!==e&&e.constructor===Object}function h(t){var e;for(e in t)return!1;return!0}function l(t,e,r){Object.defineProperty(t,e,{enumerable:!1,configurable:!1,writable:!0,value:r})}function g(t,e,r){var i={enumerable:!0,configurable:!0};"function"==typeof r?i.get=r:(i.value=r,i.writable=!1),Object.defineProperty(t,e,i)}function p(t){return!(!c(t)||t.attributes&&!Array.isArray(t.attributes))}"function"==typeof Object.assign&&(u=Object.assign);var f,b={exports:{}},y="object"==typeof Reflect?Reflect:null,v=y&&"function"==typeof y.apply?y.apply:function(t,e,r){return Function.prototype.apply.call(t,e,r)};f=y&&"function"==typeof y.ownKeys?y.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var _=Number.isNaN||function(t){return t!=t};function m(){m.init.call(this)}b.exports=m,b.exports.once=function(t,e){return new Promise((function(r,i){function a(r){t.removeListener(e,o),i(r)}function o(){"function"==typeof t.removeListener&&t.removeListener("error",a),r([].slice.call(arguments))}F(t,e,o,{once:!0}),"error"!==e&&function(t,e,r){"function"==typeof t.on&&F(t,"error",e,{once:!0})}(t,a)}))},m.EventEmitter=m,m.prototype._events=void 0,m.prototype._eventsCount=0,m.prototype._maxListeners=void 0;var w=10;function k(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function x(t){return void 0===t._maxListeners?m.defaultMaxListeners:t._maxListeners}function E(t,e,r,i){var a,o,n,s;if(k(r),void 0===(o=t._events)?(o=t._events=Object.create(null),t._eventsCount=0):(void 0!==o.newListener&&(t.emit("newListener",e,r.listener?r.listener:r),o=t._events),n=o[e]),void 0===n)n=o[e]=r,++t._eventsCount;else if("function"==typeof n?n=o[e]=i?[r,n]:[n,r]:i?n.unshift(r):n.push(r),(a=x(t))>0&&n.length>a&&!n.warned){n.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+n.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=t,u.type=e,u.count=n.length,s=u,console&&console.warn&&console.warn(s)}return t}function L(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function A(t,e,r){var i={fired:!1,wrapFn:void 0,target:t,type:e,listener:r},a=L.bind(i);return a.listener=r,i.wrapFn=a,a}function S(t,e,r){var i=t._events;if(void 0===i)return[];var a=i[e];return void 0===a?[]:"function"==typeof a?r?[a.listener||a]:[a]:r?function(t){for(var e=new Array(t.length),r=0;r<e.length;++r)e[r]=t[r].listener||t[r];return e}(a):G(a,a.length)}function C(t){var e=this._events;if(void 0!==e){var r=e[t];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function G(t,e){for(var r=new Array(e),i=0;i<e;++i)r[i]=t[i];return r}function F(t,e,r,i){if("function"==typeof t.on)i.once?t.once(e,r):t.on(e,r);else{if("function"!=typeof t.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof t);t.addEventListener(e,(function a(o){i.once&&t.removeEventListener(e,a),r(o)}))}}function P(t){if("function"!=typeof t)throw new Error("obliterator/iterator: expecting a function!");this.next=t}Object.defineProperty(m,"defaultMaxListeners",{enumerable:!0,get:function(){return w},set:function(t){if("number"!=typeof t||t<0||_(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");w=t}}),m.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},m.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||_(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},m.prototype.getMaxListeners=function(){return x(this)},m.prototype.emit=function(t){for(var e=[],r=1;r<arguments.length;r++)e.push(arguments[r]);var i="error"===t,a=this._events;if(void 0!==a)i=i&&void 0===a.error;else if(!i)return!1;if(i){var o;if(e.length>0&&(o=e[0]),o instanceof Error)throw o;var n=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw n.context=o,n}var s=a[t];if(void 0===s)return!1;if("function"==typeof s)v(s,this,e);else{var u=s.length,d=G(s,u);for(r=0;r<u;++r)v(d[r],this,e)}return!0},m.prototype.addListener=function(t,e){return E(this,t,e,!1)},m.prototype.on=m.prototype.addListener,m.prototype.prependListener=function(t,e){return E(this,t,e,!0)},m.prototype.once=function(t,e){return k(e),this.on(t,A(this,t,e)),this},m.prototype.prependOnceListener=function(t,e){return k(e),this.prependListener(t,A(this,t,e)),this},m.prototype.removeListener=function(t,e){var r,i,a,o,n;if(k(e),void 0===(i=this._events))return this;if(void 0===(r=i[t]))return this;if(r===e||r.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete i[t],i.removeListener&&this.emit("removeListener",t,r.listener||e));else if("function"!=typeof r){for(a=-1,o=r.length-1;o>=0;o--)if(r[o]===e||r[o].listener===e){n=r[o].listener,a=o;break}if(a<0)return this;0===a?r.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(r,a),1===r.length&&(i[t]=r[0]),void 0!==i.removeListener&&this.emit("removeListener",t,n||e)}return this},m.prototype.off=m.prototype.removeListener,m.prototype.removeAllListeners=function(t){var e,r,i;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[t]),this;if(0===arguments.length){var a,o=Object.keys(r);for(i=0;i<o.length;++i)"removeListener"!==(a=o[i])&&this.removeAllListeners(a);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=r[t]))this.removeListener(t,e);else if(void 0!==e)for(i=e.length-1;i>=0;i--)this.removeListener(t,e[i]);return this},m.prototype.listeners=function(t){return S(this,t,!0)},m.prototype.rawListeners=function(t){return S(this,t,!1)},m.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):C.call(t,e)},m.prototype.listenerCount=C,m.prototype.eventNames=function(){return this._eventsCount>0?f(this._events):[]},"undefined"!=typeof Symbol&&(P.prototype[Symbol.iterator]=function(){return this}),P.of=function(){var t=arguments,e=t.length,r=0;return new P((function(){return r>=e?{done:!0}:{done:!1,value:t[r++]}}))},P.empty=function(){return new P((function(){return{done:!0}}))},P.fromSequence=function(t){var e=0,r=t.length;return new P((function(){return e>=r?{done:!0}:{done:!1,value:t[e++]}}))},P.is=function(t){return t instanceof P||"object"==typeof t&&null!==t&&"function"==typeof t.next};var T=P,D={};D.ARRAY_BUFFER_SUPPORT="undefined"!=typeof ArrayBuffer,D.SYMBOL_SUPPORT="undefined"!=typeof Symbol;var O=T,N=D,R=N.ARRAY_BUFFER_SUPPORT,M=N.SYMBOL_SUPPORT,j=function(t){var e=function(t){return"string"==typeof t||Array.isArray(t)||R&&ArrayBuffer.isView(t)?O.fromSequence(t):"object"!=typeof t||null===t?null:M&&"function"==typeof t[Symbol.iterator]?t[Symbol.iterator]():"function"==typeof t.next?t:null}(t);if(!e)throw new Error("obliterator: target is not iterable nor a valid iterator.");return e},U=j,z=function(t,e){for(var r,i=arguments.length>1?e:1/0,a=i!==1/0?new Array(i):[],o=0,n=U(t);;){if(o===i)return a;if((r=n.next()).done)return o!==e&&(a.length=o),a;a[o++]=r.value}},I=function(t){function r(e){var r;return(r=t.call(this)||this).name="GraphError",r.message=e,r}return e(r,t),r}(n(Error)),B=function(t){function r(e){var i;return(i=t.call(this,e)||this).name="InvalidArgumentsGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(s(i),r.prototype.constructor),i}return e(r,t),r}(I),W=function(t){function r(e){var i;return(i=t.call(this,e)||this).name="NotFoundGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(s(i),r.prototype.constructor),i}return e(r,t),r}(I),q=function(t){function r(e){var i;return(i=t.call(this,e)||this).name="UsageGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(s(i),r.prototype.constructor),i}return e(r,t),r}(I);function H(t,e){this.key=t,this.attributes=e,this.clear()}function Y(t,e){this.key=t,this.attributes=e,this.clear()}function V(t,e){this.key=t,this.attributes=e,this.clear()}function Z(t,e,r,i,a){this.key=e,this.attributes=a,this.undirected=t,this.source=r,this.target=i}function K(t,e,r,i,a,o,n){var s,u,d,c;if(i=""+i,0===r){if(!(s=t._nodes.get(i)))throw new W("Graph.".concat(e,': could not find the "').concat(i,'" node in the graph.'));d=a,c=o}else if(3===r){if(a=""+a,!(u=t._edges.get(a)))throw new W("Graph.".concat(e,': could not find the "').concat(a,'" edge in the graph.'));var h=u.source.key,l=u.target.key;if(i===h)s=u.target;else{if(i!==l)throw new W("Graph.".concat(e,': the "').concat(i,'" node is not attached to the "').concat(a,'" edge (').concat(h,", ").concat(l,")."));s=u.source}d=o,c=n}else{if(!(u=t._edges.get(i)))throw new W("Graph.".concat(e,': could not find the "').concat(i,'" edge in the graph.'));s=1===r?u.source:u.target,d=a,c=o}return[s,d,c]}H.prototype.clear=function(){this.inDegree=0,this.outDegree=0,this.undirectedDegree=0,this.undirectedLoops=0,this.directedLoops=0,this.in={},this.out={},this.undirected={}},Y.prototype.clear=function(){this.inDegree=0,this.outDegree=0,this.directedLoops=0,this.in={},this.out={}},V.prototype.clear=function(){this.undirectedDegree=0,this.undirectedLoops=0,this.undirected={}},Z.prototype.attach=function(){var t="out",e="in";this.undirected&&(t=e="undirected");var r=this.source.key,i=this.target.key;this.source[t][i]=this,this.undirected&&r===i||(this.target[e][r]=this)},Z.prototype.attachMulti=function(){var t="out",e="in",r=this.source.key,i=this.target.key;this.undirected&&(t=e="undirected");var a=this.source[t],o=a[i];if(void 0===o)return a[i]=this,void(this.undirected&&r===i||(this.target[e][r]=this));o.previous=this,this.next=o,a[i]=this,this.target[e][r]=this},Z.prototype.detach=function(){var t=this.source.key,e=this.target.key,r="out",i="in";this.undirected&&(r=i="undirected"),delete this.source[r][e],delete this.target[i][t]},Z.prototype.detachMulti=function(){var t=this.source.key,e=this.target.key,r="out",i="in";this.undirected&&(r=i="undirected"),void 0===this.previous?void 0===this.next?(delete this.source[r][e],delete this.target[i][t]):(this.next.previous=void 0,this.source[r][e]=this.next,this.target[i][t]=this.next):(this.previous.next=this.next,void 0!==this.next&&(this.next.previous=this.previous))};var Q=[{name:function(t){return"get".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,i,a){var o=K(this,e,r,t,i,a),n=o[0],s=o[1];return n.attributes[s]}}},{name:function(t){return"get".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t,i){return K(this,e,r,t,i)[0].attributes}}},{name:function(t){return"has".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,i,a){var o=K(this,e,r,t,i,a),n=o[0],s=o[1];return n.attributes.hasOwnProperty(s)}}},{name:function(t){return"set".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,i,a,o){var n=K(this,e,r,t,i,a,o),s=n[0],u=n[1],d=n[2];return s.attributes[u]=d,this.emit("nodeAttributesUpdated",{key:s.key,type:"set",attributes:s.attributes,name:u}),this}}},{name:function(t){return"update".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,i,a,o){var n=K(this,e,r,t,i,a,o),s=n[0],u=n[1],d=n[2];if("function"!=typeof d)throw new B("Graph.".concat(e,": updater should be a function."));var c=s.attributes,h=d(c[u]);return c[u]=h,this.emit("nodeAttributesUpdated",{key:s.key,type:"set",attributes:s.attributes,name:u}),this}}},{name:function(t){return"remove".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,i,a){var o=K(this,e,r,t,i,a),n=o[0],s=o[1];return delete n.attributes[s],this.emit("nodeAttributesUpdated",{key:n.key,type:"remove",attributes:n.attributes,name:s}),this}}},{name:function(t){return"replace".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t,i,a){var o=K(this,e,r,t,i,a),n=o[0],s=o[1];if(!c(s))throw new B("Graph.".concat(e,": provided attributes are not a plain object."));return n.attributes=s,this.emit("nodeAttributesUpdated",{key:n.key,type:"replace",attributes:n.attributes}),this}}},{name:function(t){return"merge".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t,i,a){var o=K(this,e,r,t,i,a),n=o[0],s=o[1];if(!c(s))throw new B("Graph.".concat(e,": provided attributes are not a plain object."));return u(n.attributes,s),this.emit("nodeAttributesUpdated",{key:n.key,type:"merge",attributes:n.attributes,data:s}),this}}},{name:function(t){return"update".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t,i,a){var o=K(this,e,r,t,i,a),n=o[0],s=o[1];if("function"!=typeof s)throw new B("Graph.".concat(e,": provided updater is not a function."));return n.attributes=s(n.attributes),this.emit("nodeAttributesUpdated",{key:n.key,type:"update",attributes:n.attributes}),this}}}],X=[{name:function(t){return"get".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,i){var a;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+t,n=""+i;if(i=arguments[2],!(a=d(this,o,n,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(o,'" - "').concat(n,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(a=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}return a.attributes[i]}}},{name:function(t){return"get".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t){var i;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>1){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var a=""+t,o=""+arguments[1];if(!(i=d(this,a,o,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(a,'" - "').concat(o,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(i=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}return i.attributes}}},{name:function(t){return"has".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,i){var a;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+t,n=""+i;if(i=arguments[2],!(a=d(this,o,n,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(o,'" - "').concat(n,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(a=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}return a.attributes.hasOwnProperty(i)}}},{name:function(t){return"set".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,i,a){var o;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>3){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var n=""+t,s=""+i;if(i=arguments[2],a=arguments[3],!(o=d(this,n,s,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(n,'" - "').concat(s,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(o=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}return o.attributes[i]=a,this.emit("edgeAttributesUpdated",{key:o.key,type:"set",attributes:o.attributes,name:i}),this}}},{name:function(t){return"update".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,i,a){var o;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>3){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var n=""+t,s=""+i;if(i=arguments[2],a=arguments[3],!(o=d(this,n,s,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(n,'" - "').concat(s,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(o=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}if("function"!=typeof a)throw new B("Graph.".concat(e,": updater should be a function."));return o.attributes[i]=a(o.attributes[i]),this.emit("edgeAttributesUpdated",{key:o.key,type:"set",attributes:o.attributes,name:i}),this}}},{name:function(t){return"remove".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,i){var a;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+t,n=""+i;if(i=arguments[2],!(a=d(this,o,n,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(o,'" - "').concat(n,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(a=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}return delete a.attributes[i],this.emit("edgeAttributesUpdated",{key:a.key,type:"remove",attributes:a.attributes,name:i}),this}}},{name:function(t){return"replace".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t,i){var a;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+t,n=""+i;if(i=arguments[2],!(a=d(this,o,n,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(o,'" - "').concat(n,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(a=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}if(!c(i))throw new B("Graph.".concat(e,": provided attributes are not a plain object."));return a.attributes=i,this.emit("edgeAttributesUpdated",{key:a.key,type:"replace",attributes:a.attributes}),this}}},{name:function(t){return"merge".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t,i){var a;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+t,n=""+i;if(i=arguments[2],!(a=d(this,o,n,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(o,'" - "').concat(n,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(a=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}if(!c(i))throw new B("Graph.".concat(e,": provided attributes are not a plain object."));return u(a.attributes,i),this.emit("edgeAttributesUpdated",{key:a.key,type:"merge",attributes:a.attributes,data:i}),this}}},{name:function(t){return"update".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t,i){var a;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+t,n=""+i;if(i=arguments[2],!(a=d(this,o,n,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(o,'" - "').concat(n,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(a=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}if("function"!=typeof i)throw new B("Graph.".concat(e,": provided updater is not a function."));return a.attributes=i(a.attributes),this.emit("edgeAttributesUpdated",{key:a.key,type:"update",attributes:a.attributes}),this}}}],J=T,$=j,tt=function(){var t=arguments,e=null,r=-1;return new J((function(){for(var i=null;;){if(null===e){if(++r>=t.length)return{done:!0};e=$(t[r])}if(!0!==(i=e.next()).done)break;e=null}return i}))},et=[{name:"edges",type:"mixed"},{name:"inEdges",type:"directed",direction:"in"},{name:"outEdges",type:"directed",direction:"out"},{name:"inboundEdges",type:"mixed",direction:"in"},{name:"outboundEdges",type:"mixed",direction:"out"},{name:"directedEdges",type:"directed"},{name:"undirectedEdges",type:"undirected"}];function rt(t,e,r,i){var a=!1;for(var o in e)if(o!==i){var n=e[o];if(a=r(n.key,n.attributes,n.source.key,n.target.key,n.source.attributes,n.target.attributes,n.undirected),t&&a)return n.key}}function it(t,e,r,i){var a,o,n,s=!1;for(var u in e)if(u!==i){a=e[u];do{if(o=a.source,n=a.target,s=r(a.key,a.attributes,o.key,n.key,o.attributes,n.attributes,a.undirected),t&&s)return a.key;a=a.next}while(void 0!==a)}}function at(t,e){var r,i=Object.keys(t),a=i.length,o=0;return new T((function(){do{if(r)r=r.next;else{if(o>=a)return{done:!0};var n=i[o++];if(n===e){r=void 0;continue}r=t[n]}}while(!r);return{done:!1,value:{edge:r.key,attributes:r.attributes,source:r.source.key,target:r.target.key,sourceAttributes:r.source.attributes,targetAttributes:r.target.attributes,undirected:r.undirected}}}))}function ot(t,e,r,i){var a=e[r];if(a){var o=a.source,n=a.target;return i(a.key,a.attributes,o.key,n.key,o.attributes,n.attributes,a.undirected)&&t?a.key:void 0}}function nt(t,e,r,i){var a=e[r];if(a){var o=!1;do{if(o=i(a.key,a.attributes,a.source.key,a.target.key,a.source.attributes,a.target.attributes,a.undirected),t&&o)return a.key;a=a.next}while(void 0!==a)}}function st(t,e){var r=t[e];return void 0!==r.next?new T((function(){if(!r)return{done:!0};var t={edge:r.key,attributes:r.attributes,source:r.source.key,target:r.target.key,sourceAttributes:r.source.attributes,targetAttributes:r.target.attributes,undirected:r.undirected};return r=r.next,{done:!1,value:t}})):T.of({edge:r.key,attributes:r.attributes,source:r.source.key,target:r.target.key,sourceAttributes:r.source.attributes,targetAttributes:r.target.attributes,undirected:r.undirected})}function ut(t,e){if(0===t.size)return[];if("mixed"===e||e===t.type)return"function"==typeof Array.from?Array.from(t._edges.keys()):z(t._edges.keys(),t._edges.size);for(var r,i,a="undirected"===e?t.undirectedSize:t.directedSize,o=new Array(a),n="undirected"===e,s=t._edges.values(),u=0;!0!==(r=s.next()).done;)(i=r.value).undirected===n&&(o[u++]=i.key);return o}function dt(t,e,r,i){if(0!==e.size)for(var a,o,n="mixed"!==r&&r!==e.type,s="undirected"===r,u=!1,d=e._edges.values();!0!==(a=d.next()).done;)if(o=a.value,!n||o.undirected===s){var c=o,h=c.key,l=c.attributes,g=c.source,p=c.target;if(u=i(h,l,g.key,p.key,g.attributes,p.attributes,o.undirected),t&&u)return h}}function ct(t,e){if(0===t.size)return T.empty();var r="mixed"!==e&&e!==t.type,i="undirected"===e,a=t._edges.values();return new T((function(){for(var t,e;;){if((t=a.next()).done)return t;if(e=t.value,!r||e.undirected===i)break}return{value:{edge:e.key,attributes:e.attributes,source:e.source.key,target:e.target.key,sourceAttributes:e.source.attributes,targetAttributes:e.target.attributes,undirected:e.undirected},done:!1}}))}function ht(t,e,r,i,a,o){var n,s=e?it:rt;if("undirected"!==r){if("out"!==i&&(n=s(t,a.in,o),t&&n))return n;if("in"!==i&&(n=s(t,a.out,o,i?void 0:a.key),t&&n))return n}if("directed"!==r&&(n=s(t,a.undirected,o),t&&n))return n}function lt(t,e,r,i){var a=[];return ht(!1,t,e,r,i,(function(t){a.push(t)})),a}function gt(t,e,r){var i=T.empty();return"undirected"!==t&&("out"!==e&&void 0!==r.in&&(i=tt(i,at(r.in))),"in"!==e&&void 0!==r.out&&(i=tt(i,at(r.out,e?void 0:r.key)))),"directed"!==t&&void 0!==r.undirected&&(i=tt(i,at(r.undirected))),i}function pt(t,e,r,i,a,o,n){var s,u=r?nt:ot;if("undirected"!==e){if(void 0!==a.in&&"out"!==i&&(s=u(t,a.in,o,n),t&&s))return s;if(void 0!==a.out&&"in"!==i&&(i||a.key!==o)&&(s=u(t,a.out,o,n),t&&s))return s}if("directed"!==e&&void 0!==a.undirected&&(s=u(t,a.undirected,o,n),t&&s))return s}function ft(t,e,r,i,a){var o=[];return pt(!1,t,e,r,i,a,(function(t){o.push(t)})),o}function bt(t,e,r,i){var a=T.empty();return"undirected"!==t&&(void 0!==r.in&&"out"!==e&&i in r.in&&(a=tt(a,st(r.in,i))),void 0!==r.out&&"in"!==e&&i in r.out&&(e||r.key!==i)&&(a=tt(a,st(r.out,i)))),"directed"!==t&&void 0!==r.undirected&&i in r.undirected&&(a=tt(a,st(r.undirected,i))),a}var yt=[{name:"neighbors",type:"mixed"},{name:"inNeighbors",type:"directed",direction:"in"},{name:"outNeighbors",type:"directed",direction:"out"},{name:"inboundNeighbors",type:"mixed",direction:"in"},{name:"outboundNeighbors",type:"mixed",direction:"out"},{name:"directedNeighbors",type:"directed"},{name:"undirectedNeighbors",type:"undirected"}];function vt(){this.A=null,this.B=null}function _t(t,e,r,i,a){for(var o in i){var n=i[o],s=n.source,u=n.target,d=s===r?u:s;if(!e||!e.has(d.key)){var c=a(d.key,d.attributes);if(t&&c)return d.key}}}function mt(t,e,r,i,a){if("mixed"!==e){if("undirected"===e)return _t(t,null,i,i.undirected,a);if("string"==typeof r)return _t(t,null,i,i[r],a)}var o,n=new vt;if("undirected"!==e){if("out"!==r){if(o=_t(t,null,i,i.in,a),t&&o)return o;n.wrap(i.in)}if("in"!==r){if(o=_t(t,n,i,i.out,a),t&&o)return o;n.wrap(i.out)}}if("directed"!==e&&(o=_t(t,n,i,i.undirected,a),t&&o))return o}function wt(t,e,r){var i=Object.keys(r),a=i.length,o=0;return new T((function(){var n=null;do{if(o>=a)return t&&t.wrap(r),{done:!0};var s=r[i[o++]],u=s.source,d=s.target;n=u===e?d:u,t&&t.has(n.key)&&(n=null)}while(null===n);return{done:!1,value:{neighbor:n.key,attributes:n.attributes}}}))}function kt(t,e,r,i,a){for(var o,n,s,u,d,c,h,l=i._nodes.values(),g=i.type;!0!==(o=l.next()).done;){var p=!1;if(n=o.value,"undirected"!==g)for(s in u=n.out){d=u[s];do{if(c=d.target,p=!0,h=a(n.key,c.key,n.attributes,c.attributes,d.key,d.attributes,d.undirected),t&&h)return d;d=d.next}while(d)}if("directed"!==g)for(s in u=n.undirected)if(!(e&&n.key>s)){d=u[s];do{if((c=d.target).key!==s&&(c=d.source),p=!0,h=a(n.key,c.key,n.attributes,c.attributes,d.key,d.attributes,d.undirected),t&&h)return d;d=d.next}while(d)}if(r&&!p&&(h=a(n.key,null,n.attributes,null,null,null,null),t&&h))return null}}function xt(t){if(!c(t))throw new B('Graph.import: invalid serialized node. A serialized node should be a plain object with at least a "key" property.');if(!("key"in t))throw new B("Graph.import: serialized node is missing its key.");if("attributes"in t&&(!c(t.attributes)||null===t.attributes))throw new B("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.")}function Et(t){if(!c(t))throw new B('Graph.import: invalid serialized edge. A serialized edge should be a plain object with at least a "source" & "target" property.');if(!("source"in t))throw new B("Graph.import: serialized edge is missing its source.");if(!("target"in t))throw new B("Graph.import: serialized edge is missing its target.");if("attributes"in t&&(!c(t.attributes)||null===t.attributes))throw new B("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.");if("undirected"in t&&"boolean"!=typeof t.undirected)throw new B("Graph.import: invalid undirectedness information. Undirected should be boolean or omitted.")}vt.prototype.wrap=function(t){null===this.A?this.A=t:null===this.B&&(this.B=t)},vt.prototype.has=function(t){return null!==this.A&&t in this.A||null!==this.B&&t in this.B};var Lt,At=(Lt=255&Math.floor(256*Math.random()),function(){return Lt++}),St=new Set(["directed","undirected","mixed"]),Ct=new Set(["domain","_events","_eventsCount","_maxListeners"]),Gt={allowSelfLoops:!0,multi:!1,type:"mixed"};function Ft(t,e,r){var i=new t.NodeDataClass(e,r);return t._nodes.set(e,i),t.emit("nodeAdded",{key:e,attributes:r}),i}function Pt(t,e,r,i,a,o,n,s){if(!i&&"undirected"===t.type)throw new q("Graph.".concat(e,": you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead."));if(i&&"directed"===t.type)throw new q("Graph.".concat(e,": you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead."));if(s&&!c(s))throw new B("Graph.".concat(e,': invalid attributes. Expecting an object but got "').concat(s,'"'));if(o=""+o,n=""+n,s=s||{},!t.allowSelfLoops&&o===n)throw new q("Graph.".concat(e,': source & target are the same ("').concat(o,"\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false."));var u=t._nodes.get(o),d=t._nodes.get(n);if(!u)throw new W("Graph.".concat(e,': source node "').concat(o,'" not found.'));if(!d)throw new W("Graph.".concat(e,': target node "').concat(n,'" not found.'));var h={key:null,undirected:i,source:o,target:n,attributes:s};if(r)a=t._edgeKeyGenerator();else if(a=""+a,t._edges.has(a))throw new q("Graph.".concat(e,': the "').concat(a,'" edge already exists in the graph.'));if(!t.multi&&(i?void 0!==u.undirected[n]:void 0!==u.out[n]))throw new q("Graph.".concat(e,': an edge linking "').concat(o,'" to "').concat(n,"\" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option."));var l=new Z(i,a,u,d,s);t._edges.set(a,l);var g=o===n;return i?(u.undirectedDegree++,d.undirectedDegree++,g&&(u.undirectedLoops++,t._undirectedSelfLoopCount++)):(u.outDegree++,d.inDegree++,g&&(u.directedLoops++,t._directedSelfLoopCount++)),t.multi?l.attachMulti():l.attach(),i?t._undirectedSize++:t._directedSize++,h.key=a,t.emit("edgeAdded",h),a}function Tt(t,e,r,i,a,o,n,s,d){if(!i&&"undirected"===t.type)throw new q("Graph.".concat(e,": you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead."));if(i&&"directed"===t.type)throw new q("Graph.".concat(e,": you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead."));if(s)if(d){if("function"!=typeof s)throw new B("Graph.".concat(e,': invalid updater function. Expecting a function but got "').concat(s,'"'))}else if(!c(s))throw new B("Graph.".concat(e,': invalid attributes. Expecting an object but got "').concat(s,'"'));var h;if(o=""+o,n=""+n,d&&(h=s,s=void 0),!t.allowSelfLoops&&o===n)throw new q("Graph.".concat(e,': source & target are the same ("').concat(o,"\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false."));var l,g,p=t._nodes.get(o),f=t._nodes.get(n);if(!r&&(l=t._edges.get(a))){if(!(l.source.key===o&&l.target.key===n||i&&l.source.key===n&&l.target.key===o))throw new q("Graph.".concat(e,': inconsistency detected when attempting to merge the "').concat(a,'" edge with "').concat(o,'" source & "').concat(n,'" target vs. ("').concat(l.source.key,'", "').concat(l.target.key,'").'));g=l}if(g||t.multi||!p||(g=i?p.undirected[n]:p.out[n]),g){var b=[g.key,!1,!1,!1];if(d?!h:!s)return b;if(d){var y=g.attributes;g.attributes=h(y),t.emit("edgeAttributesUpdated",{type:"replace",key:g.key,attributes:g.attributes})}else u(g.attributes,s),t.emit("edgeAttributesUpdated",{type:"merge",key:g.key,attributes:g.attributes,data:s});return b}s=s||{},d&&h&&(s=h(s));var v={key:null,undirected:i,source:o,target:n,attributes:s};if(r)a=t._edgeKeyGenerator();else if(a=""+a,t._edges.has(a))throw new q("Graph.".concat(e,': the "').concat(a,'" edge already exists in the graph.'));var _=!1,m=!1;p||(p=Ft(t,o,{}),_=!0,o===n&&(f=p,m=!0)),f||(f=Ft(t,n,{}),m=!0),l=new Z(i,a,p,f,s),t._edges.set(a,l);var w=o===n;return i?(p.undirectedDegree++,f.undirectedDegree++,w&&(p.undirectedLoops++,t._undirectedSelfLoopCount++)):(p.outDegree++,f.inDegree++,w&&(p.directedLoops++,t._directedSelfLoopCount++)),t.multi?l.attachMulti():l.attach(),i?t._undirectedSize++:t._directedSize++,v.key=a,t.emit("edgeAdded",v),[a,!0,_,m]}function Dt(t,e){t._edges.delete(e.key);var r=e.source,i=e.target,a=e.attributes,o=e.undirected,n=r===i;o?(r.undirectedDegree--,i.undirectedDegree--,n&&(r.undirectedLoops--,t._undirectedSelfLoopCount--)):(r.outDegree--,i.inDegree--,n&&(r.directedLoops--,t._directedSelfLoopCount--)),t.multi?e.detachMulti():e.detach(),o?t._undirectedSize--:t._directedSize--,t.emit("edgeDropped",{key:e.key,attributes:a,source:r.key,target:i.key,undirected:o})}var Ot=function(r){function i(t){var e;if(e=r.call(this)||this,"boolean"!=typeof(t=u({},Gt,t)).multi)throw new B("Graph.constructor: invalid 'multi' option. Expecting a boolean but got \"".concat(t.multi,'".'));if(!St.has(t.type))throw new B('Graph.constructor: invalid \'type\' option. Should be one of "mixed", "directed" or "undirected" but got "'.concat(t.type,'".'));if("boolean"!=typeof t.allowSelfLoops)throw new B("Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got \"".concat(t.allowSelfLoops,'".'));var i="mixed"===t.type?H:"directed"===t.type?Y:V;l(s(e),"NodeDataClass",i);var a="geid_"+At()+"_",o=0;return l(s(e),"_attributes",{}),l(s(e),"_nodes",new Map),l(s(e),"_edges",new Map),l(s(e),"_directedSize",0),l(s(e),"_undirectedSize",0),l(s(e),"_directedSelfLoopCount",0),l(s(e),"_undirectedSelfLoopCount",0),l(s(e),"_edgeKeyGenerator",(function(){var t;do{t=a+o++}while(e._edges.has(t));return t})),l(s(e),"_options",t),Ct.forEach((function(t){return l(s(e),t,e[t])})),g(s(e),"order",(function(){return e._nodes.size})),g(s(e),"size",(function(){return e._edges.size})),g(s(e),"directedSize",(function(){return e._directedSize})),g(s(e),"undirectedSize",(function(){return e._undirectedSize})),g(s(e),"selfLoopCount",(function(){return e._directedSelfLoopCount+e._undirectedSelfLoopCount})),g(s(e),"directedSelfLoopCount",(function(){return e._directedSelfLoopCount})),g(s(e),"undirectedSelfLoopCount",(function(){return e._undirectedSelfLoopCount})),g(s(e),"multi",e._options.multi),g(s(e),"type",e._options.type),g(s(e),"allowSelfLoops",e._options.allowSelfLoops),g(s(e),"implementation",(function(){return"graphology"})),e}e(i,r);var a=i.prototype;return a._resetInstanceCounters=function(){this._directedSize=0,this._undirectedSize=0,this._directedSelfLoopCount=0,this._undirectedSelfLoopCount=0},a.hasNode=function(t){return this._nodes.has(""+t)},a.hasDirectedEdge=function(t,e){if("undirected"===this.type)return!1;if(1===arguments.length){var r=""+t,i=this._edges.get(r);return!!i&&!i.undirected}if(2===arguments.length){t=""+t,e=""+e;var a=this._nodes.get(t);return!!a&&a.out.hasOwnProperty(e)}throw new B("Graph.hasDirectedEdge: invalid arity (".concat(arguments.length,", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."))},a.hasUndirectedEdge=function(t,e){if("directed"===this.type)return!1;if(1===arguments.length){var r=""+t,i=this._edges.get(r);return!!i&&i.undirected}if(2===arguments.length){t=""+t,e=""+e;var a=this._nodes.get(t);return!!a&&a.undirected.hasOwnProperty(e)}throw new B("Graph.hasDirectedEdge: invalid arity (".concat(arguments.length,", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."))},a.hasEdge=function(t,e){if(1===arguments.length){var r=""+t;return this._edges.has(r)}if(2===arguments.length){t=""+t,e=""+e;var i=this._nodes.get(t);return!!i&&(void 0!==i.out&&i.out.hasOwnProperty(e)||void 0!==i.undirected&&i.undirected.hasOwnProperty(e))}throw new B("Graph.hasEdge: invalid arity (".concat(arguments.length,", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."))},a.directedEdge=function(t,e){if("undirected"!==this.type){if(t=""+t,e=""+e,this.multi)throw new q("Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.");var r=this._nodes.get(t);if(!r)throw new W('Graph.directedEdge: could not find the "'.concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new W('Graph.directedEdge: could not find the "'.concat(e,'" target node in the graph.'));var i=r.out&&r.out[e]||void 0;return i?i.key:void 0}},a.undirectedEdge=function(t,e){if("directed"!==this.type){if(t=""+t,e=""+e,this.multi)throw new q("Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.");var r=this._nodes.get(t);if(!r)throw new W('Graph.undirectedEdge: could not find the "'.concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new W('Graph.undirectedEdge: could not find the "'.concat(e,'" target node in the graph.'));var i=r.undirected&&r.undirected[e]||void 0;return i?i.key:void 0}},a.edge=function(t,e){if(this.multi)throw new q("Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.");t=""+t,e=""+e;var r=this._nodes.get(t);if(!r)throw new W('Graph.edge: could not find the "'.concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new W('Graph.edge: could not find the "'.concat(e,'" target node in the graph.'));var i=r.out&&r.out[e]||r.undirected&&r.undirected[e]||void 0;if(i)return i.key},a.areDirectedNeighbors=function(t,e){t=""+t,e=""+e;var r=this._nodes.get(t);if(!r)throw new W('Graph.areDirectedNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"undirected"!==this.type&&(e in r.in||e in r.out)},a.areOutNeighbors=function(t,e){t=""+t,e=""+e;var r=this._nodes.get(t);if(!r)throw new W('Graph.areOutNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"undirected"!==this.type&&e in r.out},a.areInNeighbors=function(t,e){t=""+t,e=""+e;var r=this._nodes.get(t);if(!r)throw new W('Graph.areInNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"undirected"!==this.type&&e in r.in},a.areUndirectedNeighbors=function(t,e){t=""+t,e=""+e;var r=this._nodes.get(t);if(!r)throw new W('Graph.areUndirectedNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"directed"!==this.type&&e in r.undirected},a.areNeighbors=function(t,e){t=""+t,e=""+e;var r=this._nodes.get(t);if(!r)throw new W('Graph.areNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"undirected"!==this.type&&(e in r.in||e in r.out)||"directed"!==this.type&&e in r.undirected},a.areInboundNeighbors=function(t,e){t=""+t,e=""+e;var r=this._nodes.get(t);if(!r)throw new W('Graph.areInboundNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"undirected"!==this.type&&e in r.in||"directed"!==this.type&&e in r.undirected},a.areOutboundNeighbors=function(t,e){t=""+t,e=""+e;var r=this._nodes.get(t);if(!r)throw new W('Graph.areOutboundNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"undirected"!==this.type&&e in r.out||"directed"!==this.type&&e in r.undirected},a.inDegree=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.inDegree: could not find the "'.concat(t,'" node in the graph.'));return"undirected"===this.type?0:e.inDegree},a.outDegree=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.outDegree: could not find the "'.concat(t,'" node in the graph.'));return"undirected"===this.type?0:e.outDegree},a.directedDegree=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.directedDegree: could not find the "'.concat(t,'" node in the graph.'));return"undirected"===this.type?0:e.inDegree+e.outDegree},a.undirectedDegree=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.undirectedDegree: could not find the "'.concat(t,'" node in the graph.'));return"directed"===this.type?0:e.undirectedDegree},a.inboundDegree=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.inboundDegree: could not find the "'.concat(t,'" node in the graph.'));var r=0;return"directed"!==this.type&&(r+=e.undirectedDegree),"undirected"!==this.type&&(r+=e.inDegree),r},a.outboundDegree=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.outboundDegree: could not find the "'.concat(t,'" node in the graph.'));var r=0;return"directed"!==this.type&&(r+=e.undirectedDegree),"undirected"!==this.type&&(r+=e.outDegree),r},a.degree=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.degree: could not find the "'.concat(t,'" node in the graph.'));var r=0;return"directed"!==this.type&&(r+=e.undirectedDegree),"undirected"!==this.type&&(r+=e.inDegree+e.outDegree),r},a.inDegreeWithoutSelfLoops=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.inDegreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));return"undirected"===this.type?0:e.inDegree-e.directedLoops},a.outDegreeWithoutSelfLoops=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.outDegreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));return"undirected"===this.type?0:e.outDegree-e.directedLoops},a.directedDegreeWithoutSelfLoops=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.directedDegreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));return"undirected"===this.type?0:e.inDegree+e.outDegree-2*e.directedLoops},a.undirectedDegreeWithoutSelfLoops=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.undirectedDegreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));return"directed"===this.type?0:e.undirectedDegree-2*e.undirectedLoops},a.inboundDegreeWithoutSelfLoops=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.inboundDegreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));var r=0,i=0;return"directed"!==this.type&&(r+=e.undirectedDegree,i+=2*e.undirectedLoops),"undirected"!==this.type&&(r+=e.inDegree,i+=e.directedLoops),r-i},a.outboundDegreeWithoutSelfLoops=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.outboundDegreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));var r=0,i=0;return"directed"!==this.type&&(r+=e.undirectedDegree,i+=2*e.undirectedLoops),"undirected"!==this.type&&(r+=e.outDegree,i+=e.directedLoops),r-i},a.degreeWithoutSelfLoops=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.degreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));var r=0,i=0;return"directed"!==this.type&&(r+=e.undirectedDegree,i+=2*e.undirectedLoops),"undirected"!==this.type&&(r+=e.inDegree+e.outDegree,i+=2*e.directedLoops),r-i},a.source=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new W('Graph.source: could not find the "'.concat(t,'" edge in the graph.'));return e.source.key},a.target=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new W('Graph.target: could not find the "'.concat(t,'" edge in the graph.'));return e.target.key},a.extremities=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new W('Graph.extremities: could not find the "'.concat(t,'" edge in the graph.'));return[e.source.key,e.target.key]},a.opposite=function(t,e){t=""+t,e=""+e;var r=this._edges.get(e);if(!r)throw new W('Graph.opposite: could not find the "'.concat(e,'" edge in the graph.'));var i=r.source.key,a=r.target.key;if(t===i)return a;if(t===a)return i;throw new W('Graph.opposite: the "'.concat(t,'" node is not attached to the "').concat(e,'" edge (').concat(i,", ").concat(a,")."))},a.hasExtremity=function(t,e){t=""+t,e=""+e;var r=this._edges.get(t);if(!r)throw new W('Graph.hasExtremity: could not find the "'.concat(t,'" edge in the graph.'));return r.source.key===e||r.target.key===e},a.isUndirected=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new W('Graph.isUndirected: could not find the "'.concat(t,'" edge in the graph.'));return e.undirected},a.isDirected=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new W('Graph.isDirected: could not find the "'.concat(t,'" edge in the graph.'));return!e.undirected},a.isSelfLoop=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new W('Graph.isSelfLoop: could not find the "'.concat(t,'" edge in the graph.'));return e.source===e.target},a.addNode=function(t,e){var r=function(t,e,r){if(r&&!c(r))throw new B('Graph.addNode: invalid attributes. Expecting an object but got "'.concat(r,'"'));if(e=""+e,r=r||{},t._nodes.has(e))throw new q('Graph.addNode: the "'.concat(e,'" node already exist in the graph.'));var i=new t.NodeDataClass(e,r);return t._nodes.set(e,i),t.emit("nodeAdded",{key:e,attributes:r}),i}(this,t,e);return r.key},a.mergeNode=function(t,e){if(e&&!c(e))throw new B('Graph.mergeNode: invalid attributes. Expecting an object but got "'.concat(e,'"'));t=""+t,e=e||{};var r=this._nodes.get(t);return r?(e&&(u(r.attributes,e),this.emit("nodeAttributesUpdated",{type:"merge",key:t,attributes:r.attributes,data:e})),[t,!1]):(r=new this.NodeDataClass(t,e),this._nodes.set(t,r),this.emit("nodeAdded",{key:t,attributes:e}),[t,!0])},a.updateNode=function(t,e){if(e&&"function"!=typeof e)throw new B('Graph.updateNode: invalid updater function. Expecting a function but got "'.concat(e,'"'));t=""+t;var r=this._nodes.get(t);if(r){if(e){var i=r.attributes;r.attributes=e(i),this.emit("nodeAttributesUpdated",{type:"replace",key:t,attributes:r.attributes})}return[t,!1]}var a=e?e({}):{};return r=new this.NodeDataClass(t,a),this._nodes.set(t,r),this.emit("nodeAdded",{key:t,attributes:a}),[t,!0]},a.dropNode=function(t){t=""+t;var e,r=this._nodes.get(t);if(!r)throw new W('Graph.dropNode: could not find the "'.concat(t,'" node in the graph.'));if("undirected"!==this.type){for(var i in r.out){e=r.out[i];do{Dt(this,e),e=e.next}while(e)}for(var a in r.in){e=r.in[a];do{Dt(this,e),e=e.next}while(e)}}if("directed"!==this.type)for(var o in r.undirected){e=r.undirected[o];do{Dt(this,e),e=e.next}while(e)}this._nodes.delete(t),this.emit("nodeDropped",{key:t,attributes:r.attributes})},a.dropEdge=function(t){var e;if(arguments.length>1){var r=""+arguments[0],i=""+arguments[1];if(!(e=d(this,r,i,this.type)))throw new W('Graph.dropEdge: could not find the "'.concat(r,'" -> "').concat(i,'" edge in the graph.'))}else if(t=""+t,!(e=this._edges.get(t)))throw new W('Graph.dropEdge: could not find the "'.concat(t,'" edge in the graph.'));return Dt(this,e),this},a.dropDirectedEdge=function(t,e){if(arguments.length<2)throw new q("Graph.dropDirectedEdge: it does not make sense to try and drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");if(this.multi)throw new q("Graph.dropDirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");var r=d(this,t=""+t,e=""+e,"directed");if(!r)throw new W('Graph.dropDirectedEdge: could not find a "'.concat(t,'" -> "').concat(e,'" edge in the graph.'));return Dt(this,r),this},a.dropUndirectedEdge=function(t,e){if(arguments.length<2)throw new q("Graph.dropUndirectedEdge: it does not make sense to drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");if(this.multi)throw new q("Graph.dropUndirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");var r=d(this,t,e,"undirected");if(!r)throw new W('Graph.dropUndirectedEdge: could not find a "'.concat(t,'" -> "').concat(e,'" edge in the graph.'));return Dt(this,r),this},a.clear=function(){this._edges.clear(),this._nodes.clear(),this._resetInstanceCounters(),this.emit("cleared")},a.clearEdges=function(){for(var t,e=this._nodes.values();!0!==(t=e.next()).done;)t.value.clear();this._edges.clear(),this._resetInstanceCounters(),this.emit("edgesCleared")},a.getAttribute=function(t){return this._attributes[t]},a.getAttributes=function(){return this._attributes},a.hasAttribute=function(t){return this._attributes.hasOwnProperty(t)},a.setAttribute=function(t,e){return this._attributes[t]=e,this.emit("attributesUpdated",{type:"set",attributes:this._attributes,name:t}),this},a.updateAttribute=function(t,e){if("function"!=typeof e)throw new B("Graph.updateAttribute: updater should be a function.");var r=this._attributes[t];return this._attributes[t]=e(r),this.emit("attributesUpdated",{type:"set",attributes:this._attributes,name:t}),this},a.removeAttribute=function(t){return delete this._attributes[t],this.emit("attributesUpdated",{type:"remove",attributes:this._attributes,name:t}),this},a.replaceAttributes=function(t){if(!c(t))throw new B("Graph.replaceAttributes: provided attributes are not a plain object.");return this._attributes=t,this.emit("attributesUpdated",{type:"replace",attributes:this._attributes}),this},a.mergeAttributes=function(t){if(!c(t))throw new B("Graph.mergeAttributes: provided attributes are not a plain object.");return u(this._attributes,t),this.emit("attributesUpdated",{type:"merge",attributes:this._attributes,data:t}),this},a.updateAttributes=function(t){if("function"!=typeof t)throw new B("Graph.updateAttributes: provided updater is not a function.");return this._attributes=t(this._attributes),this.emit("attributesUpdated",{type:"update",attributes:this._attributes}),this},a.updateEachNodeAttributes=function(t,e){if("function"!=typeof t)throw new B("Graph.updateEachNodeAttributes: expecting an updater function.");if(e&&!p(e))throw new B("Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");for(var r,i,a=this._nodes.values();!0!==(r=a.next()).done;)(i=r.value).attributes=t(i.key,i.attributes);this.emit("eachNodeAttributesUpdated",{hints:e||null})},a.updateEachEdgeAttributes=function(t,e){if("function"!=typeof t)throw new B("Graph.updateEachEdgeAttributes: expecting an updater function.");if(e&&!p(e))throw new B("Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");for(var r,i,a,o,n=this._edges.values();!0!==(r=n.next()).done;)a=(i=r.value).source,o=i.target,i.attributes=t(i.key,i.attributes,a.key,o.key,a.attributes,o.attributes,i.undirected);this.emit("eachEdgeAttributesUpdated",{hints:e||null})},a.forEachAdjacencyEntry=function(t){if("function"!=typeof t)throw new B("Graph.forEachAdjacencyEntry: expecting a callback.");kt(!1,!1,!1,this,t)},a.forEachAdjacencyEntryWithOrphans=function(t){if("function"!=typeof t)throw new B("Graph.forEachAdjacencyEntryWithOrphans: expecting a callback.");kt(!1,!1,!0,this,t)},a.forEachAssymetricAdjacencyEntry=function(t){if("function"!=typeof t)throw new B("Graph.forEachAssymetricAdjacencyEntry: expecting a callback.");kt(!1,!0,!1,this,t)},a.forEachAssymetricAdjacencyEntryWithOrphans=function(t){if("function"!=typeof t)throw new B("Graph.forEachAssymetricAdjacencyEntryWithOrphans: expecting a callback.");kt(!1,!0,!0,this,t)},a.nodes=function(){return"function"==typeof Array.from?Array.from(this._nodes.keys()):z(this._nodes.keys(),this._nodes.size)},a.forEachNode=function(t){if("function"!=typeof t)throw new B("Graph.forEachNode: expecting a callback.");for(var e,r,i=this._nodes.values();!0!==(e=i.next()).done;)t((r=e.value).key,r.attributes)},a.findNode=function(t){if("function"!=typeof t)throw new B("Graph.findNode: expecting a callback.");for(var e,r,i=this._nodes.values();!0!==(e=i.next()).done;)if(t((r=e.value).key,r.attributes))return r.key},a.mapNodes=function(t){if("function"!=typeof t)throw new B("Graph.mapNode: expecting a callback.");for(var e,r,i=this._nodes.values(),a=new Array(this.order),o=0;!0!==(e=i.next()).done;)r=e.value,a[o++]=t(r.key,r.attributes);return a},a.someNode=function(t){if("function"!=typeof t)throw new B("Graph.someNode: expecting a callback.");for(var e,r,i=this._nodes.values();!0!==(e=i.next()).done;)if(t((r=e.value).key,r.attributes))return!0;return!1},a.everyNode=function(t){if("function"!=typeof t)throw new B("Graph.everyNode: expecting a callback.");for(var e,r,i=this._nodes.values();!0!==(e=i.next()).done;)if(!t((r=e.value).key,r.attributes))return!1;return!0},a.filterNodes=function(t){if("function"!=typeof t)throw new B("Graph.filterNodes: expecting a callback.");for(var e,r,i=this._nodes.values(),a=[];!0!==(e=i.next()).done;)t((r=e.value).key,r.attributes)&&a.push(r.key);return a},a.reduceNodes=function(t,e){if("function"!=typeof t)throw new B("Graph.reduceNodes: expecting a callback.");if(arguments.length<2)throw new B("Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.");for(var r,i,a=e,o=this._nodes.values();!0!==(r=o.next()).done;)a=t(a,(i=r.value).key,i.attributes);return a},a.nodeEntries=function(){var t=this._nodes.values();return new T((function(){var e=t.next();if(e.done)return e;var r=e.value;return{value:{node:r.key,attributes:r.attributes},done:!1}}))},a.export=function(){var t=this,e=new Array(this._nodes.size),r=0;this._nodes.forEach((function(t,i){e[r++]=function(t,e){var r={key:t};return h(e.attributes)||(r.attributes=u({},e.attributes)),r}(i,t)}));var i=new Array(this._edges.size);return r=0,this._edges.forEach((function(e,a){i[r++]=function(t,e,r){var i={key:e,source:r.source.key,target:r.target.key};return h(r.attributes)||(i.attributes=u({},r.attributes)),"mixed"===t&&r.undirected&&(i.undirected=!0),i}(t.type,a,e)})),{options:{type:this.type,multi:this.multi,allowSelfLoops:this.allowSelfLoops},attributes:this.getAttributes(),nodes:e,edges:i}},a.import=function(t){var e,r,a,o,n,s=this,u=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(t instanceof i)return t.forEachNode((function(t,e){u?s.mergeNode(t,e):s.addNode(t,e)})),t.forEachEdge((function(t,e,r,i,a,o,n){u?n?s.mergeUndirectedEdgeWithKey(t,r,i,e):s.mergeDirectedEdgeWithKey(t,r,i,e):n?s.addUndirectedEdgeWithKey(t,r,i,e):s.addDirectedEdgeWithKey(t,r,i,e)})),this;if(!c(t))throw new B("Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.");if(t.attributes){if(!c(t.attributes))throw new B("Graph.import: invalid attributes. Expecting a plain object.");u?this.mergeAttributes(t.attributes):this.replaceAttributes(t.attributes)}if(t.nodes){if(a=t.nodes,!Array.isArray(a))throw new B("Graph.import: invalid nodes. Expecting an array.");for(e=0,r=a.length;e<r;e++){xt(o=a[e]);var d=o,h=d.key,l=d.attributes;u?this.mergeNode(h,l):this.addNode(h,l)}}if(t.edges){var g=!1;if("undirected"===this.type&&(g=!0),a=t.edges,!Array.isArray(a))throw new B("Graph.import: invalid edges. Expecting an array.");for(e=0,r=a.length;e<r;e++){Et(n=a[e]);var p=n,f=p.source,b=p.target,y=p.attributes,v=p.undirected,_=void 0===v?g:v;"key"in n?(u?_?this.mergeUndirectedEdgeWithKey:this.mergeDirectedEdgeWithKey:_?this.addUndirectedEdgeWithKey:this.addDirectedEdgeWithKey).call(this,n.key,f,b,y):(u?_?this.mergeUndirectedEdge:this.mergeDirectedEdge:_?this.addUndirectedEdge:this.addDirectedEdge).call(this,f,b,y)}}return this},a.nullCopy=function(t){var e=new i(u({},this._options,t));return e.replaceAttributes(u({},this.getAttributes())),e},a.emptyCopy=function(t){var e=this.nullCopy(t);return this._nodes.forEach((function(t,r){var i=u({},t.attributes);t=new e.NodeDataClass(r,i),e._nodes.set(r,t)})),e},a.copy=function(t){if("string"==typeof(t=t||{}).type&&t.type!==this.type&&"mixed"!==t.type)throw new q('Graph.copy: cannot create an incompatible copy from "'.concat(this.type,'" type to "').concat(t.type,'" because this would mean losing information about the current graph.'));if("boolean"==typeof t.multi&&t.multi!==this.multi&&!0!==t.multi)throw new q("Graph.copy: cannot create an incompatible copy by downgrading a multi graph to a simple one because this would mean losing information about the current graph.");if("boolean"==typeof t.allowSelfLoops&&t.allowSelfLoops!==this.allowSelfLoops&&!0!==t.allowSelfLoops)throw new q("Graph.copy: cannot create an incompatible copy from a graph allowing self loops to one that does not because this would mean losing information about the current graph.");for(var e,r,i=this.emptyCopy(t),a=this._edges.values();!0!==(e=a.next()).done;)Pt(i,"copy",!1,(r=e.value).undirected,r.key,r.source.key,r.target.key,u({},r.attributes));return i},a.toJSON=function(){return this.export()},a.toString=function(){return"[object Graph]"},a.inspect=function(){var e=this,r={};this._nodes.forEach((function(t,e){r[e]=t.attributes}));var i={},a={};this._edges.forEach((function(t,r){var o,n=t.undirected?"--":"->",s="",u=t.source.key,d=t.target.key;t.undirected&&u>d&&(o=u,u=d,d=o);var c="(".concat(u,")").concat(n,"(").concat(d,")");r.startsWith("geid_")?e.multi&&(void 0===a[c]?a[c]=0:a[c]++,s+="".concat(a[c],". ")):s+="[".concat(r,"]: "),i[s+=c]=t.attributes}));var o={};for(var n in this)this.hasOwnProperty(n)&&!Ct.has(n)&&"function"!=typeof this[n]&&"symbol"!==t(n)&&(o[n]=this[n]);return o.attributes=this._attributes,o.nodes=r,o.edges=i,l(o,"constructor",this.constructor),o},i}(b.exports.EventEmitter);"undefined"!=typeof Symbol&&(Ot.prototype[Symbol.for("nodejs.util.inspect.custom")]=Ot.prototype.inspect),[{name:function(t){return"".concat(t,"Edge")},generateKey:!0},{name:function(t){return"".concat(t,"DirectedEdge")},generateKey:!0,type:"directed"},{name:function(t){return"".concat(t,"UndirectedEdge")},generateKey:!0,type:"undirected"},{name:function(t){return"".concat(t,"EdgeWithKey")}},{name:function(t){return"".concat(t,"DirectedEdgeWithKey")},type:"directed"},{name:function(t){return"".concat(t,"UndirectedEdgeWithKey")},type:"undirected"}].forEach((function(t){["add","merge","update"].forEach((function(e){var r=t.name(e),i="add"===e?Pt:Tt;t.generateKey?Ot.prototype[r]=function(a,o,n){return i(this,r,!0,"undirected"===(t.type||this.type),null,a,o,n,"update"===e)}:Ot.prototype[r]=function(a,o,n,s){return i(this,r,!1,"undirected"===(t.type||this.type),a,o,n,s,"update"===e)}}))})),function(t){Q.forEach((function(e){var r=e.name,i=e.attacher;i(t,r("Node"),0),i(t,r("Source"),1),i(t,r("Target"),2),i(t,r("Opposite"),3)}))}(Ot),function(t){X.forEach((function(e){var r=e.name,i=e.attacher;i(t,r("Edge"),"mixed"),i(t,r("DirectedEdge"),"directed"),i(t,r("UndirectedEdge"),"undirected")}))}(Ot),function(t){et.forEach((function(e){!function(t,e){var r=e.name,i=e.type,a=e.direction;t.prototype[r]=function(t,e){if("mixed"!==i&&"mixed"!==this.type&&i!==this.type)return[];if(!arguments.length)return ut(this,i);if(1===arguments.length){t=""+t;var o=this._nodes.get(t);if(void 0===o)throw new W("Graph.".concat(r,': could not find the "').concat(t,'" node in the graph.'));return lt(this.multi,"mixed"===i?this.type:i,a,o)}if(2===arguments.length){t=""+t,e=""+e;var n=this._nodes.get(t);if(!n)throw new W("Graph.".concat(r,':  could not find the "').concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new W("Graph.".concat(r,':  could not find the "').concat(e,'" target node in the graph.'));return ft(i,this.multi,a,n,e)}throw new B("Graph.".concat(r,": too many arguments (expecting 0, 1 or 2 and got ").concat(arguments.length,")."))}}(t,e),function(t,e){var r=e.name,i=e.type,a=e.direction,o="forEach"+r[0].toUpperCase()+r.slice(1,-1);t.prototype[o]=function(t,e,r){if("mixed"===i||"mixed"===this.type||i===this.type){if(1===arguments.length)return dt(!1,this,i,r=t);if(2===arguments.length){t=""+t,r=e;var n=this._nodes.get(t);if(void 0===n)throw new W("Graph.".concat(o,': could not find the "').concat(t,'" node in the graph.'));return ht(!1,this.multi,"mixed"===i?this.type:i,a,n,r)}if(3===arguments.length){t=""+t,e=""+e;var s=this._nodes.get(t);if(!s)throw new W("Graph.".concat(o,':  could not find the "').concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new W("Graph.".concat(o,':  could not find the "').concat(e,'" target node in the graph.'));return pt(!1,i,this.multi,a,s,e,r)}throw new B("Graph.".concat(o,": too many arguments (expecting 1, 2 or 3 and got ").concat(arguments.length,")."))}};var n="map"+r[0].toUpperCase()+r.slice(1);t.prototype[n]=function(){var t,e=Array.prototype.slice.call(arguments),r=e.pop();if(0===e.length){var a=0;"directed"!==i&&(a+=this.undirectedSize),"undirected"!==i&&(a+=this.directedSize),t=new Array(a);var n=0;e.push((function(e,i,a,o,s,u,d){t[n++]=r(e,i,a,o,s,u,d)}))}else t=[],e.push((function(e,i,a,o,n,s,u){t.push(r(e,i,a,o,n,s,u))}));return this[o].apply(this,e),t};var s="filter"+r[0].toUpperCase()+r.slice(1);t.prototype[s]=function(){var t=Array.prototype.slice.call(arguments),e=t.pop(),r=[];return t.push((function(t,i,a,o,n,s,u){e(t,i,a,o,n,s,u)&&r.push(t)})),this[o].apply(this,t),r};var u="reduce"+r[0].toUpperCase()+r.slice(1);t.prototype[u]=function(){var t,e,r=Array.prototype.slice.call(arguments);if(r.length<2||r.length>4)throw new B("Graph.".concat(u,": invalid number of arguments (expecting 2, 3 or 4 and got ").concat(r.length,")."));if("function"==typeof r[r.length-1]&&"function"!=typeof r[r.length-2])throw new B("Graph.".concat(u,": missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array."));2===r.length?(t=r[0],e=r[1],r=[]):3===r.length?(t=r[1],e=r[2],r=[r[0]]):4===r.length&&(t=r[2],e=r[3],r=[r[0],r[1]]);var i=e;return r.push((function(e,r,a,o,n,s,u){i=t(i,e,r,a,o,n,s,u)})),this[o].apply(this,r),i}}(t,e),function(t,e){var r=e.name,i=e.type,a=e.direction,o="find"+r[0].toUpperCase()+r.slice(1,-1);t.prototype[o]=function(t,e,r){if("mixed"!==i&&"mixed"!==this.type&&i!==this.type)return!1;if(1===arguments.length)return dt(!0,this,i,r=t);if(2===arguments.length){t=""+t,r=e;var n=this._nodes.get(t);if(void 0===n)throw new W("Graph.".concat(o,': could not find the "').concat(t,'" node in the graph.'));return ht(!0,this.multi,"mixed"===i?this.type:i,a,n,r)}if(3===arguments.length){t=""+t,e=""+e;var s=this._nodes.get(t);if(!s)throw new W("Graph.".concat(o,':  could not find the "').concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new W("Graph.".concat(o,':  could not find the "').concat(e,'" target node in the graph.'));return pt(!0,i,this.multi,a,s,e,r)}throw new B("Graph.".concat(o,": too many arguments (expecting 1, 2 or 3 and got ").concat(arguments.length,")."))};var n="some"+r[0].toUpperCase()+r.slice(1,-1);t.prototype[n]=function(){var t=Array.prototype.slice.call(arguments),e=t.pop();return t.push((function(t,r,i,a,o,n,s){return e(t,r,i,a,o,n,s)})),!!this[o].apply(this,t)};var s="every"+r[0].toUpperCase()+r.slice(1,-1);t.prototype[s]=function(){var t=Array.prototype.slice.call(arguments),e=t.pop();return t.push((function(t,r,i,a,o,n,s){return!e(t,r,i,a,o,n,s)})),!this[o].apply(this,t)}}(t,e),function(t,e){var r=e.name,i=e.type,a=e.direction,o=r.slice(0,-1)+"Entries";t.prototype[o]=function(t,e){if("mixed"!==i&&"mixed"!==this.type&&i!==this.type)return T.empty();if(!arguments.length)return ct(this,i);if(1===arguments.length){t=""+t;var r=this._nodes.get(t);if(!r)throw new W("Graph.".concat(o,': could not find the "').concat(t,'" node in the graph.'));return gt(i,a,r)}if(2===arguments.length){t=""+t,e=""+e;var n=this._nodes.get(t);if(!n)throw new W("Graph.".concat(o,':  could not find the "').concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new W("Graph.".concat(o,':  could not find the "').concat(e,'" target node in the graph.'));return bt(i,a,n,e)}throw new B("Graph.".concat(o,": too many arguments (expecting 0, 1 or 2 and got ").concat(arguments.length,")."))}}(t,e)}))}(Ot),function(t){yt.forEach((function(e){(function(t,e){var r=e.name,i=e.type,a=e.direction;t.prototype[r]=function(t){if("mixed"!==i&&"mixed"!==this.type&&i!==this.type)return[];t=""+t;var e=this._nodes.get(t);if(void 0===e)throw new W("Graph.".concat(r,': could not find the "').concat(t,'" node in the graph.'));return function(t,e,r){if("mixed"!==t){if("undirected"===t)return Object.keys(r.undirected);if("string"==typeof e)return Object.keys(r[e])}var i=[];return mt(!1,t,e,r,(function(t){i.push(t)})),i}("mixed"===i?this.type:i,a,e)}})(t,e),function(t,e){var r=e.name,i=e.type,a=e.direction,o="forEach"+r[0].toUpperCase()+r.slice(1,-1);t.prototype[o]=function(t,e){if("mixed"===i||"mixed"===this.type||i===this.type){t=""+t;var r=this._nodes.get(t);if(void 0===r)throw new W("Graph.".concat(o,': could not find the "').concat(t,'" node in the graph.'));mt(!1,"mixed"===i?this.type:i,a,r,e)}};var n="map"+r[0].toUpperCase()+r.slice(1);t.prototype[n]=function(t,e){var r=[];return this[o](t,(function(t,i){r.push(e(t,i))})),r};var s="filter"+r[0].toUpperCase()+r.slice(1);t.prototype[s]=function(t,e){var r=[];return this[o](t,(function(t,i){e(t,i)&&r.push(t)})),r};var u="reduce"+r[0].toUpperCase()+r.slice(1);t.prototype[u]=function(t,e,r){if(arguments.length<3)throw new B("Graph.".concat(u,": missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array."));var i=r;return this[o](t,(function(t,r){i=e(i,t,r)})),i}}(t,e),function(t,e){var r=e.name,i=e.type,a=e.direction,o=r[0].toUpperCase()+r.slice(1,-1),n="find"+o;t.prototype[n]=function(t,e){if("mixed"===i||"mixed"===this.type||i===this.type){t=""+t;var r=this._nodes.get(t);if(void 0===r)throw new W("Graph.".concat(n,': could not find the "').concat(t,'" node in the graph.'));return mt(!0,"mixed"===i?this.type:i,a,r,e)}};var s="some"+o;t.prototype[s]=function(t,e){return!!this[n](t,e)};var u="every"+o;t.prototype[u]=function(t,e){return!this[n](t,(function(t,r){return!e(t,r)}))}}(t,e),function(t,e){var r=e.name,i=e.type,a=e.direction,o=r.slice(0,-1)+"Entries";t.prototype[o]=function(t){if("mixed"!==i&&"mixed"!==this.type&&i!==this.type)return T.empty();t=""+t;var e=this._nodes.get(t);if(void 0===e)throw new W("Graph.".concat(o,': could not find the "').concat(t,'" node in the graph.'));return function(t,e,r){if("mixed"!==t){if("undirected"===t)return wt(null,r,r.undirected);if("string"==typeof e)return wt(null,r,r[e])}var i=T.empty(),a=new vt;return"undirected"!==t&&("out"!==e&&(i=tt(i,wt(a,r,r.in))),"in"!==e&&(i=tt(i,wt(a,r,r.out)))),"directed"!==t&&(i=tt(i,wt(a,r,r.undirected))),i}("mixed"===i?this.type:i,a,e)}}(t,e)}))}(Ot);var Nt=function(t){function r(e){var r=u({type:"directed"},e);if("multi"in r&&!1!==r.multi)throw new B("DirectedGraph.from: inconsistent indication that the graph should be multi in given options!");if("directed"!==r.type)throw new B('DirectedGraph.from: inconsistent "'+r.type+'" type in given options!');return t.call(this,r)||this}return e(r,t),r}(Ot),Rt=function(t){function r(e){var r=u({type:"undirected"},e);if("multi"in r&&!1!==r.multi)throw new B("UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!");if("undirected"!==r.type)throw new B('UndirectedGraph.from: inconsistent "'+r.type+'" type in given options!');return t.call(this,r)||this}return e(r,t),r}(Ot),Mt=function(t){function r(e){var r=u({multi:!0},e);if("multi"in r&&!0!==r.multi)throw new B("MultiGraph.from: inconsistent indication that the graph should be simple in given options!");return t.call(this,r)||this}return e(r,t),r}(Ot),jt=function(t){function r(e){var r=u({type:"directed",multi:!0},e);if("multi"in r&&!0!==r.multi)throw new B("MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!");if("directed"!==r.type)throw new B('MultiDirectedGraph.from: inconsistent "'+r.type+'" type in given options!');return t.call(this,r)||this}return e(r,t),r}(Ot),Ut=function(t){function r(e){var r=u({type:"undirected",multi:!0},e);if("multi"in r&&!0!==r.multi)throw new B("MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!");if("undirected"!==r.type)throw new B('MultiUndirectedGraph.from: inconsistent "'+r.type+'" type in given options!');return t.call(this,r)||this}return e(r,t),r}(Ot);function zt(t){t.from=function(e,r){var i=u({},e.options,r),a=new t(i);return a.import(e),a}}return zt(Ot),zt(Nt),zt(Rt),zt(Mt),zt(jt),zt(Ut),Ot.Graph=Ot,Ot.DirectedGraph=Nt,Ot.UndirectedGraph=Rt,Ot.MultiGraph=Mt,Ot.MultiDirectedGraph=jt,Ot.MultiUndirectedGraph=Ut,Ot.InvalidArgumentsGraphError=B,Ot.NotFoundGraphError=W,Ot.UsageGraphError=q,Ot}()},554:function(t,e,r){"use strict";var i,a=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var n=r(227),s=o(r(941)),u=r(524),d=r(291),c=1.5,h=function(t){function e(){var e=t.call(this)||this;return e.x=.5,e.y=.5,e.angle=0,e.ratio=1,e.minRatio=null,e.maxRatio=null,e.nextFrame=null,e.previousState=null,e.enabled=!0,e.previousState=e.getState(),e}return a(e,t),e.from=function(t){return(new e).setState(t)},e.prototype.enable=function(){return this.enabled=!0,this},e.prototype.disable=function(){return this.enabled=!1,this},e.prototype.getState=function(){return{x:this.x,y:this.y,angle:this.angle,ratio:this.ratio}},e.prototype.hasState=function(t){return this.x===t.x&&this.y===t.y&&this.ratio===t.ratio&&this.angle===t.angle},e.prototype.getPreviousState=function(){var t=this.previousState;return t?{x:t.x,y:t.y,angle:t.angle,ratio:t.ratio}:null},e.prototype.getBoundedRatio=function(t){var e=t;return"number"==typeof this.minRatio&&(e=Math.max(e,this.minRatio)),"number"==typeof this.maxRatio&&(e=Math.min(e,this.maxRatio)),e},e.prototype.validateState=function(t){var e={};return"number"==typeof t.x&&(e.x=t.x),"number"==typeof t.y&&(e.y=t.y),"number"==typeof t.angle&&(e.angle=t.angle),"number"==typeof t.ratio&&(e.ratio=this.getBoundedRatio(t.ratio)),e},e.prototype.isAnimated=function(){return!!this.nextFrame},e.prototype.setState=function(t){if(!this.enabled)return this;this.previousState=this.getState();var e=this.validateState(t);return"number"==typeof e.x&&(this.x=e.x),"number"==typeof e.y&&(this.y=e.y),"number"==typeof e.angle&&(this.angle=e.angle),"number"==typeof e.ratio&&(this.ratio=e.ratio),this.hasState(this.previousState)||this.emit("updated",this.getState()),this},e.prototype.updateState=function(t){return this.setState(t(this.getState())),this},e.prototype.animate=function(t,e,r){var i=this;if(this.enabled){var a=Object.assign({},n.ANIMATE_DEFAULTS,e),o=this.validateState(t),d="function"==typeof a.easing?a.easing:s.default[a.easing],c=Date.now(),h=this.getState(),l=function(){var t=(Date.now()-c)/a.duration;if(t>=1)return i.nextFrame=null,i.setState(o),void(i.animationCallback&&(i.animationCallback.call(null),i.animationCallback=void 0));var e=d(t),r={};"number"==typeof o.x&&(r.x=h.x+(o.x-h.x)*e),"number"==typeof o.y&&(r.y=h.y+(o.y-h.y)*e),"number"==typeof o.angle&&(r.angle=h.angle+(o.angle-h.angle)*e),"number"==typeof o.ratio&&(r.ratio=h.ratio+(o.ratio-h.ratio)*e),i.setState(r),i.nextFrame=(0,u.requestFrame)(l)};this.nextFrame?((0,u.cancelFrame)(this.nextFrame),this.animationCallback&&this.animationCallback.call(null),this.nextFrame=(0,u.requestFrame)(l)):l(),this.animationCallback=r}},e.prototype.animatedZoom=function(t){if(t){if("number"==typeof t)return this.animate({ratio:this.ratio/t});this.animate({ratio:this.ratio/(t.factor||c)},t)}else this.animate({ratio:this.ratio/c})},e.prototype.animatedUnzoom=function(t){if(t){if("number"==typeof t)return this.animate({ratio:this.ratio*t});this.animate({ratio:this.ratio*(t.factor||c)},t)}else this.animate({ratio:this.ratio*c})},e.prototype.animatedReset=function(t){this.animate({x:.5,y:.5,ratio:1,angle:0},t)},e.prototype.copy=function(){return e.from(this.getState())},e}(d.TypedEventEmitter);e.default=h},760:function(t,e,r){"use strict";var i,a=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__assign||function(){return o=Object.assign||function(t){for(var e,r=1,i=arguments.length;r<i;r++)for(var a in e=arguments[r])Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t},o.apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0}),e.getWheelDelta=e.getTouchCoords=e.getTouchesArray=e.getWheelCoords=e.getMouseCoords=e.getPosition=void 0;var n=r(291);function s(t,e){var r=e.getBoundingClientRect();return{x:t.clientX-r.left,y:t.clientY-r.top}}function u(t,e){var r=o(o({},s(t,e)),{sigmaDefaultPrevented:!1,preventSigmaDefault:function(){r.sigmaDefaultPrevented=!0},original:t});return r}function d(t){for(var e=[],r=0,i=Math.min(t.length,2);r<i;r++)e.push(t[r]);return e}function c(t){if(void 0!==t.deltaY)return-3*t.deltaY/360;if(void 0!==t.detail)return t.detail/-9;throw new Error("Captor: could not extract delta from event.")}e.getPosition=s,e.getMouseCoords=u,e.getWheelCoords=function(t,e){return o(o({},u(t,e)),{delta:c(t)})},e.getTouchesArray=d,e.getTouchCoords=function(t,e){return{touches:d(t.touches).map((function(t){return s(t,e)})),original:t}},e.getWheelDelta=c;var h=function(t){function e(e,r){var i=t.call(this)||this;return i.container=e,i.renderer=r,i}return a(e,t),e}(n.TypedEventEmitter);e.default=h},886:function(t,e,r){"use strict";var i,a=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__createBinding||(Object.create?function(t,e,r,i){void 0===i&&(i=r),Object.defineProperty(t,i,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,i){void 0===i&&(i=r),t[i]=e[r]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&o(e,t,r);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0});var u=s(r(760)),d=function(t){function e(e,r){var i=t.call(this,e,r)||this;return i.enabled=!0,i.draggedEvents=0,i.downStartTime=null,i.lastMouseX=null,i.lastMouseY=null,i.isMouseDown=!1,i.isMoving=!1,i.movingTimeout=null,i.startCameraState=null,i.clicks=0,i.doubleClickTimeout=null,i.currentWheelDirection=0,i.handleClick=i.handleClick.bind(i),i.handleRightClick=i.handleRightClick.bind(i),i.handleDown=i.handleDown.bind(i),i.handleUp=i.handleUp.bind(i),i.handleMove=i.handleMove.bind(i),i.handleWheel=i.handleWheel.bind(i),i.handleOut=i.handleOut.bind(i),e.addEventListener("click",i.handleClick,!1),e.addEventListener("contextmenu",i.handleRightClick,!1),e.addEventListener("mousedown",i.handleDown,!1),e.addEventListener("wheel",i.handleWheel,!1),e.addEventListener("mouseout",i.handleOut,!1),document.addEventListener("mousemove",i.handleMove,!1),document.addEventListener("mouseup",i.handleUp,!1),i}return a(e,t),e.prototype.kill=function(){var t=this.container;t.removeEventListener("click",this.handleClick),t.removeEventListener("contextmenu",this.handleRightClick),t.removeEventListener("mousedown",this.handleDown),t.removeEventListener("wheel",this.handleWheel),t.removeEventListener("mouseout",this.handleOut),document.removeEventListener("mousemove",this.handleMove),document.removeEventListener("mouseup",this.handleUp)},e.prototype.handleClick=function(t){var e=this;if(this.enabled){if(this.clicks++,2===this.clicks)return this.clicks=0,"number"==typeof this.doubleClickTimeout&&(clearTimeout(this.doubleClickTimeout),this.doubleClickTimeout=null),this.handleDoubleClick(t);setTimeout((function(){e.clicks=0,e.doubleClickTimeout=null}),300),this.draggedEvents<3&&this.emit("click",(0,u.getMouseCoords)(t,this.container))}},e.prototype.handleRightClick=function(t){this.enabled&&this.emit("rightClick",(0,u.getMouseCoords)(t,this.container))},e.prototype.handleDoubleClick=function(t){if(this.enabled){t.preventDefault(),t.stopPropagation();var e=(0,u.getMouseCoords)(t,this.container);if(this.emit("doubleClick",e),!e.sigmaDefaultPrevented){var r=this.renderer.getCamera(),i=r.getBoundedRatio(r.getState().ratio/2.2);r.animate(this.renderer.getViewportZoomedState((0,u.getPosition)(t,this.container),i),{easing:"quadraticInOut",duration:200})}}},e.prototype.handleDown=function(t){if(this.enabled){if(0===t.button){this.startCameraState=this.renderer.getCamera().getState();var e=(0,u.getPosition)(t,this.container),r=e.x,i=e.y;this.lastMouseX=r,this.lastMouseY=i,this.draggedEvents=0,this.downStartTime=Date.now(),this.isMouseDown=!0}this.emit("mousedown",(0,u.getMouseCoords)(t,this.container))}},e.prototype.handleUp=function(t){var e=this;if(this.enabled&&this.isMouseDown){var r=this.renderer.getCamera();this.isMouseDown=!1,"number"==typeof this.movingTimeout&&(clearTimeout(this.movingTimeout),this.movingTimeout=null);var i=(0,u.getPosition)(t,this.container),a=i.x,o=i.y,n=r.getState(),s=r.getPreviousState()||{x:0,y:0};this.isMoving?r.animate({x:n.x+3*(n.x-s.x),y:n.y+3*(n.y-s.y)},{duration:200,easing:"quadraticOut"}):this.lastMouseX===a&&this.lastMouseY===o||r.setState({x:n.x,y:n.y}),this.isMoving=!1,setTimeout((function(){e.draggedEvents=0,e.renderer.refresh()}),0),this.emit("mouseup",(0,u.getMouseCoords)(t,this.container))}},e.prototype.handleMove=function(t){var e=this;if(this.enabled){var r=(0,u.getMouseCoords)(t,this.container);if(this.emit("mousemovebody",r),t.target===this.container&&this.emit("mousemove",r),!r.sigmaDefaultPrevented&&this.isMouseDown){this.isMoving=!0,this.draggedEvents++,"number"==typeof this.movingTimeout&&clearTimeout(this.movingTimeout),this.movingTimeout=window.setTimeout((function(){e.movingTimeout=null,e.isMoving=!1}),100);var i=this.renderer.getCamera(),a=(0,u.getPosition)(t,this.container),o=a.x,n=a.y,s=this.renderer.viewportToFramedGraph({x:this.lastMouseX,y:this.lastMouseY}),d=this.renderer.viewportToFramedGraph({x:o,y:n}),c=s.x-d.x,h=s.y-d.y,l=i.getState(),g=l.x+c,p=l.y+h;i.setState({x:g,y:p}),this.lastMouseX=o,this.lastMouseY=n,t.preventDefault(),t.stopPropagation()}}},e.prototype.handleWheel=function(t){var e=this;if(this.enabled){t.preventDefault(),t.stopPropagation();var r=(0,u.getWheelDelta)(t);if(r){var i=(0,u.getWheelCoords)(t,this.container);if(this.emit("wheel",i),!i.sigmaDefaultPrevented){var a=r>0?1/1.7:1.7,o=this.renderer.getCamera(),n=o.getBoundedRatio(o.getState().ratio*a),s=r>0?1:-1,d=Date.now();this.currentWheelDirection===s&&this.lastWheelTriggerTime&&d-this.lastWheelTriggerTime<50||(o.animate(this.renderer.getViewportZoomedState((0,u.getPosition)(t,this.container),n),{easing:"quadraticOut",duration:250},(function(){e.currentWheelDirection=0})),this.currentWheelDirection=s,this.lastWheelTriggerTime=d)}}}},e.prototype.handleOut=function(){},e}(u.default);e.default=d},311:function(t,e,r){"use strict";var i,a=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__createBinding||(Object.create?function(t,e,r,i){void 0===i&&(i=r),Object.defineProperty(t,i,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,i){void 0===i&&(i=r),t[i]=e[r]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&o(e,t,r);return n(e,t),e},u=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var i,a,o=r.call(t),n=[];try{for(;(void 0===e||e-- >0)&&!(i=o.next()).done;)n.push(i.value)}catch(t){a={error:t}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(a)throw a.error}}return n};Object.defineProperty(e,"__esModule",{value:!0});var d=s(r(760)),c=function(t){function e(e,r){var i=t.call(this,e,r)||this;return i.enabled=!0,i.isMoving=!1,i.hasMoved=!1,i.touchMode=0,i.startTouchesPositions=[],i.handleStart=i.handleStart.bind(i),i.handleLeave=i.handleLeave.bind(i),i.handleMove=i.handleMove.bind(i),e.addEventListener("touchstart",i.handleStart,!1),e.addEventListener("touchend",i.handleLeave,!1),e.addEventListener("touchcancel",i.handleLeave,!1),e.addEventListener("touchmove",i.handleMove,!1),i}return a(e,t),e.prototype.kill=function(){var t=this.container;t.removeEventListener("touchstart",this.handleStart),t.removeEventListener("touchend",this.handleLeave),t.removeEventListener("touchcancel",this.handleLeave),t.removeEventListener("touchmove",this.handleMove)},e.prototype.getDimensions=function(){return{width:this.container.offsetWidth,height:this.container.offsetHeight}},e.prototype.dispatchRelatedMouseEvent=function(t,e,r,i){var a=r||e.touches[0],o=new MouseEvent(t,{clientX:a.clientX,clientY:a.clientY,altKey:e.altKey,ctrlKey:e.ctrlKey});o.isFakeSigmaMouseEvent=!0,(i||this.container).dispatchEvent(o)},e.prototype.handleStart=function(t){var e=this;if(this.enabled){t.preventDefault(),1===t.touches.length&&this.dispatchRelatedMouseEvent("mousedown",t);var r=(0,d.getTouchesArray)(t.touches);if(this.touchMode=r.length,this.startCameraState=this.renderer.getCamera().getState(),this.startTouchesPositions=r.map((function(t){return(0,d.getPosition)(t,e.container)})),this.lastTouches=r,this.lastTouchesPositions=this.startTouchesPositions,2===this.touchMode){var i=u(this.startTouchesPositions,2),a=i[0],o=a.x,n=a.y,s=i[1],c=s.x,h=s.y;this.startTouchesAngle=Math.atan2(h-n,c-o),this.startTouchesDistance=Math.sqrt(Math.pow(c-o,2)+Math.pow(h-n,2))}this.emit("touchdown",(0,d.getTouchCoords)(t,this.container))}},e.prototype.handleLeave=function(t){if(this.enabled){switch(t.preventDefault(),0===t.touches.length&&this.lastTouches&&this.lastTouches.length&&(this.dispatchRelatedMouseEvent("mouseup",t,this.lastTouches[0],document),this.hasMoved||this.dispatchRelatedMouseEvent("click",t,this.lastTouches[0])),this.movingTimeout&&(this.isMoving=!1,clearTimeout(this.movingTimeout)),this.touchMode){case 2:if(1===t.touches.length){this.handleStart(t),t.preventDefault();break}case 1:if(this.isMoving){var e=this.renderer.getCamera(),r=e.getState(),i=e.getPreviousState()||{x:0,y:0};e.animate({x:r.x+3*(r.x-i.x),y:r.y+3*(r.y-i.y)},{duration:200,easing:"quadraticOut"})}this.hasMoved=!1,this.isMoving=!1,this.touchMode=0}this.emit("touchup",(0,d.getTouchCoords)(t,this.container))}},e.prototype.handleMove=function(t){var e,r=this;if(this.enabled){t.preventDefault(),1===t.touches.length&&this.dispatchRelatedMouseEvent("mousemove",t);var i=(0,d.getTouchesArray)(t.touches),a=i.map((function(t){return(0,d.getPosition)(t,r.container)}));if(this.lastTouches=i,this.lastTouchesPositions=a,this.hasMoved||(this.hasMoved=a.some((function(t,e){var i=r.startTouchesPositions[e];return t.x!==i.x||t.y!==i.y}))),this.hasMoved){this.isMoving=!0,this.movingTimeout&&clearTimeout(this.movingTimeout),this.movingTimeout=window.setTimeout((function(){r.isMoving=!1}),200);var o=this.renderer.getCamera(),n=this.startCameraState;switch(this.touchMode){case 1:var s=this.renderer.viewportToFramedGraph((this.startTouchesPositions||[])[0]),c=s.x,h=s.y,l=this.renderer.viewportToFramedGraph(a[0]),g=l.x,p=l.y;o.setState({x:n.x+c-g,y:n.y+h-p});break;case 2:var f={},b=a[0],y=b.x,v=b.y,_=a[1],m=_.x,w=_.y,k=Math.atan2(w-v,m-y)-this.startTouchesAngle,x=Math.hypot(w-v,m-y)/this.startTouchesDistance,E=o.getBoundedRatio(n.ratio/x);f.ratio=E,f.angle=n.angle+k;var L=this.getDimensions(),A=this.renderer.viewportToFramedGraph((this.startTouchesPositions||[])[0],{cameraState:n}),S=Math.min(L.width,L.height),C=S/L.width,G=E/S;p=v-S/2/(S/L.height),g=(e=u([(g=y-S/2/C)*Math.cos(-f.angle)-p*Math.sin(-f.angle),p*Math.cos(-f.angle)+g*Math.sin(-f.angle)],2))[0],p=e[1],f.x=A.x-g*G,f.y=A.y+p*G,o.setState(f)}this.emit("touchmove",(0,d.getTouchCoords)(t,this.container))}}},e}(d.default);e.default=c},98:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.edgeLabelsToDisplayFromNodes=e.LabelGrid=void 0;var r=function(){function t(t,e){this.key=t,this.size=e}return t.compare=function(t,e){return t.size>e.size?-1:t.size<e.size||t.key>e.key?1:-1},t}(),i=function(){function t(){this.width=0,this.height=0,this.cellSize=0,this.columns=0,this.rows=0,this.cells={}}return t.prototype.resizeAndClear=function(t,e){this.width=t.width,this.height=t.height,this.cellSize=e,this.columns=Math.ceil(t.width/e),this.rows=Math.ceil(t.height/e),this.cells={}},t.prototype.getIndex=function(t){var e=Math.floor(t.x/this.cellSize);return Math.floor(t.y/this.cellSize)*this.columns+e},t.prototype.add=function(t,e,i){var a=new r(t,e),o=this.getIndex(i),n=this.cells[o];n||(n=[],this.cells[o]=n),n.push(a)},t.prototype.organize=function(){for(var t in this.cells)this.cells[t].sort(r.compare)},t.prototype.getLabelsToDisplay=function(t,e){var r=this.cellSize*this.cellSize,i=r/t/t*e/r,a=Math.ceil(i),o=[];for(var n in this.cells)for(var s=this.cells[n],u=0;u<Math.min(a,s.length);u++)o.push(s[u].key);return o},t}();e.LabelGrid=i,e.edgeLabelsToDisplayFromNodes=function(t){var e=t.graph,r=t.hoveredNode,i=t.highlightedNodes,a=t.displayedNodeLabels,o=[];return e.forEachEdge((function(t,e,n,s){(n===r||s===r||i.has(n)||i.has(s)||a.has(n)&&a.has(s))&&o.push(t)})),o}},461:function(t,e,r){"use strict";var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.rectangleCollidesWithQuad=e.squareCollidesWithQuad=e.getCircumscribedAlignedRectangle=e.isRectangleAligned=void 0;var a=i(r(796)),o=!1;function n(t){return t.x1===t.x2||t.y1===t.y2}function s(t){var e=Math.sqrt(Math.pow(t.x2-t.x1,2)+Math.pow(t.y2-t.y1,2)),r=(t.y1-t.y2)*t.height/e,i=(t.x2-t.x1)*t.height/e,a={x:t.x1,y:t.y1},o={x:t.x2,y:t.y2},n={x:t.x1+r,y:t.y1+i},s={x:t.x2+r,y:t.y2+i},u=Math.min(a.x,o.x,n.x,s.x),d=Math.max(a.x,o.x,n.x,s.x),c=Math.min(a.y,o.y,n.y,s.y);return{x1:u,y1:c,x2:d,y2:c,height:Math.max(a.y,o.y,n.y,s.y)-c}}function u(t,e,r,i,a,o,n){return t<i+o&&t+r>i&&e<a+n&&e+r>a}function d(t,e,r,i,a,o,n,s){return t<a+n&&t+r>a&&e<o+s&&e+i>o}function c(t,e,r,i,a,o){var n=t<r+a/2;return e<i+o/2?n?1:2:n?3:4}e.isRectangleAligned=n,e.getCircumscribedAlignedRectangle=s,e.squareCollidesWithQuad=u,e.rectangleCollidesWithQuad=d;var h=function(){function t(t){var e;void 0===t&&(t={}),this.containers=((e={})[5460]=[],e),this.cache=null,this.lastRectangle=null;var r=Math.pow(4,5);this.data=new Float32Array((4*r-1)/3*4),t.boundaries?this.resize(t.boundaries):this.resize({x:0,y:0,width:1,height:1})}return t.prototype.add=function(t,e,r,i){return function(t,e,r,i,a,n,s){for(var d=a-s,c=n-s,h=2*s,l=0,g=0;;){if(l>=5)return r[g]=r[g]||[],void r[g].push(i);var p=4*g+4,f=4*g+8,b=4*g+12,y=4*g+16,v=u(d,c,h,e[p+0],e[p+1],e[p+2],e[p+3]),_=u(d,c,h,e[f+0],e[f+1],e[f+2],e[f+3]),m=u(d,c,h,e[b+0],e[b+1],e[b+2],e[b+3]),w=u(d,c,h,e[y+0],e[y+1],e[y+2],e[y+3]),k=[v,_,m,w].reduce((function(t,e){return e?t+1:t}),0);if(0===k&&0===l)return r[5460].push(i),void(!o&&r[5460].length>=5&&(o=!0,console.warn("sigma/quadtree.insertNode: At least 5 nodes are outside the global quadtree zone. You might have a problem with the normalization function or the custom bounding box.")));if(0===k)throw new Error("sigma/quadtree.insertNode: no collision (level: ".concat(l,", key: ").concat(i,", x: ").concat(a,", y: ").concat(n,", size: ").concat(s,")."));if(3===k)throw new Error("sigma/quadtree.insertNode: 3 impossible collisions (level: ".concat(l,", key: ").concat(i,", x: ").concat(a,", y: ").concat(n,", size: ").concat(s,")."));if(k>1)return r[g]=r[g]||[],void r[g].push(i);l++,v&&(g=p),_&&(g=f),m&&(g=b),w&&(g=y)}}(0,this.data,this.containers,t,e,r,i),this},t.prototype.resize=function(t){this.clear(),this.data[0]=t.x,this.data[1]=t.y,this.data[2]=t.width,this.data[3]=t.height,function(t,e){for(var r=[0,0];r.length;){var i=r.pop(),a=r.pop(),o=4*a+4,n=4*a+8,s=4*a+12,u=4*a+16,d=e[a+0],c=e[a+1],h=e[a+2]/2,l=e[a+3]/2;e[o+0]=d,e[o+1]=c,e[o+2]=h,e[o+3]=l,e[n+0]=d+h,e[n+1]=c,e[n+2]=h,e[n+3]=l,e[s+0]=d,e[s+1]=c+l,e[s+2]=h,e[s+3]=l,e[u+0]=d+h,e[u+1]=c+l,e[u+2]=h,e[u+3]=l,i<4&&(r.push(u,i+1),r.push(s,i+1),r.push(n,i+1),r.push(o,i+1))}}(0,this.data)},t.prototype.clear=function(){var t;return this.containers=((t={})[5460]=[],t),this},t.prototype.point=function(t,e){var r=this.containers[5460].slice(),i=0,o=0;do{this.containers[i]&&(0,a.default)(r,this.containers[i]),i=4*i+4*c(t,e,this.data[i+0],this.data[i+1],this.data[i+2],this.data[i+3]),o++}while(o<=5);return r},t.prototype.rectangle=function(t,e,r,i,o){var u=this.lastRectangle;return u&&t===u.x1&&r===u.x2&&e===u.y1&&i===u.y2&&o===u.height||(this.lastRectangle={x1:t,y1:e,x2:r,y2:i,height:o},n(this.lastRectangle)||(this.lastRectangle=s(this.lastRectangle)),this.cache=function(t,e,r,i,o,n,s){for(var u,c=[0,0],h=[];c.length;){var l=c.pop(),g=c.pop();if((u=r[g])&&(0,a.default)(h,u),!(l>=5)){var p=4*g+4,f=4*g+8,b=4*g+12,y=4*g+16,v=d(i,o,n,s,e[p+0],e[p+1],e[p+2],e[p+3]),_=d(i,o,n,s,e[f+0],e[f+1],e[f+2],e[f+3]),m=d(i,o,n,s,e[b+0],e[b+1],e[b+2],e[b+3]),w=d(i,o,n,s,e[y+0],e[y+1],e[y+2],e[y+3]);v&&c.push(p,l+1),_&&c.push(f,l+1),m&&c.push(b,l+1),w&&c.push(y,l+1)}}return h}(0,this.data,this.containers,t,e,Math.abs(t-r)||Math.abs(e-i),o),(0,a.default)(this.cache,this.containers[5460])),this.cache},t}();e.default=h},26:function(t,e,r){"use strict";var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Sigma=e.MouseCaptor=e.QuadTree=e.Camera=void 0;var a=i(r(248));e.Sigma=a.default;var o=i(r(554));e.Camera=o.default;var n=i(r(461));e.QuadTree=n.default;var s=i(r(886));e.MouseCaptor=s.default,e.default=a.default},294:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,r,i,a){var o=a.edgeLabelSize,n=a.edgeLabelFont,s=a.edgeLabelWeight,u=a.edgeLabelColor.attribute?e[a.edgeLabelColor.attribute]||a.edgeLabelColor.color||"#000":a.edgeLabelColor.color,d=e.label;if(d){t.fillStyle=u,t.font="".concat(s," ").concat(o,"px ").concat(n);var c,h,l=r.size,g=i.size,p=r.x,f=r.y,b=i.x,y=i.y,v=b-p,_=y-f,m=Math.sqrt(v*v+_*_);if(!(m<l+g)){c=((p+=v*l/m)+(b-=v*g/m))/2,h=((f+=_*l/m)+(y-=_*g/m))/2,v=b-p,_=y-f,m=Math.sqrt(v*v+_*_);var w,k=t.measureText(d).width;if(k>m){for(d+="…",k=t.measureText(d).width;k>m&&d.length>1;)d=d.slice(0,-2)+"…",k=t.measureText(d).width;if(d.length<4)return}w=v>0?_>0?Math.acos(v/m):Math.asin(_/m):_>0?Math.acos(v/m)+Math.PI:Math.asin(v/m)+Math.PI/2,t.save(),t.translate(c,h),t.rotate(w),t.fillText(d,-k/2,e.size/2+o),t.restore()}}}},607:function(t,e,r){"use strict";var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=i(r(577));e.default=function(t,e,r){var i=r.labelSize,o=r.labelFont,n=r.labelWeight;if(t.font="".concat(n," ").concat(i,"px ").concat(o),t.fillStyle="#FFF",t.shadowOffsetX=0,t.shadowOffsetY=0,t.shadowBlur=8,t.shadowColor="#000","string"==typeof e.label){var s=t.measureText(e.label).width,u=Math.round(s+5),d=Math.round(i+4),c=Math.max(e.size,i/2)+2,h=Math.asin(d/2/c),l=Math.sqrt(Math.abs(Math.pow(c,2)-Math.pow(d/2,2)));t.beginPath(),t.moveTo(e.x+l,e.y+d/2),t.lineTo(e.x+c+u,e.y+d/2),t.lineTo(e.x+c+u,e.y-d/2),t.lineTo(e.x+l,e.y-d/2),t.arc(e.x,e.y,c,h,-h),t.closePath(),t.fill()}else t.beginPath(),t.arc(e.x,e.y,e.size+2,0,2*Math.PI),t.closePath(),t.fill();t.shadowOffsetX=0,t.shadowOffsetY=0,t.shadowBlur=0,(0,a.default)(t,e,r)}},577:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,r){if(e.label){var i=r.labelSize,a=r.labelFont,o=r.labelWeight,n=r.labelColor.attribute?e[r.labelColor.attribute]||r.labelColor.color||"#000":r.labelColor.color;t.fillStyle=n,t.font="".concat(o," ").concat(i,"px ").concat(a),t.fillText(e.label,e.x+e.size+3,e.y+i/3)}}},917:function(t,e,r){"use strict";var i,a=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0}),e.createEdgeCompoundProgram=e.AbstractEdgeProgram=void 0;var o=function(t){function e(e,r,i,a,o){return t.call(this,e,r,i,a,o)||this}return a(e,t),e}(r(973).AbstractProgram);e.AbstractEdgeProgram=o,e.createEdgeCompoundProgram=function(t){return function(){function e(e,r){this.programs=t.map((function(t){return new t(e,r)}))}return e.prototype.bufferData=function(){this.programs.forEach((function(t){return t.bufferData()}))},e.prototype.allocate=function(t){this.programs.forEach((function(e){return e.allocate(t)}))},e.prototype.bind=function(){},e.prototype.computeIndices=function(){this.programs.forEach((function(t){return t.computeIndices()}))},e.prototype.render=function(t){this.programs.forEach((function(e){e.bind(),e.bufferData(),e.render(t)}))},e.prototype.process=function(t,e,r,i,a){this.programs.forEach((function(o){return o.process(t,e,r,i,a)}))},e}()}},533:function(t,e,r){"use strict";var i,a=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0}),e.createNodeCompoundProgram=e.AbstractNodeProgram=void 0;var o=function(t){function e(e,r,i,a,o){var n=t.call(this,e,r,i,a,o)||this;n.positionLocation=e.getAttribLocation(n.program,"a_position"),n.sizeLocation=e.getAttribLocation(n.program,"a_size"),n.colorLocation=e.getAttribLocation(n.program,"a_color");var s=e.getUniformLocation(n.program,"u_matrix");if(null===s)throw new Error("AbstractNodeProgram: error while getting matrixLocation");n.matrixLocation=s;var u=e.getUniformLocation(n.program,"u_ratio");if(null===u)throw new Error("AbstractNodeProgram: error while getting ratioLocation");n.ratioLocation=u;var d=e.getUniformLocation(n.program,"u_scale");if(null===d)throw new Error("AbstractNodeProgram: error while getting scaleLocation");return n.scaleLocation=d,n}return a(e,t),e.prototype.bind=function(){var t=this.gl;t.enableVertexAttribArray(this.positionLocation),t.enableVertexAttribArray(this.sizeLocation),t.enableVertexAttribArray(this.colorLocation),t.vertexAttribPointer(this.positionLocation,2,t.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,0),t.vertexAttribPointer(this.sizeLocation,1,t.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,8),t.vertexAttribPointer(this.colorLocation,4,t.UNSIGNED_BYTE,!0,this.attributes*Float32Array.BYTES_PER_ELEMENT,12)},e}(r(973).AbstractProgram);e.AbstractNodeProgram=o,e.createNodeCompoundProgram=function(t){return function(){function e(e,r){this.programs=t.map((function(t){return new t(e,r)}))}return e.prototype.bufferData=function(){this.programs.forEach((function(t){return t.bufferData()}))},e.prototype.allocate=function(t){this.programs.forEach((function(e){return e.allocate(t)}))},e.prototype.bind=function(){},e.prototype.render=function(t){this.programs.forEach((function(e){e.bind(),e.bufferData(),e.render(t)}))},e.prototype.process=function(t,e,r){this.programs.forEach((function(i){return i.process(t,e,r)}))},e}()}},973:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AbstractProgram=void 0;var i=r(538),a=function(){function t(t,e,r,a,o){this.array=new Float32Array,this.points=a,this.attributes=o,this.gl=t,this.vertexShaderSource=e,this.fragmentShaderSource=r;var n=t.createBuffer();if(null===n)throw new Error("AbstractProgram: error while creating the buffer");this.buffer=n,t.bindBuffer(t.ARRAY_BUFFER,this.buffer),this.vertexShader=(0,i.loadVertexShader)(t,this.vertexShaderSource),this.fragmentShader=(0,i.loadFragmentShader)(t,this.fragmentShaderSource),this.program=(0,i.loadProgram)(t,[this.vertexShader,this.fragmentShader])}return t.prototype.bufferData=function(){var t=this.gl;t.bufferData(t.ARRAY_BUFFER,this.array,t.DYNAMIC_DRAW)},t.prototype.allocate=function(t){this.array=new Float32Array(this.points*this.attributes*t)},t.prototype.hasNothingToRender=function(){return 0===this.array.length},t}();e.AbstractProgram=a},638:function(t,e,r){"use strict";var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=r(917),o=i(r(747)),n=i(r(874)),s=(0,a.createEdgeCompoundProgram)([n.default,o.default]);e.default=s},747:function(t,e,r){"use strict";var i,a=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var n=r(524),s=o(r(191)),u=o(r(83)),d=function(t){function e(e){var r=t.call(this,e,s.default,u.default,3,9)||this;r.positionLocation=e.getAttribLocation(r.program,"a_position"),r.colorLocation=e.getAttribLocation(r.program,"a_color"),r.normalLocation=e.getAttribLocation(r.program,"a_normal"),r.radiusLocation=e.getAttribLocation(r.program,"a_radius"),r.barycentricLocation=e.getAttribLocation(r.program,"a_barycentric");var i=e.getUniformLocation(r.program,"u_matrix");if(null===i)throw new Error("EdgeArrowHeadProgram: error while getting matrixLocation");r.matrixLocation=i;var a=e.getUniformLocation(r.program,"u_sqrtZoomRatio");if(null===a)throw new Error("EdgeArrowHeadProgram: error while getting sqrtZoomRatioLocation");r.sqrtZoomRatioLocation=a;var o=e.getUniformLocation(r.program,"u_correctionRatio");if(null===o)throw new Error("EdgeArrowHeadProgram: error while getting correctionRatioLocation");return r.correctionRatioLocation=o,r.bind(),r}return a(e,t),e.prototype.bind=function(){var t=this.gl;t.enableVertexAttribArray(this.positionLocation),t.enableVertexAttribArray(this.normalLocation),t.enableVertexAttribArray(this.radiusLocation),t.enableVertexAttribArray(this.colorLocation),t.enableVertexAttribArray(this.barycentricLocation),t.vertexAttribPointer(this.positionLocation,2,t.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,0),t.vertexAttribPointer(this.normalLocation,2,t.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,8),t.vertexAttribPointer(this.radiusLocation,1,t.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,16),t.vertexAttribPointer(this.colorLocation,4,t.UNSIGNED_BYTE,!0,9*Float32Array.BYTES_PER_ELEMENT,20),t.vertexAttribPointer(this.barycentricLocation,3,t.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,24)},e.prototype.computeIndices=function(){},e.prototype.process=function(t,e,r,i,a){if(i)for(var o=27*a,s=o+27;o<s;o++)this.array[o]=0;else{var u=r.size||1,d=e.size||1,c=t.x,h=t.y,l=e.x,g=e.y,p=(0,n.floatColor)(r.color),f=l-c,b=g-h,y=f*f+b*b,v=0,_=0;y&&(v=-b*(y=1/Math.sqrt(y))*u,_=f*y*u);var m=27*a,w=this.array;w[m++]=l,w[m++]=g,w[m++]=-v,w[m++]=-_,w[m++]=d,w[m++]=p,w[m++]=1,w[m++]=0,w[m++]=0,w[m++]=l,w[m++]=g,w[m++]=-v,w[m++]=-_,w[m++]=d,w[m++]=p,w[m++]=0,w[m++]=1,w[m++]=0,w[m++]=l,w[m++]=g,w[m++]=-v,w[m++]=-_,w[m++]=d,w[m++]=p,w[m++]=0,w[m++]=0,w[m]=1}},e.prototype.render=function(t){if(!this.hasNothingToRender()){var e=this.gl,r=this.program;e.useProgram(r),e.uniformMatrix3fv(this.matrixLocation,!1,t.matrix),e.uniform1f(this.sqrtZoomRatioLocation,Math.sqrt(t.ratio)),e.uniform1f(this.correctionRatioLocation,t.correctionRatio),e.drawArrays(e.TRIANGLES,0,this.array.length/9)}},e}(r(917).AbstractEdgeProgram);e.default=d},874:function(t,e,r){"use strict";var i,a=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var n=r(917),s=r(524),u=o(r(73)),d=o(r(879)),c=function(t){function e(e){var r=t.call(this,e,u.default,d.default,4,6)||this,i=e.createBuffer();if(null===i)throw new Error("EdgeClampedProgram: error while getting resolutionLocation");r.indicesBuffer=i,r.positionLocation=e.getAttribLocation(r.program,"a_position"),r.colorLocation=e.getAttribLocation(r.program,"a_color"),r.normalLocation=e.getAttribLocation(r.program,"a_normal"),r.radiusLocation=e.getAttribLocation(r.program,"a_radius");var a=e.getUniformLocation(r.program,"u_matrix");if(null===a)throw new Error("EdgeClampedProgram: error while getting matrixLocation");r.matrixLocation=a;var o=e.getUniformLocation(r.program,"u_sqrtZoomRatio");if(null===o)throw new Error("EdgeClampedProgram: error while getting cameraRatioLocation");r.sqrtZoomRatioLocation=o;var n=e.getUniformLocation(r.program,"u_correctionRatio");if(null===n)throw new Error("EdgeClampedProgram: error while getting viewportRatioLocation");return r.correctionRatioLocation=n,r.canUse32BitsIndices=(0,s.canUse32BitsIndices)(e),r.IndicesArray=r.canUse32BitsIndices?Uint32Array:Uint16Array,r.indicesArray=new r.IndicesArray,r.indicesType=r.canUse32BitsIndices?e.UNSIGNED_INT:e.UNSIGNED_SHORT,r.bind(),r}return a(e,t),e.prototype.bind=function(){var t=this.gl;t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indicesBuffer),t.enableVertexAttribArray(this.positionLocation),t.enableVertexAttribArray(this.normalLocation),t.enableVertexAttribArray(this.colorLocation),t.enableVertexAttribArray(this.radiusLocation),t.vertexAttribPointer(this.positionLocation,2,t.FLOAT,!1,6*Float32Array.BYTES_PER_ELEMENT,0),t.vertexAttribPointer(this.normalLocation,2,t.FLOAT,!1,6*Float32Array.BYTES_PER_ELEMENT,8),t.vertexAttribPointer(this.colorLocation,4,t.UNSIGNED_BYTE,!0,6*Float32Array.BYTES_PER_ELEMENT,16),t.vertexAttribPointer(this.radiusLocation,1,t.FLOAT,!1,6*Float32Array.BYTES_PER_ELEMENT,20)},e.prototype.process=function(t,e,r,i,a){if(i)for(var o=24*a,n=o+24;o<n;o++)this.array[o]=0;else{var u=r.size||1,d=t.x,c=t.y,h=e.x,l=e.y,g=e.size||1,p=(0,s.floatColor)(r.color),f=h-d,b=l-c,y=f*f+b*b,v=0,_=0;y&&(v=-b*(y=1/Math.sqrt(y))*u,_=f*y*u);var m=24*a,w=this.array;w[m++]=d,w[m++]=c,w[m++]=v,w[m++]=_,w[m++]=p,w[m++]=0,w[m++]=d,w[m++]=c,w[m++]=-v,w[m++]=-_,w[m++]=p,w[m++]=0,w[m++]=h,w[m++]=l,w[m++]=v,w[m++]=_,w[m++]=p,w[m++]=g,w[m++]=h,w[m++]=l,w[m++]=-v,w[m++]=-_,w[m++]=p,w[m]=-g}},e.prototype.computeIndices=function(){for(var t=this.array.length/6,e=t+t/2,r=new this.IndicesArray(e),i=0,a=0;i<t;i+=4)r[a++]=i,r[a++]=i+1,r[a++]=i+2,r[a++]=i+2,r[a++]=i+1,r[a++]=i+3;this.indicesArray=r},e.prototype.bufferData=function(){t.prototype.bufferData.call(this);var e=this.gl;e.bufferData(e.ELEMENT_ARRAY_BUFFER,this.indicesArray,e.STATIC_DRAW)},e.prototype.render=function(t){if(!this.hasNothingToRender()){var e=this.gl,r=this.program;e.useProgram(r),e.uniformMatrix3fv(this.matrixLocation,!1,t.matrix),e.uniform1f(this.sqrtZoomRatioLocation,Math.sqrt(t.ratio)),e.uniform1f(this.correctionRatioLocation,t.correctionRatio),e.drawElements(e.TRIANGLES,this.indicesArray.length,this.indicesType,0)}},e}(n.AbstractEdgeProgram);e.default=c},857:function(t,e,r){"use strict";var i,a=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var n=r(524),s=o(r(372)),u=o(r(879)),d=function(t){function e(e){var r=t.call(this,e,s.default,u.default,4,5)||this,i=e.createBuffer();if(null===i)throw new Error("EdgeProgram: error while creating indicesBuffer");r.indicesBuffer=i,r.positionLocation=e.getAttribLocation(r.program,"a_position"),r.colorLocation=e.getAttribLocation(r.program,"a_color"),r.normalLocation=e.getAttribLocation(r.program,"a_normal");var a=e.getUniformLocation(r.program,"u_matrix");if(null===a)throw new Error("EdgeProgram: error while getting matrixLocation");r.matrixLocation=a;var o=e.getUniformLocation(r.program,"u_correctionRatio");if(null===o)throw new Error("EdgeProgram: error while getting correctionRatioLocation");r.correctionRatioLocation=o;var d=e.getUniformLocation(r.program,"u_sqrtZoomRatio");if(null===d)throw new Error("EdgeProgram: error while getting sqrtZoomRatioLocation");return r.sqrtZoomRatioLocation=d,r.canUse32BitsIndices=(0,n.canUse32BitsIndices)(e),r.IndicesArray=r.canUse32BitsIndices?Uint32Array:Uint16Array,r.indicesArray=new r.IndicesArray,r.indicesType=r.canUse32BitsIndices?e.UNSIGNED_INT:e.UNSIGNED_SHORT,r.bind(),r}return a(e,t),e.prototype.bind=function(){var t=this.gl;t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indicesBuffer),t.enableVertexAttribArray(this.positionLocation),t.enableVertexAttribArray(this.normalLocation),t.enableVertexAttribArray(this.colorLocation),t.vertexAttribPointer(this.positionLocation,2,t.FLOAT,!1,5*Float32Array.BYTES_PER_ELEMENT,0),t.vertexAttribPointer(this.normalLocation,2,t.FLOAT,!1,5*Float32Array.BYTES_PER_ELEMENT,8),t.vertexAttribPointer(this.colorLocation,4,t.UNSIGNED_BYTE,!0,5*Float32Array.BYTES_PER_ELEMENT,16)},e.prototype.computeIndices=function(){for(var t=this.array.length/5,e=t+t/2,r=new this.IndicesArray(e),i=0,a=0;i<t;i+=4)r[a++]=i,r[a++]=i+1,r[a++]=i+2,r[a++]=i+2,r[a++]=i+1,r[a++]=i+3;this.indicesArray=r},e.prototype.bufferData=function(){t.prototype.bufferData.call(this);var e=this.gl;e.bufferData(e.ELEMENT_ARRAY_BUFFER,this.indicesArray,e.STATIC_DRAW)},e.prototype.process=function(t,e,r,i,a){if(i)for(var o=20*a,s=o+20;o<s;o++)this.array[o]=0;else{var u=r.size||1,d=t.x,c=t.y,h=e.x,l=e.y,g=(0,n.floatColor)(r.color),p=h-d,f=l-c,b=p*p+f*f,y=0,v=0;b&&(y=-f*(b=1/Math.sqrt(b))*u,v=p*b*u);var _=20*a,m=this.array;m[_++]=d,m[_++]=c,m[_++]=y,m[_++]=v,m[_++]=g,m[_++]=d,m[_++]=c,m[_++]=-y,m[_++]=-v,m[_++]=g,m[_++]=h,m[_++]=l,m[_++]=y,m[_++]=v,m[_++]=g,m[_++]=h,m[_++]=l,m[_++]=-y,m[_++]=-v,m[_]=g}},e.prototype.render=function(t){if(!this.hasNothingToRender()){var e=this.gl,r=this.program;e.useProgram(r),e.uniformMatrix3fv(this.matrixLocation,!1,t.matrix),e.uniform1f(this.sqrtZoomRatioLocation,Math.sqrt(t.ratio)),e.uniform1f(this.correctionRatioLocation,t.correctionRatio),e.drawElements(e.TRIANGLES,this.indicesArray.length,this.indicesType,0)}},e}(r(917).AbstractEdgeProgram);e.default=d},37:function(t,e,r){"use strict";var i,a=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var n=r(524),s=o(r(146)),u=o(r(546)),d=function(t){function e(e){var r=t.call(this,e,s.default,u.default,1,4)||this;return r.bind(),r}return a(e,t),e.prototype.process=function(t,e,r){var i=this.array,a=1*r*4;if(e)return i[a++]=0,i[a++]=0,i[a++]=0,void(i[a++]=0);var o=(0,n.floatColor)(t.color);i[a++]=t.x,i[a++]=t.y,i[a++]=t.size,i[a]=o},e.prototype.render=function(t){if(!this.hasNothingToRender()){var e=this.gl,r=this.program;e.useProgram(r),e.uniform1f(this.ratioLocation,1/Math.sqrt(t.ratio)),e.uniform1f(this.scaleLocation,t.scalingRatio),e.uniformMatrix3fv(this.matrixLocation,!1,t.matrix),e.drawArrays(e.POINTS,0,this.array.length/4)}},e}(r(533).AbstractNodeProgram);e.default=d},83:t=>{(()=>{"use strict";var e={d:(t,r)=>{for(var i in r)e.o(r,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:r[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>i});const i="precision mediump float;\n\nvarying vec4 v_color;\n\nvoid main(void) {\n  gl_FragColor = v_color;\n}\n";t.exports=r})()},191:t=>{(()=>{"use strict";var e={d:(t,r)=>{for(var i in r)e.o(r,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:r[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>i});const i="attribute vec2 a_position;\nattribute vec2 a_normal;\nattribute float a_radius;\nattribute vec4 a_color;\nattribute vec3 a_barycentric;\n\nuniform mat3 u_matrix;\nuniform float u_sqrtZoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\n\nconst float minThickness = 1.7;\nconst float bias = 255.0 / 254.0;\nconst float arrowHeadWidthLengthRatio = 0.66;\nconst float arrowHeadLengthThicknessRatio = 2.5;\n\nvoid main() {\n  float normalLength = length(a_normal);\n  vec2 unitNormal = a_normal / normalLength;\n\n  // These first computations are taken from edge.vert.glsl and\n  // edge.clamped.vert.glsl. Please read it to get better comments on what's\n  // happening:\n  float pixelsThickness = max(normalLength, minThickness * u_sqrtZoomRatio);\n  float webGLThickness = pixelsThickness * u_correctionRatio;\n  float adaptedWebGLThickness = webGLThickness * u_sqrtZoomRatio;\n  float adaptedWebGLNodeRadius = a_radius * 2.0 * u_correctionRatio * u_sqrtZoomRatio;\n  float adaptedWebGLArrowHeadLength = adaptedWebGLThickness * 2.0 * arrowHeadLengthThicknessRatio;\n  float adaptedWebGLArrowHeadHalfWidth = adaptedWebGLArrowHeadLength * arrowHeadWidthLengthRatio / 2.0;\n\n  float da = a_barycentric.x;\n  float db = a_barycentric.y;\n  float dc = a_barycentric.z;\n\n  vec2 delta = vec2(\n      da * (adaptedWebGLNodeRadius * unitNormal.y)\n    + db * ((adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.y + adaptedWebGLArrowHeadHalfWidth * unitNormal.x)\n    + dc * ((adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.y - adaptedWebGLArrowHeadHalfWidth * unitNormal.x),\n\n      da * (-adaptedWebGLNodeRadius * unitNormal.x)\n    + db * (-(adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.x + adaptedWebGLArrowHeadHalfWidth * unitNormal.y)\n    + dc * (-(adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.x - adaptedWebGLArrowHeadHalfWidth * unitNormal.y)\n  );\n\n  vec2 position = (u_matrix * vec3(a_position + delta, 1)).xy;\n\n  gl_Position = vec4(position, 0, 1);\n\n  // Extract the color:\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";t.exports=r})()},73:t=>{(()=>{"use strict";var e={d:(t,r)=>{for(var i in r)e.o(r,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:r[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>i});const i="attribute vec4 a_color;\nattribute vec2 a_normal;\nattribute vec2 a_position;\nattribute float a_radius;\n\nuniform mat3 u_matrix;\nuniform float u_sqrtZoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\nvarying vec2 v_normal;\nvarying float v_thickness;\n\nconst float minThickness = 1.7;\nconst float bias = 255.0 / 254.0;\nconst float arrowHeadLengthThicknessRatio = 2.5;\n\nvoid main() {\n  float normalLength = length(a_normal);\n  vec2 unitNormal = a_normal / normalLength;\n\n  // These first computations are taken from edge.vert.glsl. Please read it to\n  // get better comments on what's happening:\n  float pixelsThickness = max(normalLength, minThickness * u_sqrtZoomRatio);\n  float webGLThickness = pixelsThickness * u_correctionRatio;\n  float adaptedWebGLThickness = webGLThickness * u_sqrtZoomRatio;\n\n  // Here, we move the point to leave space for the arrow head:\n  float direction = sign(a_radius);\n  float adaptedWebGLNodeRadius = direction * a_radius * 2.0 * u_correctionRatio * u_sqrtZoomRatio;\n  float adaptedWebGLArrowHeadLength = adaptedWebGLThickness * 2.0 * arrowHeadLengthThicknessRatio;\n\n  vec2 compensationVector = vec2(-direction * unitNormal.y, direction * unitNormal.x) * (adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength);\n\n  // Here is the proper position of the vertex\n  gl_Position = vec4((u_matrix * vec3(a_position + unitNormal * adaptedWebGLThickness + compensationVector, 1)).xy, 0, 1);\n\n  v_thickness = webGLThickness / u_sqrtZoomRatio;\n\n  v_normal = unitNormal;\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";t.exports=r})()},879:t=>{(()=>{"use strict";var e={d:(t,r)=>{for(var i in r)e.o(r,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:r[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>i});const i="precision mediump float;\n\nvarying vec4 v_color;\nvarying vec2 v_normal;\nvarying float v_thickness;\n\nconst float feather = 0.001;\nconst vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\n\nvoid main(void) {\n  float dist = length(v_normal) * v_thickness;\n\n  float t = smoothstep(\n    v_thickness - feather,\n    v_thickness,\n    dist\n  );\n\n  gl_FragColor = mix(v_color, transparent, t);\n}\n";t.exports=r})()},372:t=>{(()=>{"use strict";var e={d:(t,r)=>{for(var i in r)e.o(r,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:r[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>i});const i='attribute vec4 a_color;\nattribute vec2 a_normal;\nattribute vec2 a_position;\n\nuniform mat3 u_matrix;\nuniform float u_sqrtZoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\nvarying vec2 v_normal;\nvarying float v_thickness;\n\nconst float minThickness = 1.7;\nconst float bias = 255.0 / 254.0;\n\nvoid main() {\n  float normalLength = length(a_normal);\n  vec2 unitNormal = a_normal / normalLength;\n\n  // We require edges to be at least `minThickness` pixels thick *on screen*\n  // (so we need to compensate the SQRT zoom ratio):\n  float pixelsThickness = max(normalLength, minThickness * u_sqrtZoomRatio);\n\n  // Then, we need to retrieve the normalized thickness of the edge in the WebGL\n  // referential (in a ([0, 1], [0, 1]) space), using our "magic" correction\n  // ratio:\n  float webGLThickness = pixelsThickness * u_correctionRatio;\n\n  // Finally, we adapt the edge thickness to the "SQRT rule" in sigma (so that\n  // items are not too big when zoomed in, and not too small when zoomed out).\n  // The exact computation should be `adapted = value * zoom / sqrt(zoom)`, but\n  // it\'s simpler like this:\n  float adaptedWebGLThickness = webGLThickness * u_sqrtZoomRatio;\n\n  // Here is the proper position of the vertex\n  gl_Position = vec4((u_matrix * vec3(a_position + unitNormal * adaptedWebGLThickness, 1)).xy, 0, 1);\n\n  // For the fragment shader though, we need a thickness that takes the "magic"\n  // correction ratio into account (as in webGLThickness), but so that the\n  // antialiasing effect does not depend on the zoom level. So here\'s yet\n  // another thickness version:\n  v_thickness = webGLThickness / u_sqrtZoomRatio;\n\n  v_normal = unitNormal;\n  v_color = a_color;\n  v_color.a *= bias;\n}\n';t.exports=r})()},546:t=>{(()=>{"use strict";var e={d:(t,r)=>{for(var i in r)e.o(r,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:r[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>i});const i="precision mediump float;\n\nvarying vec4 v_color;\nvarying float v_border;\n\nconst float radius = 0.5;\nconst vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\n\nvoid main(void) {\n  vec2 m = gl_PointCoord - vec2(0.5, 0.5);\n  float dist = radius - length(m);\n\n  float t = 0.0;\n  if (dist > v_border)\n    t = 1.0;\n  else if (dist > 0.0)\n    t = dist / v_border;\n\n  gl_FragColor = mix(transparent, v_color, t);\n}\n";t.exports=r})()},146:t=>{(()=>{"use strict";var e={d:(t,r)=>{for(var i in r)e.o(r,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:r[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>i});const i="attribute vec2 a_position;\nattribute float a_size;\nattribute vec4 a_color;\n\nuniform float u_ratio;\nuniform float u_scale;\nuniform mat3 u_matrix;\n\nvarying vec4 v_color;\nvarying float v_border;\n\nconst float bias = 255.0 / 254.0;\n\nvoid main() {\n  gl_Position = vec4(\n    (u_matrix * vec3(a_position, 1)).xy,\n    0,\n    1\n  );\n\n  // Multiply the point size twice:\n  //  - x SCALING_RATIO to correct the canvas scaling\n  //  - x 2 to correct the formulae\n  gl_PointSize = a_size * u_ratio * u_scale * 2.0;\n\n  v_border = (1.0 / u_ratio) * (0.5 / a_size);\n\n  // Extract the color:\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";t.exports=r})()},538:(t,e)=>{"use strict";function r(t,e,r){var i="VERTEX"===t?e.VERTEX_SHADER:e.FRAGMENT_SHADER,a=e.createShader(i);if(null===a)throw new Error("loadShader: error while creating the shader");if(e.shaderSource(a,r),e.compileShader(a),!e.getShaderParameter(a,e.COMPILE_STATUS)){var o=e.getShaderInfoLog(a);throw e.deleteShader(a),new Error("loadShader: error while compiling the shader:\n".concat(o,"\n").concat(r))}return a}Object.defineProperty(e,"__esModule",{value:!0}),e.loadProgram=e.loadFragmentShader=e.loadVertexShader=void 0,e.loadVertexShader=function(t,e){return r("VERTEX",t,e)},e.loadFragmentShader=function(t,e){return r("FRAGMENT",t,e)},e.loadProgram=function(t,e){var r,i,a=t.createProgram();if(null===a)throw new Error("loadProgram: error while creating the program.");for(r=0,i=e.length;r<i;r++)t.attachShader(a,e[r]);if(t.linkProgram(a),!t.getProgramParameter(a,t.LINK_STATUS))throw t.deleteProgram(a),new Error("loadProgram: error while linking the program.");return a}},482:function(t,e,r){"use strict";var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.resolveSettings=e.validateSettings=e.DEFAULT_EDGE_PROGRAM_CLASSES=e.DEFAULT_NODE_PROGRAM_CLASSES=e.DEFAULT_SETTINGS=void 0;var a=r(524),o=i(r(577)),n=i(r(607)),s=i(r(294)),u=i(r(37)),d=i(r(857)),c=i(r(638));e.DEFAULT_SETTINGS={hideEdgesOnMove:!1,hideLabelsOnMove:!1,renderLabels:!0,renderEdgeLabels:!1,enableEdgeClickEvents:!1,enableEdgeWheelEvents:!1,enableEdgeHoverEvents:!1,defaultNodeColor:"#999",defaultNodeType:"circle",defaultEdgeColor:"#ccc",defaultEdgeType:"line",labelFont:"Arial",labelSize:14,labelWeight:"normal",labelColor:{color:"#000"},edgeLabelFont:"Arial",edgeLabelSize:14,edgeLabelWeight:"normal",edgeLabelColor:{attribute:"color"},stagePadding:30,labelDensity:1,labelGridCellSize:100,labelRenderedSizeThreshold:6,nodeReducer:null,edgeReducer:null,zIndex:!1,minCameraRatio:null,maxCameraRatio:null,labelRenderer:o.default,hoverRenderer:n.default,edgeLabelRenderer:s.default,allowInvalidContainer:!1,nodeProgramClasses:{},nodeHoverProgramClasses:{},edgeProgramClasses:{}},e.DEFAULT_NODE_PROGRAM_CLASSES={circle:u.default},e.DEFAULT_EDGE_PROGRAM_CLASSES={arrow:c.default,line:d.default},e.validateSettings=function(t){if("number"!=typeof t.labelDensity||t.labelDensity<0)throw new Error("Settings: invalid `labelDensity`. Expecting a positive number.");var e=t.minCameraRatio,r=t.maxCameraRatio;if("number"==typeof e&&"number"==typeof r&&r<e)throw new Error("Settings: invalid camera ratio boundaries. Expecting `maxCameraRatio` to be greater than `minCameraRatio`.")},e.resolveSettings=function(t){var r=(0,a.assign)({},e.DEFAULT_SETTINGS,t);return r.nodeProgramClasses=(0,a.assign)({},e.DEFAULT_NODE_PROGRAM_CLASSES,r.nodeProgramClasses),r.edgeProgramClasses=(0,a.assign)({},e.DEFAULT_EDGE_PROGRAM_CLASSES,r.edgeProgramClasses),r}},248:function(t,e,r){"use strict";var i,a=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__assign||function(){return o=Object.assign||function(t){for(var e,r=1,i=arguments.length;r<i;r++)for(var a in e=arguments[r])Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t},o.apply(this,arguments)},n=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],i=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&i>=t.length&&(t=void 0),{value:t&&t[i++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var u=s(r(796)),d=s(r(554)),c=s(r(886)),h=s(r(461)),l=r(291),g=r(524),p=r(98),f=r(482),b=s(r(311)),y=r(132),v=r(822);function _(t,e,r){if(!r.hasOwnProperty("x")||!r.hasOwnProperty("y"))throw new Error('Sigma: could not find a valid position (x, y) for node "'.concat(e,'". All your nodes must have a number "x" and "y". Maybe your forgot to apply a layout or your "nodeReducer" is not returning the correct data?'));return r.color||(r.color=t.defaultNodeColor),r.label||""===r.label||(r.label=null),void 0!==r.label&&null!==r.label?r.label=""+r.label:r.label=null,r.size||(r.size=2),r.hasOwnProperty("hidden")||(r.hidden=!1),r.hasOwnProperty("highlighted")||(r.highlighted=!1),r.hasOwnProperty("forceLabel")||(r.forceLabel=!1),r.type&&""!==r.type||(r.type=t.defaultNodeType),r.zIndex||(r.zIndex=0),r}function m(t,e,r){return r.color||(r.color=t.defaultEdgeColor),r.label||(r.label=""),r.size||(r.size=.5),r.hasOwnProperty("hidden")||(r.hidden=!1),r.hasOwnProperty("forceLabel")||(r.forceLabel=!1),r.type&&""!==r.type||(r.type=t.defaultEdgeType),r.zIndex||(r.zIndex=0),r}var w=function(t){function e(e,r,i){void 0===i&&(i={});var a=t.call(this)||this;if(a.elements={},a.canvasContexts={},a.webGLContexts={},a.activeListeners={},a.quadtree=new h.default,a.labelGrid=new p.LabelGrid,a.nodeDataCache={},a.edgeDataCache={},a.nodesWithForcedLabels=[],a.edgesWithForcedLabels=[],a.nodeExtent={x:[0,1],y:[0,1]},a.matrix=(0,y.identity)(),a.invMatrix=(0,y.identity)(),a.correctionRatio=1,a.customBBox=null,a.normalizationFunction=(0,g.createNormalizationFunction)({x:[0,1],y:[0,1]}),a.cameraSizeRatio=1,a.width=0,a.height=0,a.pixelRatio=(0,g.getPixelRatio)(),a.displayedLabels=new Set,a.highlightedNodes=new Set,a.hoveredNode=null,a.hoveredEdge=null,a.renderFrame=null,a.renderHighlightedNodesFrame=null,a.needToProcess=!1,a.needToSoftProcess=!1,a.checkEdgesEventsFrame=null,a.nodePrograms={},a.nodeHoverPrograms={},a.edgePrograms={},a.settings=(0,f.resolveSettings)(i),(0,f.validateSettings)(a.settings),(0,g.validateGraph)(e),!(r instanceof HTMLElement))throw new Error("Sigma: container should be an html element.");for(var o in a.graph=e,a.container=r,a.createWebGLContext("edges",{preserveDrawingBuffer:!0}),a.createCanvasContext("edgeLabels"),a.createWebGLContext("nodes"),a.createCanvasContext("labels"),a.createCanvasContext("hovers"),a.createWebGLContext("hoverNodes"),a.createCanvasContext("mouse"),a.webGLContexts){var n=a.webGLContexts[o];n.blendFunc(n.ONE,n.ONE_MINUS_SRC_ALPHA),n.enable(n.BLEND)}for(var s in a.settings.nodeProgramClasses){var u=a.settings.nodeProgramClasses[s];a.nodePrograms[s]=new u(a.webGLContexts.nodes,a);var l=u;s in a.settings.nodeHoverProgramClasses&&(l=a.settings.nodeHoverProgramClasses[s]),a.nodeHoverPrograms[s]=new l(a.webGLContexts.hoverNodes,a)}for(var s in a.settings.edgeProgramClasses){var v=a.settings.edgeProgramClasses[s];a.edgePrograms[s]=new v(a.webGLContexts.edges,a)}return a.resize(),a.camera=new d.default,a.bindCameraHandlers(),a.mouseCaptor=new c.default(a.elements.mouse,a),a.touchCaptor=new b.default(a.elements.mouse,a),a.bindEventHandlers(),a.bindGraphHandlers(),a.handleSettingsUpdate(),a.process(),a.render(),a}return a(e,t),e.prototype.createCanvas=function(t){var e=(0,g.createElement)("canvas",{position:"absolute"},{class:"sigma-".concat(t)});return this.elements[t]=e,this.container.appendChild(e),e},e.prototype.createCanvasContext=function(t){var e=this.createCanvas(t);return this.canvasContexts[t]=e.getContext("2d",{preserveDrawingBuffer:!1,antialias:!1}),this},e.prototype.createWebGLContext=function(t,e){var r,i=this.createCanvas(t),a=o({preserveDrawingBuffer:!1,antialias:!1},e||{});return(r=i.getContext("webgl2",a))||(r=i.getContext("webgl",a)),r||(r=i.getContext("experimental-webgl",a)),this.webGLContexts[t]=r,this},e.prototype.bindCameraHandlers=function(){var t=this;return this.activeListeners.camera=function(){t._scheduleRefresh()},this.camera.on("updated",this.activeListeners.camera),this},e.prototype.mouseIsOnNode=function(t,e,r){var i=t.x,a=t.y,o=e.x,n=e.y;return i>o-r&&i<o+r&&a>n-r&&a<n+r&&Math.sqrt(Math.pow(i-o,2)+Math.pow(a-n,2))<r},e.prototype.getQuadNodes=function(t){var e=this.viewportToFramedGraph(t);return this.quadtree.point(e.x,1-e.y)},e.prototype.getNodeAtPosition=function(t){for(var e=t.x,r=t.y,i=this.getQuadNodes(t),a=1/0,o=null,n=0,s=i.length;n<s;n++){var u=i[n],d=this.nodeDataCache[u],c=this.framedGraphToViewport(d),h=this.scaleSize(d.size);if(!d.hidden&&this.mouseIsOnNode(t,c,h)){var l=Math.sqrt(Math.pow(e-c.x,2)+Math.pow(r-c.y,2));l<a&&(a=l,o=u)}}return o},e.prototype.bindEventHandlers=function(){var t=this;this.activeListeners.handleResize=function(){t.needToSoftProcess=!0,t._scheduleRefresh()},window.addEventListener("resize",this.activeListeners.handleResize),this.activeListeners.handleMove=function(e){var r={event:e,preventSigmaDefault:function(){e.preventSigmaDefault()}},i=t.getNodeAtPosition(e);if(i&&t.hoveredNode!==i&&!t.nodeDataCache[i].hidden)return t.hoveredNode&&t.emit("leaveNode",o(o({},r),{node:t.hoveredNode})),t.hoveredNode=i,t.emit("enterNode",o(o({},r),{node:i})),void t.scheduleHighlightedNodesRender();if(t.hoveredNode){var a=t.nodeDataCache[t.hoveredNode],n=t.framedGraphToViewport(a),s=t.scaleSize(a.size);if(!t.mouseIsOnNode(e,n,s)){var u=t.hoveredNode;return t.hoveredNode=null,t.emit("leaveNode",o(o({},r),{node:u})),void t.scheduleHighlightedNodesRender()}}!0===t.settings.enableEdgeHoverEvents?t.checkEdgeHoverEvents(r):"debounce"===t.settings.enableEdgeHoverEvents&&(t.checkEdgesEventsFrame||(t.checkEdgesEventsFrame=(0,g.requestFrame)((function(){t.checkEdgeHoverEvents(r),t.checkEdgesEventsFrame=null}))))};var e=function(e){return function(r){var i={event:r,preventSigmaDefault:function(){r.preventSigmaDefault()}},a=r.original.isFakeSigmaMouseEvent?t.getNodeAtPosition(r):t.hoveredNode;if(a)return t.emit("".concat(e,"Node"),o(o({},i),{node:a}));if("wheel"===e?t.settings.enableEdgeWheelEvents:t.settings.enableEdgeClickEvents){var n=t.getEdgeAtPoint(r.x,r.y);if(n)return t.emit("".concat(e,"Edge"),o(o({},i),{edge:n}))}return t.emit("".concat(e,"Stage"),i)}};return this.activeListeners.handleClick=e("click"),this.activeListeners.handleRightClick=e("rightClick"),this.activeListeners.handleDoubleClick=e("doubleClick"),this.activeListeners.handleWheel=e("wheel"),this.activeListeners.handleDown=e("down"),this.mouseCaptor.on("mousemove",this.activeListeners.handleMove),this.mouseCaptor.on("click",this.activeListeners.handleClick),this.mouseCaptor.on("rightClick",this.activeListeners.handleRightClick),this.mouseCaptor.on("doubleClick",this.activeListeners.handleDoubleClick),this.mouseCaptor.on("wheel",this.activeListeners.handleWheel),this.mouseCaptor.on("mousedown",this.activeListeners.handleDown),this},e.prototype.bindGraphHandlers=function(){var t=this,e=this.graph;return this.activeListeners.graphUpdate=function(){t.needToProcess=!0,t._scheduleRefresh()},this.activeListeners.softGraphUpdate=function(){t.needToSoftProcess=!0,t._scheduleRefresh()},this.activeListeners.dropNodeGraphUpdate=function(e){delete t.nodeDataCache[e.key],t.hoveredNode===e.key&&(t.hoveredNode=null),t.activeListeners.graphUpdate()},this.activeListeners.dropEdgeGraphUpdate=function(e){delete t.edgeDataCache[e.key],t.hoveredEdge===e.key&&(t.hoveredEdge=null),t.activeListeners.graphUpdate()},this.activeListeners.clearEdgesGraphUpdate=function(){t.edgeDataCache={},t.hoveredEdge=null,t.activeListeners.graphUpdate()},this.activeListeners.clearGraphUpdate=function(){t.nodeDataCache={},t.hoveredNode=null,t.activeListeners.clearEdgesGraphUpdate()},e.on("nodeAdded",this.activeListeners.graphUpdate),e.on("nodeDropped",this.activeListeners.dropNodeGraphUpdate),e.on("nodeAttributesUpdated",this.activeListeners.softGraphUpdate),e.on("eachNodeAttributesUpdated",this.activeListeners.graphUpdate),e.on("edgeAdded",this.activeListeners.graphUpdate),e.on("edgeDropped",this.activeListeners.dropEdgeGraphUpdate),e.on("edgeAttributesUpdated",this.activeListeners.softGraphUpdate),e.on("eachEdgeAttributesUpdated",this.activeListeners.graphUpdate),e.on("edgesCleared",this.activeListeners.clearEdgesGraphUpdate),e.on("cleared",this.activeListeners.clearGraphUpdate),this},e.prototype.unbindGraphHandlers=function(){var t=this.graph;t.removeListener("nodeAdded",this.activeListeners.graphUpdate),t.removeListener("nodeDropped",this.activeListeners.dropNodeGraphUpdate),t.removeListener("nodeAttributesUpdated",this.activeListeners.softGraphUpdate),t.removeListener("eachNodeAttributesUpdated",this.activeListeners.graphUpdate),t.removeListener("edgeAdded",this.activeListeners.graphUpdate),t.removeListener("edgeDropped",this.activeListeners.dropEdgeGraphUpdate),t.removeListener("edgeAttributesUpdated",this.activeListeners.softGraphUpdate),t.removeListener("eachEdgeAttributesUpdated",this.activeListeners.graphUpdate),t.removeListener("edgesCleared",this.activeListeners.clearEdgesGraphUpdate),t.removeListener("cleared",this.activeListeners.clearGraphUpdate)},e.prototype.checkEdgeHoverEvents=function(t){var e=this.hoveredNode?null:this.getEdgeAtPoint(t.event.x,t.event.y);return e!==this.hoveredEdge&&(this.hoveredEdge&&this.emit("leaveEdge",o(o({},t),{edge:this.hoveredEdge})),e&&this.emit("enterEdge",o(o({},t),{edge:e})),this.hoveredEdge=e),this},e.prototype.getEdgeAtPoint=function(t,e){var r,i,a=this,o=this.edgeDataCache,s=this.nodeDataCache;if(!(0,v.isPixelColored)(this.webGLContexts.edges,t*this.pixelRatio,e*this.pixelRatio))return null;var u=this.viewportToGraph({x:t,y:e}),d=u.x,c=u.y,h=0;if(this.graph.someEdge((function(t,e,r,i,n,u){var d=n.x,c=n.y,l=u.x,g=u.y;if(o[t].hidden||s[r].hidden||s[i].hidden)return!1;if(d!==l||c!==g){var p=Math.sqrt(Math.pow(l-d,2)+Math.pow(g-c,2)),f=a.graphToViewport({x:d,y:c}),b=f.x,y=f.y,v=a.graphToViewport({x:l,y:g}),_=v.x,m=v.y,w=Math.sqrt(Math.pow(_-b,2)+Math.pow(m-y,2));return h=p/w,!0}})),!h)return null;var l=this.graph.filterEdges((function(t,e,r,i,n,u){return!(o[t].hidden||s[r].hidden||s[i].hidden)&&(!!(0,v.doEdgeCollideWithPoint)(d,c,n.x,n.y,u.x,u.y,o[t].size*h/a.cameraSizeRatio)||void 0)}));if(0===l.length)return null;var g=l[l.length-1],p=-1/0;try{for(var f=n(l),b=f.next();!b.done;b=f.next()){var y=b.value,_=this.graph.getEdgeAttribute(y,"zIndex");_>=p&&(g=y,p=_)}}catch(t){r={error:t}}finally{try{b&&!b.done&&(i=f.return)&&i.call(f)}finally{if(r)throw r.error}}return g},e.prototype.process=function(t){var e=this;void 0===t&&(t=!1);var r=this.graph,i=this.settings,a=this.getDimensions(),o=[1/0,-1/0],n=[1/0,-1/0];this.quadtree.clear(),this.labelGrid.resizeAndClear(a,i.labelGridCellSize),this.highlightedNodes=new Set,this.nodeExtent=(0,g.graphExtent)(r),this.nodesWithForcedLabels=[],this.edgesWithForcedLabels=[];var s=new d.default,u=(0,g.matrixFromCamera)(s.getState(),this.getDimensions(),this.getGraphDimensions(),this.getSetting("stagePadding")||0);this.normalizationFunction=(0,g.createNormalizationFunction)(this.customBBox||this.nodeExtent);for(var c={},h=r.nodes(),l=0,p=h.length;l<p;l++){var f=h[l],b=Object.assign({},r.getNodeAttributes(f));i.nodeReducer&&(b=i.nodeReducer(f,b)),c[(v=_(this.settings,f,b)).type]=(c[v.type]||0)+1,this.nodeDataCache[f]=v,this.normalizationFunction.applyTo(v),v.forceLabel&&this.nodesWithForcedLabels.push(f),this.settings.zIndex&&(v.zIndex<o[0]&&(o[0]=v.zIndex),v.zIndex>o[1]&&(o[1]=v.zIndex))}for(var y in this.nodePrograms){if(!this.nodePrograms.hasOwnProperty(y))throw new Error('Sigma: could not find a suitable program for node type "'.concat(y,'"!'));t||this.nodePrograms[y].allocate(c[y]||0),c[y]=0}for(this.settings.zIndex&&o[0]!==o[1]&&(h=(0,g.zIndexOrdering)(o,(function(t){return e.nodeDataCache[t].zIndex}),h)),l=0,p=h.length;l<p;l++){f=h[l];var v=this.nodeDataCache[f];this.quadtree.add(f,v.x,1-v.y,v.size/this.width),"string"!=typeof v.label||v.hidden||this.labelGrid.add(f,v.size,this.framedGraphToViewport(v,{matrix:u}));var w=this.nodePrograms[v.type];if(!w)throw new Error('Sigma: could not find a suitable program for node type "'.concat(v.type,'"!'));w.process(v,v.hidden,c[v.type]++),v.highlighted&&!v.hidden&&this.highlightedNodes.add(f)}this.labelGrid.organize();var k={},x=r.edges();for(l=0,p=x.length;l<p;l++){var E=x[l];b=Object.assign({},r.getEdgeAttributes(E)),i.edgeReducer&&(b=i.edgeReducer(E,b)),k[(v=m(this.settings,0,b)).type]=(k[v.type]||0)+1,this.edgeDataCache[E]=v,v.forceLabel&&!v.hidden&&this.edgesWithForcedLabels.push(E),this.settings.zIndex&&(v.zIndex<n[0]&&(n[0]=v.zIndex),v.zIndex>n[1]&&(n[1]=v.zIndex))}for(var y in this.edgePrograms){if(!this.edgePrograms.hasOwnProperty(y))throw new Error('Sigma: could not find a suitable program for edge type "'.concat(y,'"!'));t||this.edgePrograms[y].allocate(k[y]||0),k[y]=0}for(this.settings.zIndex&&n[0]!==n[1]&&(x=(0,g.zIndexOrdering)(n,(function(t){return e.edgeDataCache[t].zIndex}),x)),l=0,p=x.length;l<p;l++){E=x[l],v=this.edgeDataCache[E];var L=r.extremities(E),A=this.nodeDataCache[L[0]],S=this.nodeDataCache[L[1]],C=v.hidden||A.hidden||S.hidden;this.edgePrograms[v.type].process(A,S,v,C,k[v.type]++)}for(var y in this.edgePrograms){var G=this.edgePrograms[y];t||"function"!=typeof G.computeIndices||G.computeIndices()}return this},e.prototype.handleSettingsUpdate=function(){return this.camera.minRatio=this.settings.minCameraRatio,this.camera.maxRatio=this.settings.maxCameraRatio,this.camera.setState(this.camera.validateState(this.camera.getState())),this},e.prototype._refresh=function(){return this.needToProcess?this.process():this.needToSoftProcess&&this.process(!0),this.needToProcess=!1,this.needToSoftProcess=!1,this.render(),this},e.prototype._scheduleRefresh=function(){var t=this;return this.renderFrame||(this.renderFrame=(0,g.requestFrame)((function(){t._refresh(),t.renderFrame=null}))),this},e.prototype.renderLabels=function(){if(!this.settings.renderLabels)return this;var t=this.camera.getState(),e=this.labelGrid.getLabelsToDisplay(t.ratio,this.settings.labelDensity);(0,u.default)(e,this.nodesWithForcedLabels),this.displayedLabels=new Set;for(var r=this.canvasContexts.labels,i=0,a=e.length;i<a;i++){var n=e[i],s=this.nodeDataCache[n];if(!this.displayedLabels.has(n)&&!s.hidden){var d=this.framedGraphToViewport(s),c=d.x,h=d.y,l=this.scaleSize(s.size);!s.forceLabel&&l<this.settings.labelRenderedSizeThreshold||c<-150||c>this.width+150||h<-50||h>this.height+50||(this.displayedLabels.add(n),this.settings.labelRenderer(r,o(o({key:n},s),{size:l,x:c,y:h}),this.settings))}}return this},e.prototype.renderEdgeLabels=function(){if(!this.settings.renderEdgeLabels)return this;var t=this.canvasContexts.edgeLabels;t.clearRect(0,0,this.width,this.height);for(var e=(0,p.edgeLabelsToDisplayFromNodes)({graph:this.graph,hoveredNode:this.hoveredNode,displayedNodeLabels:this.displayedLabels,highlightedNodes:this.highlightedNodes}).concat(this.edgesWithForcedLabels),r=new Set,i=0,a=e.length;i<a;i++){var n=e[i],s=this.graph.extremities(n),u=this.nodeDataCache[s[0]],d=this.nodeDataCache[s[1]],c=this.edgeDataCache[n];r.has(n)||c.hidden||u.hidden||d.hidden||(this.settings.edgeLabelRenderer(t,o(o({key:n},c),{size:this.scaleSize(c.size)}),o(o(o({key:s[0]},u),this.framedGraphToViewport(u)),{size:this.scaleSize(u.size)}),o(o(o({key:s[1]},d),this.framedGraphToViewport(d)),{size:this.scaleSize(d.size)}),this.settings),r.add(n))}return this},e.prototype.renderHighlightedNodes=function(){var t=this,e=this.canvasContexts.hovers;e.clearRect(0,0,this.width,this.height);var r=[];this.hoveredNode&&!this.nodeDataCache[this.hoveredNode].hidden&&r.push(this.hoveredNode),this.highlightedNodes.forEach((function(e){e!==t.hoveredNode&&r.push(e)})),r.forEach((function(r){return function(r){var i=t.nodeDataCache[r],a=t.framedGraphToViewport(i),n=a.x,s=a.y,u=t.scaleSize(i.size);t.settings.hoverRenderer(e,o(o({key:r},i),{size:u,x:n,y:s}),t.settings)}(r)}));var i={};for(var a in r.forEach((function(e){var r=t.nodeDataCache[e].type;i[r]=(i[r]||0)+1})),this.nodeHoverPrograms)this.nodeHoverPrograms[a].allocate(i[a]||0),i[a]=0;for(var a in r.forEach((function(e){var r=t.nodeDataCache[e];t.nodeHoverPrograms[r.type].process(r,r.hidden,i[r.type]++)})),this.webGLContexts.hoverNodes.clear(this.webGLContexts.hoverNodes.COLOR_BUFFER_BIT),this.nodeHoverPrograms){var n=this.nodeHoverPrograms[a];n.bind(),n.bufferData(),n.render({matrix:this.matrix,width:this.width,height:this.height,ratio:this.camera.ratio,correctionRatio:this.correctionRatio/this.camera.ratio,scalingRatio:this.pixelRatio})}},e.prototype.scheduleHighlightedNodesRender=function(){var t=this;this.renderHighlightedNodesFrame||this.renderFrame||(this.renderHighlightedNodesFrame=(0,g.requestFrame)((function(){t.renderHighlightedNodesFrame=null,t.renderHighlightedNodes(),t.renderEdgeLabels()})))},e.prototype.render=function(){var t=this;this.emit("beforeRender");var e=function(){return t.emit("afterRender"),t};if(this.renderFrame&&((0,g.cancelFrame)(this.renderFrame),this.renderFrame=null,this.needToProcess=!1,this.needToSoftProcess=!1),this.resize(),this.clear(),this.updateCachedValues(),!this.graph.order)return e();var r=this.mouseCaptor,i=this.camera.isAnimated()||r.isMoving||r.draggedEvents||r.currentWheelDirection,a=this.camera.getState(),o=this.getDimensions(),n=this.getGraphDimensions(),s=this.getSetting("stagePadding")||0;for(var u in this.matrix=(0,g.matrixFromCamera)(a,o,n,s),this.invMatrix=(0,g.matrixFromCamera)(a,o,n,s,!0),this.correctionRatio=(0,g.getMatrixImpact)(this.matrix,a,o),this.nodePrograms)(d=this.nodePrograms[u]).bind(),d.bufferData(),d.render({matrix:this.matrix,width:this.width,height:this.height,ratio:a.ratio,correctionRatio:this.correctionRatio/a.ratio,scalingRatio:this.pixelRatio});if(!this.settings.hideEdgesOnMove||!i)for(var u in this.edgePrograms){var d;(d=this.edgePrograms[u]).bind(),d.bufferData(),d.render({matrix:this.matrix,width:this.width,height:this.height,ratio:a.ratio,correctionRatio:this.correctionRatio/a.ratio,scalingRatio:this.pixelRatio})}return this.settings.hideLabelsOnMove&&i||(this.renderLabels(),this.renderEdgeLabels(),this.renderHighlightedNodes()),e()},e.prototype.updateCachedValues=function(){var t=this.camera.getState().ratio;this.cameraSizeRatio=Math.sqrt(t)},e.prototype.getCamera=function(){return this.camera},e.prototype.getContainer=function(){return this.container},e.prototype.getGraph=function(){return this.graph},e.prototype.setGraph=function(t){t!==this.graph&&(this.unbindGraphHandlers(),this.nodeDataCache={},this.edgeDataCache={},this.displayedLabels.clear(),this.highlightedNodes.clear(),this.hoveredNode=null,this.hoveredEdge=null,this.nodesWithForcedLabels.length=0,this.edgesWithForcedLabels.length=0,null!==this.checkEdgesEventsFrame&&((0,g.cancelFrame)(this.checkEdgesEventsFrame),this.checkEdgesEventsFrame=null),this.graph=t,this.bindGraphHandlers(),this.process(),this.render())},e.prototype.getMouseCaptor=function(){return this.mouseCaptor},e.prototype.getTouchCaptor=function(){return this.touchCaptor},e.prototype.getDimensions=function(){return{width:this.width,height:this.height}},e.prototype.getGraphDimensions=function(){var t=this.customBBox||this.nodeExtent;return{width:t.x[1]-t.x[0]||1,height:t.y[1]-t.y[0]||1}},e.prototype.getNodeDisplayData=function(t){var e=this.nodeDataCache[t];return e?Object.assign({},e):void 0},e.prototype.getEdgeDisplayData=function(t){var e=this.edgeDataCache[t];return e?Object.assign({},e):void 0},e.prototype.getSettings=function(){return o({},this.settings)},e.prototype.getSetting=function(t){return this.settings[t]},e.prototype.setSetting=function(t,e){return this.settings[t]=e,(0,f.validateSettings)(this.settings),this.handleSettingsUpdate(),this.needToProcess=!0,this._scheduleRefresh(),this},e.prototype.updateSetting=function(t,e){return this.settings[t]=e(this.settings[t]),(0,f.validateSettings)(this.settings),this.handleSettingsUpdate(),this.needToProcess=!0,this._scheduleRefresh(),this},e.prototype.resize=function(){var t=this.width,e=this.height;if(this.width=this.container.offsetWidth,this.height=this.container.offsetHeight,this.pixelRatio=(0,g.getPixelRatio)(),0===this.width){if(!this.settings.allowInvalidContainer)throw new Error("Sigma: Container has no width. You can set the allowInvalidContainer setting to true to stop seeing this error.");this.width=1}if(0===this.height){if(!this.settings.allowInvalidContainer)throw new Error("Sigma: Container has no height. You can set the allowInvalidContainer setting to true to stop seeing this error.");this.height=1}if(t===this.width&&e===this.height)return this;for(var r in this.emit("resize"),this.elements){var i=this.elements[r];i.style.width=this.width+"px",i.style.height=this.height+"px"}for(var r in this.canvasContexts)this.elements[r].setAttribute("width",this.width*this.pixelRatio+"px"),this.elements[r].setAttribute("height",this.height*this.pixelRatio+"px"),1!==this.pixelRatio&&this.canvasContexts[r].scale(this.pixelRatio,this.pixelRatio);for(var r in this.webGLContexts)this.elements[r].setAttribute("width",this.width*this.pixelRatio+"px"),this.elements[r].setAttribute("height",this.height*this.pixelRatio+"px"),this.webGLContexts[r].viewport(0,0,this.width*this.pixelRatio,this.height*this.pixelRatio);return this},e.prototype.clear=function(){return this.webGLContexts.nodes.clear(this.webGLContexts.nodes.COLOR_BUFFER_BIT),this.webGLContexts.edges.clear(this.webGLContexts.edges.COLOR_BUFFER_BIT),this.webGLContexts.hoverNodes.clear(this.webGLContexts.hoverNodes.COLOR_BUFFER_BIT),this.canvasContexts.labels.clearRect(0,0,this.width,this.height),this.canvasContexts.hovers.clearRect(0,0,this.width,this.height),this.canvasContexts.edgeLabels.clearRect(0,0,this.width,this.height),this},e.prototype.refresh=function(){return this.needToProcess=!0,this._refresh(),this},e.prototype.scheduleRefresh=function(){return this.needToProcess=!0,this._scheduleRefresh(),this},e.prototype.getViewportZoomedState=function(t,e){var r=this.camera.getState(),i=r.ratio,a=r.angle,o=r.x,n=r.y,s=e/i,u={x:this.width/2,y:this.height/2},d=this.viewportToFramedGraph(t),c=this.viewportToFramedGraph(u);return{angle:a,x:(d.x-c.x)*(1-s)+o,y:(d.y-c.y)*(1-s)+n,ratio:e}},e.prototype.viewRectangle=function(){var t=0*this.width/8,e=0*this.height/8,r=this.viewportToFramedGraph({x:0-t,y:0-e}),i=this.viewportToFramedGraph({x:this.width+t,y:0-e}),a=this.viewportToFramedGraph({x:0,y:this.height+e});return{x1:r.x,y1:r.y,x2:i.x,y2:i.y,height:i.y-a.y}},e.prototype.framedGraphToViewport=function(t,e){void 0===e&&(e={});var r=!!e.cameraState||!!e.viewportDimensions||!!e.graphDimensions,i=e.matrix?e.matrix:r?(0,g.matrixFromCamera)(e.cameraState||this.camera.getState(),e.viewportDimensions||this.getDimensions(),e.graphDimensions||this.getGraphDimensions(),e.padding||this.getSetting("stagePadding")||0):this.matrix,a=(0,y.multiplyVec2)(i,t);return{x:(1+a.x)*this.width/2,y:(1-a.y)*this.height/2}},e.prototype.viewportToFramedGraph=function(t,e){void 0===e&&(e={});var r=!!e.cameraState||!!e.viewportDimensions||!e.graphDimensions,i=e.matrix?e.matrix:r?(0,g.matrixFromCamera)(e.cameraState||this.camera.getState(),e.viewportDimensions||this.getDimensions(),e.graphDimensions||this.getGraphDimensions(),e.padding||this.getSetting("stagePadding")||0,!0):this.invMatrix,a=(0,y.multiplyVec2)(i,{x:t.x/this.width*2-1,y:1-t.y/this.height*2});return isNaN(a.x)&&(a.x=0),isNaN(a.y)&&(a.y=0),a},e.prototype.viewportToGraph=function(t,e){return void 0===e&&(e={}),this.normalizationFunction.inverse(this.viewportToFramedGraph(t,e))},e.prototype.graphToViewport=function(t,e){return void 0===e&&(e={}),this.framedGraphToViewport(this.normalizationFunction(t),e)},e.prototype.getBBox=function(){return(0,g.graphExtent)(this.graph)},e.prototype.getCustomBBox=function(){return this.customBBox},e.prototype.setCustomBBox=function(t){return this.customBBox=t,this._scheduleRefresh(),this},e.prototype.kill=function(){this.emit("kill"),this.removeAllListeners(),this.camera.removeListener("updated",this.activeListeners.camera),window.removeEventListener("resize",this.activeListeners.handleResize),this.mouseCaptor.kill(),this.touchCaptor.kill(),this.unbindGraphHandlers(),this.quadtree=new h.default,this.nodeDataCache={},this.edgeDataCache={},this.nodesWithForcedLabels=[],this.edgesWithForcedLabels=[],this.highlightedNodes.clear(),this.renderFrame&&((0,g.cancelFrame)(this.renderFrame),this.renderFrame=null),this.renderHighlightedNodesFrame&&((0,g.cancelFrame)(this.renderHighlightedNodesFrame),this.renderHighlightedNodesFrame=null);for(var t=this.container;t.firstChild;)t.removeChild(t.firstChild)},e.prototype.scaleSize=function(t){return t/this.cameraSizeRatio},e.prototype.getCanvases=function(){return o({},this.elements)},e}(l.TypedEventEmitter);e.default=w},291:function(t,e,r){"use strict";var i,a=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0}),e.TypedEventEmitter=void 0;var o=function(t){function e(){var e=t.call(this)||this;return e.rawEmitter=e,e}return a(e,t),e}(r(187).EventEmitter);e.TypedEventEmitter=o},227:function(t,e,r){"use strict";var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.animateNodes=e.ANIMATE_DEFAULTS=void 0;var a=r(524),o=i(r(941));e.ANIMATE_DEFAULTS={easing:"quadraticInOut",duration:150},e.animateNodes=function(t,r,i,n){var s=Object.assign({},e.ANIMATE_DEFAULTS,i),u="function"==typeof s.easing?s.easing:o.default[s.easing],d=Date.now(),c={};for(var h in r){var l=r[h];for(var g in c[h]={},l)c[h][g]=t.getNodeAttribute(h,g)}var p=null,f=function(){p=null;var e=(Date.now()-d)/s.duration;if(e>=1){for(var i in r){var o=r[i];for(var h in o)t.setNodeAttribute(i,h,o[h])}"function"==typeof n&&n()}else{for(var i in e=u(e),r){o=r[i];var l=c[i];for(var h in o)t.setNodeAttribute(i,h,o[h]*e+l[h]*(1-e))}p=(0,a.requestFrame)(f)}};return f(),function(){p&&(0,a.cancelFrame)(p)}}},109:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.HTML_COLORS=void 0,e.HTML_COLORS={black:"#000000",silver:"#C0C0C0",gray:"#808080",grey:"#808080",white:"#FFFFFF",maroon:"#800000",red:"#FF0000",purple:"#800080",fuchsia:"#FF00FF",green:"#008000",lime:"#00FF00",olive:"#808000",yellow:"#FFFF00",navy:"#000080",blue:"#0000FF",teal:"#008080",aqua:"#00FFFF",darkblue:"#00008B",mediumblue:"#0000CD",darkgreen:"#006400",darkcyan:"#008B8B",deepskyblue:"#00BFFF",darkturquoise:"#00CED1",mediumspringgreen:"#00FA9A",springgreen:"#00FF7F",cyan:"#00FFFF",midnightblue:"#191970",dodgerblue:"#1E90FF",lightseagreen:"#20B2AA",forestgreen:"#228B22",seagreen:"#2E8B57",darkslategray:"#2F4F4F",darkslategrey:"#2F4F4F",limegreen:"#32CD32",mediumseagreen:"#3CB371",turquoise:"#40E0D0",royalblue:"#4169E1",steelblue:"#4682B4",darkslateblue:"#483D8B",mediumturquoise:"#48D1CC",indigo:"#4B0082",darkolivegreen:"#556B2F",cadetblue:"#5F9EA0",cornflowerblue:"#6495ED",rebeccapurple:"#663399",mediumaquamarine:"#66CDAA",dimgray:"#696969",dimgrey:"#696969",slateblue:"#6A5ACD",olivedrab:"#6B8E23",slategray:"#708090",slategrey:"#708090",lightslategray:"#778899",lightslategrey:"#778899",mediumslateblue:"#7B68EE",lawngreen:"#7CFC00",chartreuse:"#7FFF00",aquamarine:"#7FFFD4",skyblue:"#87CEEB",lightskyblue:"#87CEFA",blueviolet:"#8A2BE2",darkred:"#8B0000",darkmagenta:"#8B008B",saddlebrown:"#8B4513",darkseagreen:"#8FBC8F",lightgreen:"#90EE90",mediumpurple:"#9370DB",darkviolet:"#9400D3",palegreen:"#98FB98",darkorchid:"#9932CC",yellowgreen:"#9ACD32",sienna:"#A0522D",brown:"#A52A2A",darkgray:"#A9A9A9",darkgrey:"#A9A9A9",lightblue:"#ADD8E6",greenyellow:"#ADFF2F",paleturquoise:"#AFEEEE",lightsteelblue:"#B0C4DE",powderblue:"#B0E0E6",firebrick:"#B22222",darkgoldenrod:"#B8860B",mediumorchid:"#BA55D3",rosybrown:"#BC8F8F",darkkhaki:"#BDB76B",mediumvioletred:"#C71585",indianred:"#CD5C5C",peru:"#CD853F",chocolate:"#D2691E",tan:"#D2B48C",lightgray:"#D3D3D3",lightgrey:"#D3D3D3",thistle:"#D8BFD8",orchid:"#DA70D6",goldenrod:"#DAA520",palevioletred:"#DB7093",crimson:"#DC143C",gainsboro:"#DCDCDC",plum:"#DDA0DD",burlywood:"#DEB887",lightcyan:"#E0FFFF",lavender:"#E6E6FA",darksalmon:"#E9967A",violet:"#EE82EE",palegoldenrod:"#EEE8AA",lightcoral:"#F08080",khaki:"#F0E68C",aliceblue:"#F0F8FF",honeydew:"#F0FFF0",azure:"#F0FFFF",sandybrown:"#F4A460",wheat:"#F5DEB3",beige:"#F5F5DC",whitesmoke:"#F5F5F5",mintcream:"#F5FFFA",ghostwhite:"#F8F8FF",salmon:"#FA8072",antiquewhite:"#FAEBD7",linen:"#FAF0E6",lightgoldenrodyellow:"#FAFAD2",oldlace:"#FDF5E6",magenta:"#FF00FF",deeppink:"#FF1493",orangered:"#FF4500",tomato:"#FF6347",hotpink:"#FF69B4",coral:"#FF7F50",darkorange:"#FF8C00",lightsalmon:"#FFA07A",orange:"#FFA500",lightpink:"#FFB6C1",pink:"#FFC0CB",gold:"#FFD700",peachpuff:"#FFDAB9",navajowhite:"#FFDEAD",moccasin:"#FFE4B5",bisque:"#FFE4C4",mistyrose:"#FFE4E1",blanchedalmond:"#FFEBCD",papayawhip:"#FFEFD5",lavenderblush:"#FFF0F5",seashell:"#FFF5EE",cornsilk:"#FFF8DC",lemonchiffon:"#FFFACD",floralwhite:"#FFFAF0",snow:"#FFFAFA",lightyellow:"#FFFFE0",ivory:"#FFFFF0"}},941:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.cubicInOut=e.cubicOut=e.cubicIn=e.quadraticInOut=e.quadraticOut=e.quadraticIn=e.linear=void 0,e.linear=function(t){return t},e.quadraticIn=function(t){return t*t},e.quadraticOut=function(t){return t*(2-t)},e.quadraticInOut=function(t){return(t*=2)<1?.5*t*t:-.5*(--t*(t-2)-1)},e.cubicIn=function(t){return t*t*t},e.cubicOut=function(t){return--t*t*t+1},e.cubicInOut=function(t){return(t*=2)<1?.5*t*t*t:.5*((t-=2)*t*t+2)};var r={linear:e.linear,quadraticIn:e.quadraticIn,quadraticOut:e.quadraticOut,quadraticInOut:e.quadraticInOut,cubicIn:e.cubicIn,cubicOut:e.cubicOut,cubicInOut:e.cubicInOut};e.default=r},822:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.doEdgeCollideWithPoint=e.isPixelColored=void 0,e.isPixelColored=function(t,e,r){var i=new Uint8Array(4);return t.readPixels(e,t.drawingBufferHeight-r,1,1,t.RGBA,t.UNSIGNED_BYTE,i),i[3]>0},e.doEdgeCollideWithPoint=function(t,e,r,i,a,o,n){return!(t<r-n&&t<a-n||e<i-n&&e<o-n||t>r+n&&t>a+n||e>i+n&&e>o+n||!(Math.abs((a-r)*(i-e)-(r-t)*(o-i))/Math.sqrt(Math.pow(a-r,2)+Math.pow(o-i,2))<n/2))}},524:function(t,e,r){"use strict";var i=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var i,a,o=r.call(t),n=[];try{for(;(void 0===e||e-- >0)&&!(i=o.next()).done;)n.push(i.value)}catch(t){a={error:t}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(a)throw a.error}}return n},a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.validateGraph=e.canUse32BitsIndices=e.extractPixel=e.getMatrixImpact=e.matrixFromCamera=e.getCorrectionRatio=e.floatColor=e.floatArrayColor=e.parseColor=e.zIndexOrdering=e.createNormalizationFunction=e.graphExtent=e.getPixelRatio=e.createElement=e.cancelFrame=e.requestFrame=e.assignDeep=e.assign=e.isPlainObject=void 0;var o=a(r(186)),n=r(132),s=r(109);function u(t){return"object"==typeof t&&null!==t&&t.constructor===Object}e.isPlainObject=u,e.assign=function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];t=t||{};for(var i=0,a=e.length;i<a;i++){var o=e[i];o&&Object.assign(t,o)}return t},e.assignDeep=function t(e){for(var r=[],i=1;i<arguments.length;i++)r[i-1]=arguments[i];e=e||{};for(var a=0,o=r.length;a<o;a++){var n=r[a];if(n)for(var s in n)u(n[s])?e[s]=t(e[s],n[s]):e[s]=n[s]}return e},e.requestFrame="undefined"!=typeof requestAnimationFrame?function(t){return requestAnimationFrame(t)}:function(t){return setTimeout(t,0)},e.cancelFrame="undefined"!=typeof cancelAnimationFrame?function(t){return cancelAnimationFrame(t)}:function(t){return clearTimeout(t)},e.createElement=function(t,e,r){var i=document.createElement(t);if(e)for(var a in e)i.style[a]=e[a];if(r)for(var a in r)i.setAttribute(a,r[a]);return i},e.getPixelRatio=function(){return void 0!==window.devicePixelRatio?window.devicePixelRatio:1},e.graphExtent=function(t){if(!t.order)return{x:[0,1],y:[0,1]};var e=1/0,r=-1/0,i=1/0,a=-1/0;return t.forEachNode((function(t,o){var n=o.x,s=o.y;n<e&&(e=n),n>r&&(r=n),s<i&&(i=s),s>a&&(a=s)})),{x:[e,r],y:[i,a]}},e.createNormalizationFunction=function(t){var e=i(t.x,2),r=e[0],a=e[1],o=i(t.y,2),n=o[0],s=o[1],u=Math.max(a-r,s-n),d=(a+r)/2,c=(s+n)/2;(0===u||Math.abs(u)===1/0||isNaN(u))&&(u=1),isNaN(d)&&(d=0),isNaN(c)&&(c=0);var h=function(t){return{x:.5+(t.x-d)/u,y:.5+(t.y-c)/u}};return h.applyTo=function(t){t.x=.5+(t.x-d)/u,t.y=.5+(t.y-c)/u},h.inverse=function(t){return{x:d+u*(t.x-.5),y:c+u*(t.y-.5)}},h.ratio=u,h},e.zIndexOrdering=function(t,e,r){return r.sort((function(t,r){var i=e(t)||0,a=e(r)||0;return i<a?-1:i>a?1:0}))};var d=new Int8Array(4),c=new Int32Array(d.buffer,0,1),h=new Float32Array(d.buffer,0,1),l=/^\s*rgba?\s*\(/,g=/^\s*rgba?\s*\(\s*([0-9]*)\s*,\s*([0-9]*)\s*,\s*([0-9]*)(?:\s*,\s*(.*)?)?\)\s*$/;function p(t){var e=0,r=0,i=0,a=1;if("#"===t[0])4===t.length?(e=parseInt(t.charAt(1)+t.charAt(1),16),r=parseInt(t.charAt(2)+t.charAt(2),16),i=parseInt(t.charAt(3)+t.charAt(3),16)):(e=parseInt(t.charAt(1)+t.charAt(2),16),r=parseInt(t.charAt(3)+t.charAt(4),16),i=parseInt(t.charAt(5)+t.charAt(6),16)),9===t.length&&(a=parseInt(t.charAt(7)+t.charAt(8),16)/255);else if(l.test(t)){var o=t.match(g);o&&(e=+o[1],r=+o[2],i=+o[3],o[4]&&(a=+o[4]))}return{r:e,g:r,b:i,a}}e.parseColor=p;var f={};for(var b in s.HTML_COLORS)f[b]=y(s.HTML_COLORS[b]),f[s.HTML_COLORS[b]]=f[b];function y(t){if(void 0!==f[t])return f[t];var e=p(t),r=e.r,i=e.g,a=e.b,o=e.a;o=255*o|0,c[0]=4278190079&(o<<24|a<<16|i<<8|r);var n=h[0];return f[t]=n,n}function v(t,e){var r=t.height/t.width,i=e.height/e.width;return r<1&&i>1||r>1&&i<1?1:Math.min(Math.max(i,1/i),Math.max(1/r,r))}e.floatArrayColor=function(t){var e=p(t=s.HTML_COLORS[t]||t),r=e.r,i=e.g,a=e.b,o=e.a;return new Float32Array([r/255,i/255,a/255,o])},e.floatColor=y,e.getCorrectionRatio=v,e.matrixFromCamera=function(t,e,r,i,a){var o=t.angle,s=t.ratio,u=t.x,d=t.y,c=e.width,h=e.height,l=(0,n.identity)(),g=Math.min(c,h)-2*i,p=v(e,r);return a?((0,n.multiply)(l,(0,n.translate)((0,n.identity)(),u,d)),(0,n.multiply)(l,(0,n.scale)((0,n.identity)(),s)),(0,n.multiply)(l,(0,n.rotate)((0,n.identity)(),o)),(0,n.multiply)(l,(0,n.scale)((0,n.identity)(),c/g/2/p,h/g/2/p))):((0,n.multiply)(l,(0,n.scale)((0,n.identity)(),g/c*2*p,g/h*2*p)),(0,n.multiply)(l,(0,n.rotate)((0,n.identity)(),-o)),(0,n.multiply)(l,(0,n.scale)((0,n.identity)(),1/s)),(0,n.multiply)(l,(0,n.translate)((0,n.identity)(),-u,-d))),l},e.getMatrixImpact=function(t,e,r){var i=(0,n.multiplyVec2)(t,{x:Math.cos(e.angle),y:Math.sin(e.angle)},0),a=i.x,o=i.y;return 1/Math.sqrt(Math.pow(a,2)+Math.pow(o,2))/r.width},e.extractPixel=function(t,e,r,i){var a=i||new Uint8Array(4);return t.readPixels(e,r,1,1,t.RGBA,t.UNSIGNED_BYTE,a),a},e.canUse32BitsIndices=function(t){return"undefined"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext||!!t.getExtension("OES_element_index_uint")},e.validateGraph=function(t){if(!(0,o.default)(t))throw new Error("Sigma: invalid graph instance.");t.forEachNode((function(t,e){if(!Number.isFinite(e.x)||!Number.isFinite(e.y))throw new Error("Sigma: Coordinates of node ".concat(t," are invalid. A node must have a numeric 'x' and 'y' attribute."))}))}},132:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.multiplyVec2=e.multiply=e.translate=e.rotate=e.scale=e.identity=void 0,e.identity=function(){return Float32Array.of(1,0,0,0,1,0,0,0,1)},e.scale=function(t,e,r){return t[0]=e,t[4]="number"==typeof r?r:e,t},e.rotate=function(t,e){var r=Math.sin(e),i=Math.cos(e);return t[0]=i,t[1]=r,t[3]=-r,t[4]=i,t},e.translate=function(t,e,r){return t[6]=e,t[7]=r,t},e.multiply=function(t,e){var r=t[0],i=t[1],a=t[2],o=t[3],n=t[4],s=t[5],u=t[6],d=t[7],c=t[8],h=e[0],l=e[1],g=e[2],p=e[3],f=e[4],b=e[5],y=e[6],v=e[7],_=e[8];return t[0]=h*r+l*o+g*u,t[1]=h*i+l*n+g*d,t[2]=h*a+l*s+g*c,t[3]=p*r+f*o+b*u,t[4]=p*i+f*n+b*d,t[5]=p*a+f*s+b*c,t[6]=y*r+v*o+_*u,t[7]=y*i+v*n+_*d,t[8]=y*a+v*s+_*c,t},e.multiplyVec2=function(t,e,r){void 0===r&&(r=1);var i=t[0],a=t[1],o=t[3],n=t[4],s=t[6],u=t[7],d=e.x,c=e.y;return{x:d*i+c*o+s*r,y:d*a+c*n+u*r}}}},e={};function r(i){var a=e[i];if(void 0!==a)return a.exports;var o=e[i]={exports:{}};return t[i].call(o.exports,o,o.exports,r),o.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var i in e)r.o(e,i)&&!r.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};return(()=>{"use strict";r.r(i),r.d(i,{NodeProgramSquare:()=>h,SigmaGraphCreator:()=>l});var t=r(698),e=r.n(t),a=r(26),o=r.n(a);const n=JSON.parse('{"attributes":{},"nodes":[{"key":"1","attributes":{"id":1,"route_id":6,"train_id":1}},{"key":"2","attributes":{"id":2,"route_id":4,"train_id":1}},{"key":"3","attributes":{"id":3,"route_id":6,"train_id":1}},{"key":"4","attributes":{"id":4,"route_id":16,"train_id":1}},{"key":"5","attributes":{"id":5,"route_id":15,"train_id":1}},{"key":"6","attributes":{"id":6,"route_id":9,"train_id":1}},{"key":"7","attributes":{"id":7,"route_id":9,"train_id":1}},{"key":"8","attributes":{"id":8,"route_id":13,"train_id":1}},{"key":"9","attributes":{"id":9,"route_id":17,"train_id":1}},{"key":"10","attributes":{"id":10,"route_id":11,"train_id":1}},{"key":"11","attributes":{"id":11,"route_id":2,"train_id":1}},{"key":"12","attributes":{"id":12,"route_id":1,"train_id":1}},{"key":"13","attributes":{"id":13,"route_id":4,"train_id":1}},{"key":"14","attributes":{"id":14,"route_id":8,"train_id":1}},{"key":"15","attributes":{"id":15,"route_id":2,"train_id":1}},{"key":"16","attributes":{"id":16,"route_id":3,"train_id":1}},{"key":"17","attributes":{"id":17,"route_id":7,"train_id":1}},{"key":"18","attributes":{"id":18,"route_id":16,"train_id":1}},{"key":"19","attributes":{"id":19,"route_id":1,"train_id":2}},{"key":"20","attributes":{"id":20,"route_id":12,"train_id":2}},{"key":"21","attributes":{"id":21,"route_id":10,"train_id":2}},{"key":"22","attributes":{"id":22,"route_id":2,"train_id":2}},{"key":"23","attributes":{"id":23,"route_id":6,"train_id":2}},{"key":"24","attributes":{"id":24,"route_id":15,"train_id":2}},{"key":"25","attributes":{"id":25,"route_id":12,"train_id":2}},{"key":"26","attributes":{"id":26,"route_id":8,"train_id":2}},{"key":"27","attributes":{"id":27,"route_id":2,"train_id":2}},{"key":"28","attributes":{"id":28,"route_id":1,"train_id":2}},{"key":"29","attributes":{"id":29,"route_id":7,"train_id":2}},{"key":"30","attributes":{"id":30,"route_id":6,"train_id":2}},{"key":"31","attributes":{"id":31,"route_id":14,"train_id":2}},{"key":"32","attributes":{"id":32,"route_id":12,"train_id":2}},{"key":"33","attributes":{"id":33,"route_id":12,"train_id":2}},{"key":"34","attributes":{"id":34,"route_id":16,"train_id":2}},{"key":"35","attributes":{"id":35,"route_id":7,"train_id":2}},{"key":"36","attributes":{"id":36,"route_id":10,"train_id":3}},{"key":"37","attributes":{"id":37,"route_id":17,"train_id":3}},{"key":"38","attributes":{"id":38,"route_id":2,"train_id":3}},{"key":"39","attributes":{"id":39,"route_id":13,"train_id":3}},{"key":"40","attributes":{"id":40,"route_id":5,"train_id":3}},{"key":"41","attributes":{"id":41,"route_id":4,"train_id":3}},{"key":"42","attributes":{"id":42,"route_id":12,"train_id":3}},{"key":"43","attributes":{"id":43,"route_id":5,"train_id":3}},{"key":"44","attributes":{"id":44,"route_id":6,"train_id":3}},{"key":"45","attributes":{"id":45,"route_id":2,"train_id":3}},{"key":"46","attributes":{"id":46,"route_id":10,"train_id":3}},{"key":"47","attributes":{"id":47,"route_id":8,"train_id":3}},{"key":"48","attributes":{"id":48,"route_id":12,"train_id":3}},{"key":"49","attributes":{"id":49,"route_id":6,"train_id":3}},{"key":"50","attributes":{"id":50,"route_id":12,"train_id":3}},{"key":"51","attributes":{"id":51,"route_id":2,"train_id":3}},{"key":"52","attributes":{"id":52,"route_id":0,"train_id":3}},{"key":"53","attributes":{"id":53,"route_id":18,"train_id":3}},{"key":"54","attributes":{"id":54,"route_id":17,"train_id":3}},{"key":"55","attributes":{"id":55,"route_id":8,"train_id":4}},{"key":"56","attributes":{"id":56,"route_id":1,"train_id":4}},{"key":"57","attributes":{"id":57,"route_id":9,"train_id":4}},{"key":"58","attributes":{"id":58,"route_id":1,"train_id":4}},{"key":"59","attributes":{"id":59,"route_id":0,"train_id":4}},{"key":"60","attributes":{"id":60,"route_id":15,"train_id":4}},{"key":"61","attributes":{"id":61,"route_id":12,"train_id":4}},{"key":"62","attributes":{"id":62,"route_id":6,"train_id":4}},{"key":"63","attributes":{"id":63,"route_id":1,"train_id":4}},{"key":"64","attributes":{"id":64,"route_id":0,"train_id":4}},{"key":"65","attributes":{"id":65,"route_id":16,"train_id":4}},{"key":"66","attributes":{"id":66,"route_id":8,"train_id":4}},{"key":"67","attributes":{"id":67,"route_id":5,"train_id":4}},{"key":"68","attributes":{"id":68,"route_id":3,"train_id":4}},{"key":"69","attributes":{"id":69,"route_id":7,"train_id":4}},{"key":"70","attributes":{"id":70,"route_id":2,"train_id":4}},{"key":"71","attributes":{"id":71,"route_id":0,"train_id":4}},{"key":"72","attributes":{"id":72,"route_id":4,"train_id":4}},{"key":"73","attributes":{"id":73,"route_id":8,"train_id":5}},{"key":"74","attributes":{"id":74,"route_id":4,"train_id":5}},{"key":"75","attributes":{"id":75,"route_id":8,"train_id":5}},{"key":"76","attributes":{"id":76,"route_id":7,"train_id":5}},{"key":"77","attributes":{"id":77,"route_id":14,"train_id":5}},{"key":"78","attributes":{"id":78,"route_id":1,"train_id":5}},{"key":"79","attributes":{"id":79,"route_id":10,"train_id":5}},{"key":"80","attributes":{"id":80,"route_id":2,"train_id":5}},{"key":"81","attributes":{"id":81,"route_id":3,"train_id":5}},{"key":"82","attributes":{"id":82,"route_id":11,"train_id":5}},{"key":"83","attributes":{"id":83,"route_id":6,"train_id":5}},{"key":"84","attributes":{"id":84,"route_id":6,"train_id":5}},{"key":"85","attributes":{"id":85,"route_id":13,"train_id":5}},{"key":"86","attributes":{"id":86,"route_id":1,"train_id":5}},{"key":"87","attributes":{"id":87,"route_id":1,"train_id":5}},{"key":"88","attributes":{"id":88,"route_id":13,"train_id":6}},{"key":"89","attributes":{"id":89,"route_id":9,"train_id":6}},{"key":"90","attributes":{"id":90,"route_id":10,"train_id":6}},{"key":"91","attributes":{"id":91,"route_id":4,"train_id":6}},{"key":"92","attributes":{"id":92,"route_id":0,"train_id":6}},{"key":"93","attributes":{"id":93,"route_id":16,"train_id":6}},{"key":"94","attributes":{"id":94,"route_id":2,"train_id":6}},{"key":"95","attributes":{"id":95,"route_id":16,"train_id":6}},{"key":"96","attributes":{"id":96,"route_id":2,"train_id":6}},{"key":"97","attributes":{"id":97,"route_id":15,"train_id":6}},{"key":"98","attributes":{"id":98,"route_id":0,"train_id":6}},{"key":"99","attributes":{"id":99,"route_id":15,"train_id":6}},{"key":"100","attributes":{"id":100,"route_id":4,"train_id":6}},{"key":"101","attributes":{"id":101,"route_id":10,"train_id":6}},{"key":"102","attributes":{"id":102,"route_id":10,"train_id":6}},{"key":"103","attributes":{"id":103,"route_id":2,"train_id":6}},{"key":"104","attributes":{"id":104,"route_id":16,"train_id":6}},{"key":"105","attributes":{"id":105,"route_id":13,"train_id":7}},{"key":"106","attributes":{"id":106,"route_id":5,"train_id":7}},{"key":"107","attributes":{"id":107,"route_id":5,"train_id":7}},{"key":"108","attributes":{"id":108,"route_id":0,"train_id":7}},{"key":"109","attributes":{"id":109,"route_id":0,"train_id":7}},{"key":"110","attributes":{"id":110,"route_id":11,"train_id":7}},{"key":"111","attributes":{"id":111,"route_id":6,"train_id":7}},{"key":"112","attributes":{"id":112,"route_id":5,"train_id":7}},{"key":"113","attributes":{"id":113,"route_id":9,"train_id":7}},{"key":"114","attributes":{"id":114,"route_id":8,"train_id":7}},{"key":"115","attributes":{"id":115,"route_id":0,"train_id":7}},{"key":"116","attributes":{"id":116,"route_id":5,"train_id":7}},{"key":"117","attributes":{"id":117,"route_id":6,"train_id":7}},{"key":"118","attributes":{"id":118,"route_id":14,"train_id":7}},{"key":"119","attributes":{"id":119,"route_id":10,"train_id":7}},{"key":"120","attributes":{"id":120,"route_id":14,"train_id":7}},{"key":"121","attributes":{"id":121,"route_id":5,"train_id":7}},{"key":"122","attributes":{"id":122,"route_id":6,"train_id":8}},{"key":"123","attributes":{"id":123,"route_id":7,"train_id":8}},{"key":"124","attributes":{"id":124,"route_id":1,"train_id":8}},{"key":"125","attributes":{"id":125,"route_id":6,"train_id":8}},{"key":"126","attributes":{"id":126,"route_id":14,"train_id":8}},{"key":"127","attributes":{"id":127,"route_id":5,"train_id":8}},{"key":"128","attributes":{"id":128,"route_id":1,"train_id":8}},{"key":"129","attributes":{"id":129,"route_id":14,"train_id":8}},{"key":"130","attributes":{"id":130,"route_id":16,"train_id":8}},{"key":"131","attributes":{"id":131,"route_id":10,"train_id":8}},{"key":"132","attributes":{"id":132,"route_id":3,"train_id":8}},{"key":"133","attributes":{"id":133,"route_id":17,"train_id":8}},{"key":"134","attributes":{"id":134,"route_id":7,"train_id":8}},{"key":"135","attributes":{"id":135,"route_id":1,"train_id":8}},{"key":"136","attributes":{"id":136,"route_id":15,"train_id":8}},{"key":"137","attributes":{"id":137,"route_id":12,"train_id":8}},{"key":"138","attributes":{"id":138,"route_id":10,"train_id":8}},{"key":"139","attributes":{"id":139,"route_id":3,"train_id":8}},{"key":"140","attributes":{"id":140,"route_id":11,"train_id":8}},{"key":"141","attributes":{"id":141,"route_id":8,"train_id":9}},{"key":"142","attributes":{"id":142,"route_id":16,"train_id":9}},{"key":"143","attributes":{"id":143,"route_id":11,"train_id":9}},{"key":"144","attributes":{"id":144,"route_id":16,"train_id":9}},{"key":"145","attributes":{"id":145,"route_id":8,"train_id":9}},{"key":"146","attributes":{"id":146,"route_id":9,"train_id":9}},{"key":"147","attributes":{"id":147,"route_id":13,"train_id":9}},{"key":"148","attributes":{"id":148,"route_id":15,"train_id":9}},{"key":"149","attributes":{"id":149,"route_id":3,"train_id":9}},{"key":"150","attributes":{"id":150,"route_id":10,"train_id":9}},{"key":"151","attributes":{"id":151,"route_id":5,"train_id":9}},{"key":"152","attributes":{"id":152,"route_id":1,"train_id":9}},{"key":"153","attributes":{"id":153,"route_id":11,"train_id":9}},{"key":"154","attributes":{"id":154,"route_id":9,"train_id":9}},{"key":"155","attributes":{"id":155,"route_id":13,"train_id":9}},{"key":"156","attributes":{"id":156,"route_id":4,"train_id":9}},{"key":"157","attributes":{"id":157,"route_id":6,"train_id":9}},{"key":"158","attributes":{"id":158,"route_id":8,"train_id":10}},{"key":"159","attributes":{"id":159,"route_id":7,"train_id":10}},{"key":"160","attributes":{"id":160,"route_id":5,"train_id":10}},{"key":"161","attributes":{"id":161,"route_id":9,"train_id":10}},{"key":"162","attributes":{"id":162,"route_id":11,"train_id":10}},{"key":"163","attributes":{"id":163,"route_id":15,"train_id":10}},{"key":"164","attributes":{"id":164,"route_id":15,"train_id":10}},{"key":"165","attributes":{"id":165,"route_id":3,"train_id":10}},{"key":"166","attributes":{"id":166,"route_id":2,"train_id":10}},{"key":"167","attributes":{"id":167,"route_id":5,"train_id":10}},{"key":"168","attributes":{"id":168,"route_id":2,"train_id":10}},{"key":"169","attributes":{"id":169,"route_id":12,"train_id":10}},{"key":"170","attributes":{"id":170,"route_id":16,"train_id":10}},{"key":"171","attributes":{"id":171,"route_id":1,"train_id":10}},{"key":"172","attributes":{"id":172,"route_id":7,"train_id":10}},{"key":"173","attributes":{"id":173,"route_id":17,"train_id":10}},{"key":"174","attributes":{"id":174,"route_id":16,"train_id":10}},{"key":"175","attributes":{"id":175,"route_id":1,"train_id":10}},{"key":"176","attributes":{"id":176,"route_id":1,"train_id":11}},{"key":"177","attributes":{"id":177,"route_id":18,"train_id":11}},{"key":"178","attributes":{"id":178,"route_id":9,"train_id":11}},{"key":"179","attributes":{"id":179,"route_id":14,"train_id":11}},{"key":"180","attributes":{"id":180,"route_id":8,"train_id":11}},{"key":"181","attributes":{"id":181,"route_id":4,"train_id":11}},{"key":"182","attributes":{"id":182,"route_id":2,"train_id":11}},{"key":"183","attributes":{"id":183,"route_id":1,"train_id":11}},{"key":"184","attributes":{"id":184,"route_id":7,"train_id":11}},{"key":"185","attributes":{"id":185,"route_id":17,"train_id":11}},{"key":"186","attributes":{"id":186,"route_id":15,"train_id":11}},{"key":"187","attributes":{"id":187,"route_id":0,"train_id":11}},{"key":"188","attributes":{"id":188,"route_id":12,"train_id":11}},{"key":"189","attributes":{"id":189,"route_id":18,"train_id":11}},{"key":"190","attributes":{"id":190,"route_id":5,"train_id":11}},{"key":"191","attributes":{"id":191,"route_id":3,"train_id":11}},{"key":"192","attributes":{"id":192,"route_id":8,"train_id":11}},{"key":"193","attributes":{"id":193,"route_id":6,"train_id":11}},{"key":"194","attributes":{"id":194,"route_id":11,"train_id":11}},{"key":"195","attributes":{"id":195,"route_id":5,"train_id":12}},{"key":"196","attributes":{"id":196,"route_id":4,"train_id":12}},{"key":"197","attributes":{"id":197,"route_id":0,"train_id":12}},{"key":"198","attributes":{"id":198,"route_id":3,"train_id":12}},{"key":"199","attributes":{"id":199,"route_id":4,"train_id":12}},{"key":"200","attributes":{"id":200,"route_id":8,"train_id":12}},{"key":"201","attributes":{"id":201,"route_id":7,"train_id":12}},{"key":"202","attributes":{"id":202,"route_id":9,"train_id":12}},{"key":"203","attributes":{"id":203,"route_id":0,"train_id":12}},{"key":"204","attributes":{"id":204,"route_id":6,"train_id":12}},{"key":"205","attributes":{"id":205,"route_id":15,"train_id":12}},{"key":"206","attributes":{"id":206,"route_id":5,"train_id":12}},{"key":"207","attributes":{"id":207,"route_id":1,"train_id":12}},{"key":"208","attributes":{"id":208,"route_id":13,"train_id":12}},{"key":"209","attributes":{"id":209,"route_id":16,"train_id":12}},{"key":"210","attributes":{"id":210,"route_id":14,"train_id":12}},{"key":"211","attributes":{"id":211,"route_id":5,"train_id":12}},{"key":"212","attributes":{"id":212,"route_id":12,"train_id":13}},{"key":"213","attributes":{"id":213,"route_id":9,"train_id":13}},{"key":"214","attributes":{"id":214,"route_id":2,"train_id":13}},{"key":"215","attributes":{"id":215,"route_id":13,"train_id":13}},{"key":"216","attributes":{"id":216,"route_id":8,"train_id":13}},{"key":"217","attributes":{"id":217,"route_id":9,"train_id":13}},{"key":"218","attributes":{"id":218,"route_id":10,"train_id":13}},{"key":"219","attributes":{"id":219,"route_id":2,"train_id":13}},{"key":"220","attributes":{"id":220,"route_id":9,"train_id":13}},{"key":"221","attributes":{"id":221,"route_id":14,"train_id":13}},{"key":"222","attributes":{"id":222,"route_id":0,"train_id":13}},{"key":"223","attributes":{"id":223,"route_id":17,"train_id":13}},{"key":"224","attributes":{"id":224,"route_id":4,"train_id":13}},{"key":"225","attributes":{"id":225,"route_id":12,"train_id":13}},{"key":"226","attributes":{"id":226,"route_id":17,"train_id":13}},{"key":"227","attributes":{"id":227,"route_id":0,"train_id":13}},{"key":"228","attributes":{"id":228,"route_id":1,"train_id":13}},{"key":"229","attributes":{"id":229,"route_id":6,"train_id":13}},{"key":"230","attributes":{"id":230,"route_id":13,"train_id":14}},{"key":"231","attributes":{"id":231,"route_id":2,"train_id":14}},{"key":"232","attributes":{"id":232,"route_id":15,"train_id":14}},{"key":"233","attributes":{"id":233,"route_id":9,"train_id":14}},{"key":"234","attributes":{"id":234,"route_id":8,"train_id":14}},{"key":"235","attributes":{"id":235,"route_id":7,"train_id":14}},{"key":"236","attributes":{"id":236,"route_id":7,"train_id":14}},{"key":"237","attributes":{"id":237,"route_id":0,"train_id":14}},{"key":"238","attributes":{"id":238,"route_id":1,"train_id":14}},{"key":"239","attributes":{"id":239,"route_id":4,"train_id":14}},{"key":"240","attributes":{"id":240,"route_id":9,"train_id":14}},{"key":"241","attributes":{"id":241,"route_id":5,"train_id":14}},{"key":"242","attributes":{"id":242,"route_id":8,"train_id":14}},{"key":"243","attributes":{"id":243,"route_id":16,"train_id":14}},{"key":"244","attributes":{"id":244,"route_id":10,"train_id":14}},{"key":"245","attributes":{"id":245,"route_id":13,"train_id":14}},{"key":"246","attributes":{"id":246,"route_id":16,"train_id":14}},{"key":"247","attributes":{"id":247,"route_id":7,"train_id":15}},{"key":"248","attributes":{"id":248,"route_id":11,"train_id":15}},{"key":"249","attributes":{"id":249,"route_id":12,"train_id":15}},{"key":"250","attributes":{"id":250,"route_id":9,"train_id":15}},{"key":"251","attributes":{"id":251,"route_id":3,"train_id":15}},{"key":"252","attributes":{"id":252,"route_id":7,"train_id":15}},{"key":"253","attributes":{"id":253,"route_id":4,"train_id":15}},{"key":"254","attributes":{"id":254,"route_id":16,"train_id":15}},{"key":"255","attributes":{"id":255,"route_id":13,"train_id":15}},{"key":"256","attributes":{"id":256,"route_id":6,"train_id":15}},{"key":"257","attributes":{"id":257,"route_id":6,"train_id":15}},{"key":"258","attributes":{"id":258,"route_id":14,"train_id":15}},{"key":"259","attributes":{"id":259,"route_id":18,"train_id":15}},{"key":"260","attributes":{"id":260,"route_id":14,"train_id":15}},{"key":"261","attributes":{"id":261,"route_id":14,"train_id":15}},{"key":"262","attributes":{"id":262,"route_id":14,"train_id":15}},{"key":"263","attributes":{"id":263,"route_id":4,"train_id":15}},{"key":"264","attributes":{"id":264,"route_id":11,"train_id":15}},{"key":"265","attributes":{"id":265,"route_id":12,"train_id":15}},{"key":"266","attributes":{"id":266,"route_id":12,"train_id":16}},{"key":"267","attributes":{"id":267,"route_id":12,"train_id":16}},{"key":"268","attributes":{"id":268,"route_id":13,"train_id":16}},{"key":"269","attributes":{"id":269,"route_id":0,"train_id":16}},{"key":"270","attributes":{"id":270,"route_id":9,"train_id":16}},{"key":"271","attributes":{"id":271,"route_id":0,"train_id":16}},{"key":"272","attributes":{"id":272,"route_id":13,"train_id":16}},{"key":"273","attributes":{"id":273,"route_id":10,"train_id":16}},{"key":"274","attributes":{"id":274,"route_id":7,"train_id":16}},{"key":"275","attributes":{"id":275,"route_id":6,"train_id":16}},{"key":"276","attributes":{"id":276,"route_id":11,"train_id":16}},{"key":"277","attributes":{"id":277,"route_id":5,"train_id":16}},{"key":"278","attributes":{"id":278,"route_id":9,"train_id":16}},{"key":"279","attributes":{"id":279,"route_id":1,"train_id":16}},{"key":"280","attributes":{"id":280,"route_id":2,"train_id":16}},{"key":"281","attributes":{"id":281,"route_id":6,"train_id":17}},{"key":"282","attributes":{"id":282,"route_id":14,"train_id":17}},{"key":"283","attributes":{"id":283,"route_id":14,"train_id":17}},{"key":"284","attributes":{"id":284,"route_id":9,"train_id":17}},{"key":"285","attributes":{"id":285,"route_id":11,"train_id":17}},{"key":"286","attributes":{"id":286,"route_id":4,"train_id":17}},{"key":"287","attributes":{"id":287,"route_id":0,"train_id":17}},{"key":"288","attributes":{"id":288,"route_id":0,"train_id":17}},{"key":"289","attributes":{"id":289,"route_id":3,"train_id":17}},{"key":"290","attributes":{"id":290,"route_id":8,"train_id":17}},{"key":"291","attributes":{"id":291,"route_id":2,"train_id":17}},{"key":"292","attributes":{"id":292,"route_id":4,"train_id":17}},{"key":"293","attributes":{"id":293,"route_id":16,"train_id":17}},{"key":"294","attributes":{"id":294,"route_id":16,"train_id":17}},{"key":"295","attributes":{"id":295,"route_id":4,"train_id":17}},{"key":"296","attributes":{"id":296,"route_id":0,"train_id":17}},{"key":"297","attributes":{"id":297,"route_id":15,"train_id":17}},{"key":"298","attributes":{"id":298,"route_id":2,"train_id":17}},{"key":"299","attributes":{"id":299,"route_id":13,"train_id":18}},{"key":"300","attributes":{"id":300,"route_id":12,"train_id":18}},{"key":"301","attributes":{"id":301,"route_id":11,"train_id":18}},{"key":"302","attributes":{"id":302,"route_id":1,"train_id":18}},{"key":"303","attributes":{"id":303,"route_id":9,"train_id":18}},{"key":"304","attributes":{"id":304,"route_id":13,"train_id":18}},{"key":"305","attributes":{"id":305,"route_id":2,"train_id":18}},{"key":"306","attributes":{"id":306,"route_id":1,"train_id":18}},{"key":"307","attributes":{"id":307,"route_id":3,"train_id":18}},{"key":"308","attributes":{"id":308,"route_id":0,"train_id":18}},{"key":"309","attributes":{"id":309,"route_id":3,"train_id":18}},{"key":"310","attributes":{"id":310,"route_id":4,"train_id":18}},{"key":"311","attributes":{"id":311,"route_id":0,"train_id":18}},{"key":"312","attributes":{"id":312,"route_id":14,"train_id":18}},{"key":"313","attributes":{"id":313,"route_id":7,"train_id":18}},{"key":"314","attributes":{"id":314,"route_id":0,"train_id":19}},{"key":"315","attributes":{"id":315,"route_id":7,"train_id":19}},{"key":"316","attributes":{"id":316,"route_id":15,"train_id":19}},{"key":"317","attributes":{"id":317,"route_id":12,"train_id":19}},{"key":"318","attributes":{"id":318,"route_id":14,"train_id":19}},{"key":"319","attributes":{"id":319,"route_id":3,"train_id":19}},{"key":"320","attributes":{"id":320,"route_id":10,"train_id":19}},{"key":"321","attributes":{"id":321,"route_id":5,"train_id":19}},{"key":"322","attributes":{"id":322,"route_id":3,"train_id":19}},{"key":"323","attributes":{"id":323,"route_id":10,"train_id":19}},{"key":"324","attributes":{"id":324,"route_id":5,"train_id":19}},{"key":"325","attributes":{"id":325,"route_id":6,"train_id":19}},{"key":"326","attributes":{"id":326,"route_id":3,"train_id":19}},{"key":"327","attributes":{"id":327,"route_id":10,"train_id":19}},{"key":"328","attributes":{"id":328,"route_id":7,"train_id":19}},{"key":"329","attributes":{"id":329,"route_id":2,"train_id":19}},{"key":"330","attributes":{"id":330,"route_id":1,"train_id":20}},{"key":"331","attributes":{"id":331,"route_id":11,"train_id":20}},{"key":"332","attributes":{"id":332,"route_id":12,"train_id":20}},{"key":"333","attributes":{"id":333,"route_id":2,"train_id":20}},{"key":"334","attributes":{"id":334,"route_id":9,"train_id":20}},{"key":"335","attributes":{"id":335,"route_id":2,"train_id":20}},{"key":"336","attributes":{"id":336,"route_id":18,"train_id":20}},{"key":"337","attributes":{"id":337,"route_id":2,"train_id":20}},{"key":"338","attributes":{"id":338,"route_id":13,"train_id":20}},{"key":"339","attributes":{"id":339,"route_id":2,"train_id":20}},{"key":"340","attributes":{"id":340,"route_id":14,"train_id":20}},{"key":"341","attributes":{"id":341,"route_id":2,"train_id":20}},{"key":"342","attributes":{"id":342,"route_id":5,"train_id":20}},{"key":"343","attributes":{"id":343,"route_id":4,"train_id":20}},{"key":"344","attributes":{"id":344,"route_id":17,"train_id":20}},{"key":"345","attributes":{"id":345,"route_id":11,"train_id":20}},{"key":"346","attributes":{"id":346,"route_id":18,"train_id":20}},{"key":"347","attributes":{"id":347,"route_id":9,"train_id":20}},{"key":"348","attributes":{"id":348,"route_id":12,"train_id":20}},{"key":"349","attributes":{"id":349,"route_id":6,"train_id":21}},{"key":"350","attributes":{"id":350,"route_id":6,"train_id":21}},{"key":"351","attributes":{"id":351,"route_id":11,"train_id":21}},{"key":"352","attributes":{"id":352,"route_id":9,"train_id":21}},{"key":"353","attributes":{"id":353,"route_id":16,"train_id":21}},{"key":"354","attributes":{"id":354,"route_id":8,"train_id":21}},{"key":"355","attributes":{"id":355,"route_id":0,"train_id":21}},{"key":"356","attributes":{"id":356,"route_id":14,"train_id":21}},{"key":"357","attributes":{"id":357,"route_id":0,"train_id":21}},{"key":"358","attributes":{"id":358,"route_id":5,"train_id":21}},{"key":"359","attributes":{"id":359,"route_id":4,"train_id":21}},{"key":"360","attributes":{"id":360,"route_id":9,"train_id":21}},{"key":"361","attributes":{"id":361,"route_id":1,"train_id":21}},{"key":"362","attributes":{"id":362,"route_id":7,"train_id":21}},{"key":"363","attributes":{"id":363,"route_id":14,"train_id":21}},{"key":"364","attributes":{"id":364,"route_id":1,"train_id":21}},{"key":"365","attributes":{"id":365,"route_id":8,"train_id":21}},{"key":"366","attributes":{"id":366,"route_id":16,"train_id":21}},{"key":"367","attributes":{"id":367,"route_id":0,"train_id":22}},{"key":"368","attributes":{"id":368,"route_id":12,"train_id":22}},{"key":"369","attributes":{"id":369,"route_id":12,"train_id":22}},{"key":"370","attributes":{"id":370,"route_id":2,"train_id":22}},{"key":"371","attributes":{"id":371,"route_id":6,"train_id":22}},{"key":"372","attributes":{"id":372,"route_id":6,"train_id":22}},{"key":"373","attributes":{"id":373,"route_id":18,"train_id":22}},{"key":"374","attributes":{"id":374,"route_id":17,"train_id":22}},{"key":"375","attributes":{"id":375,"route_id":16,"train_id":22}},{"key":"376","attributes":{"id":376,"route_id":4,"train_id":22}},{"key":"377","attributes":{"id":377,"route_id":12,"train_id":22}},{"key":"378","attributes":{"id":378,"route_id":5,"train_id":22}},{"key":"379","attributes":{"id":379,"route_id":8,"train_id":22}},{"key":"380","attributes":{"id":380,"route_id":7,"train_id":22}},{"key":"381","attributes":{"id":381,"route_id":16,"train_id":22}},{"key":"382","attributes":{"id":382,"route_id":3,"train_id":22}},{"key":"383","attributes":{"id":383,"route_id":17,"train_id":22}},{"key":"384","attributes":{"id":384,"route_id":16,"train_id":22}},{"key":"385","attributes":{"id":385,"route_id":8,"train_id":22}},{"key":"386","attributes":{"id":386,"route_id":3,"train_id":23}},{"key":"387","attributes":{"id":387,"route_id":5,"train_id":23}},{"key":"388","attributes":{"id":388,"route_id":7,"train_id":23}},{"key":"389","attributes":{"id":389,"route_id":16,"train_id":23}},{"key":"390","attributes":{"id":390,"route_id":14,"train_id":23}},{"key":"391","attributes":{"id":391,"route_id":11,"train_id":23}},{"key":"392","attributes":{"id":392,"route_id":1,"train_id":23}},{"key":"393","attributes":{"id":393,"route_id":3,"train_id":23}},{"key":"394","attributes":{"id":394,"route_id":15,"train_id":23}},{"key":"395","attributes":{"id":395,"route_id":0,"train_id":23}},{"key":"396","attributes":{"id":396,"route_id":8,"train_id":23}},{"key":"397","attributes":{"id":397,"route_id":5,"train_id":23}},{"key":"398","attributes":{"id":398,"route_id":12,"train_id":23}},{"key":"399","attributes":{"id":399,"route_id":13,"train_id":23}},{"key":"400","attributes":{"id":400,"route_id":17,"train_id":23}},{"key":"401","attributes":{"id":401,"route_id":14,"train_id":23}},{"key":"402","attributes":{"id":402,"route_id":13,"train_id":23}},{"key":"403","attributes":{"id":403,"route_id":4,"train_id":23}},{"key":"404","attributes":{"id":404,"route_id":5,"train_id":24}},{"key":"405","attributes":{"id":405,"route_id":7,"train_id":24}},{"key":"406","attributes":{"id":406,"route_id":13,"train_id":24}},{"key":"407","attributes":{"id":407,"route_id":18,"train_id":24}},{"key":"408","attributes":{"id":408,"route_id":4,"train_id":24}},{"key":"409","attributes":{"id":409,"route_id":12,"train_id":24}},{"key":"410","attributes":{"id":410,"route_id":7,"train_id":24}},{"key":"411","attributes":{"id":411,"route_id":1,"train_id":24}},{"key":"412","attributes":{"id":412,"route_id":8,"train_id":24}},{"key":"413","attributes":{"id":413,"route_id":15,"train_id":24}},{"key":"414","attributes":{"id":414,"route_id":6,"train_id":24}},{"key":"415","attributes":{"id":415,"route_id":15,"train_id":24}},{"key":"416","attributes":{"id":416,"route_id":6,"train_id":24}},{"key":"417","attributes":{"id":417,"route_id":0,"train_id":24}},{"key":"418","attributes":{"id":418,"route_id":18,"train_id":24}},{"key":"419","attributes":{"id":419,"route_id":5,"train_id":24}},{"key":"420","attributes":{"id":420,"route_id":9,"train_id":24}},{"key":"421","attributes":{"id":421,"route_id":1,"train_id":24}},{"key":"422","attributes":{"id":422,"route_id":4,"train_id":24}},{"key":"423","attributes":{"id":423,"route_id":13,"train_id":25}},{"key":"424","attributes":{"id":424,"route_id":6,"train_id":25}},{"key":"425","attributes":{"id":425,"route_id":1,"train_id":25}},{"key":"426","attributes":{"id":426,"route_id":6,"train_id":25}},{"key":"427","attributes":{"id":427,"route_id":9,"train_id":25}},{"key":"428","attributes":{"id":428,"route_id":6,"train_id":25}},{"key":"429","attributes":{"id":429,"route_id":4,"train_id":25}},{"key":"430","attributes":{"id":430,"route_id":14,"train_id":25}},{"key":"431","attributes":{"id":431,"route_id":3,"train_id":25}},{"key":"432","attributes":{"id":432,"route_id":6,"train_id":25}},{"key":"433","attributes":{"id":433,"route_id":0,"train_id":25}},{"key":"434","attributes":{"id":434,"route_id":6,"train_id":25}},{"key":"435","attributes":{"id":435,"route_id":0,"train_id":25}},{"key":"436","attributes":{"id":436,"route_id":14,"train_id":25}},{"key":"437","attributes":{"id":437,"route_id":13,"train_id":25}},{"key":"438","attributes":{"id":438,"route_id":12,"train_id":25}},{"key":"439","attributes":{"id":439,"route_id":0,"train_id":25}},{"key":"440","attributes":{"id":440,"route_id":1,"train_id":26}},{"key":"441","attributes":{"id":441,"route_id":4,"train_id":26}},{"key":"442","attributes":{"id":442,"route_id":12,"train_id":26}},{"key":"443","attributes":{"id":443,"route_id":2,"train_id":26}},{"key":"444","attributes":{"id":444,"route_id":2,"train_id":26}},{"key":"445","attributes":{"id":445,"route_id":12,"train_id":26}},{"key":"446","attributes":{"id":446,"route_id":13,"train_id":26}},{"key":"447","attributes":{"id":447,"route_id":13,"train_id":26}},{"key":"448","attributes":{"id":448,"route_id":14,"train_id":26}},{"key":"449","attributes":{"id":449,"route_id":8,"train_id":26}},{"key":"450","attributes":{"id":450,"route_id":16,"train_id":26}},{"key":"451","attributes":{"id":451,"route_id":1,"train_id":26}},{"key":"452","attributes":{"id":452,"route_id":13,"train_id":26}},{"key":"453","attributes":{"id":453,"route_id":13,"train_id":26}},{"key":"454","attributes":{"id":454,"route_id":2,"train_id":26}},{"key":"455","attributes":{"id":455,"route_id":12,"train_id":26}},{"key":"456","attributes":{"id":456,"route_id":7,"train_id":26}},{"key":"457","attributes":{"id":457,"route_id":15,"train_id":27}},{"key":"458","attributes":{"id":458,"route_id":3,"train_id":27}},{"key":"459","attributes":{"id":459,"route_id":2,"train_id":27}},{"key":"460","attributes":{"id":460,"route_id":7,"train_id":27}},{"key":"461","attributes":{"id":461,"route_id":10,"train_id":27}},{"key":"462","attributes":{"id":462,"route_id":0,"train_id":27}},{"key":"463","attributes":{"id":463,"route_id":11,"train_id":27}},{"key":"464","attributes":{"id":464,"route_id":9,"train_id":27}},{"key":"465","attributes":{"id":465,"route_id":9,"train_id":27}},{"key":"466","attributes":{"id":466,"route_id":10,"train_id":27}},{"key":"467","attributes":{"id":467,"route_id":13,"train_id":27}},{"key":"468","attributes":{"id":468,"route_id":11,"train_id":27}},{"key":"469","attributes":{"id":469,"route_id":3,"train_id":27}},{"key":"470","attributes":{"id":470,"route_id":3,"train_id":27}},{"key":"471","attributes":{"id":471,"route_id":5,"train_id":27}},{"key":"472","attributes":{"id":472,"route_id":1,"train_id":27}},{"key":"473","attributes":{"id":473,"route_id":16,"train_id":27}},{"key":"474","attributes":{"id":474,"route_id":13,"train_id":28}},{"key":"475","attributes":{"id":475,"route_id":5,"train_id":28}},{"key":"476","attributes":{"id":476,"route_id":2,"train_id":28}},{"key":"477","attributes":{"id":477,"route_id":2,"train_id":28}},{"key":"478","attributes":{"id":478,"route_id":5,"train_id":28}},{"key":"479","attributes":{"id":479,"route_id":17,"train_id":28}},{"key":"480","attributes":{"id":480,"route_id":10,"train_id":28}},{"key":"481","attributes":{"id":481,"route_id":17,"train_id":28}},{"key":"482","attributes":{"id":482,"route_id":0,"train_id":28}},{"key":"483","attributes":{"id":483,"route_id":0,"train_id":28}},{"key":"484","attributes":{"id":484,"route_id":10,"train_id":28}},{"key":"485","attributes":{"id":485,"route_id":12,"train_id":28}},{"key":"486","attributes":{"id":486,"route_id":12,"train_id":28}},{"key":"487","attributes":{"id":487,"route_id":14,"train_id":28}},{"key":"488","attributes":{"id":488,"route_id":5,"train_id":28}},{"key":"489","attributes":{"id":489,"route_id":15,"train_id":28}},{"key":"490","attributes":{"id":490,"route_id":7,"train_id":28}},{"key":"491","attributes":{"id":491,"route_id":17,"train_id":28}},{"key":"492","attributes":{"id":492,"route_id":8,"train_id":29}},{"key":"493","attributes":{"id":493,"route_id":6,"train_id":29}},{"key":"494","attributes":{"id":494,"route_id":3,"train_id":29}},{"key":"495","attributes":{"id":495,"route_id":8,"train_id":29}},{"key":"496","attributes":{"id":496,"route_id":8,"train_id":29}},{"key":"497","attributes":{"id":497,"route_id":15,"train_id":29}},{"key":"498","attributes":{"id":498,"route_id":5,"train_id":29}},{"key":"499","attributes":{"id":499,"route_id":9,"train_id":29}},{"key":"500","attributes":{"id":500,"route_id":0,"train_id":29}},{"key":"501","attributes":{"id":501,"route_id":0,"train_id":29}},{"key":"502","attributes":{"id":502,"route_id":7,"train_id":29}},{"key":"503","attributes":{"id":503,"route_id":10,"train_id":29}},{"key":"504","attributes":{"id":504,"route_id":10,"train_id":29}},{"key":"505","attributes":{"id":505,"route_id":4,"train_id":29}},{"key":"506","attributes":{"id":506,"route_id":2,"train_id":29}},{"key":"507","attributes":{"id":507,"route_id":0,"train_id":29}},{"key":"508","attributes":{"id":508,"route_id":1,"train_id":30}},{"key":"509","attributes":{"id":509,"route_id":1,"train_id":30}},{"key":"510","attributes":{"id":510,"route_id":6,"train_id":30}},{"key":"511","attributes":{"id":511,"route_id":17,"train_id":30}},{"key":"512","attributes":{"id":512,"route_id":17,"train_id":30}},{"key":"513","attributes":{"id":513,"route_id":13,"train_id":30}},{"key":"514","attributes":{"id":514,"route_id":6,"train_id":30}},{"key":"515","attributes":{"id":515,"route_id":8,"train_id":30}},{"key":"516","attributes":{"id":516,"route_id":6,"train_id":30}},{"key":"517","attributes":{"id":517,"route_id":3,"train_id":30}},{"key":"518","attributes":{"id":518,"route_id":10,"train_id":30}},{"key":"519","attributes":{"id":519,"route_id":16,"train_id":30}},{"key":"520","attributes":{"id":520,"route_id":5,"train_id":30}},{"key":"521","attributes":{"id":521,"route_id":13,"train_id":30}},{"key":"522","attributes":{"id":522,"route_id":17,"train_id":30}},{"key":"523","attributes":{"id":523,"route_id":2,"train_id":30}},{"key":"524","attributes":{"id":524,"route_id":11,"train_id":30}},{"key":"525","attributes":{"id":525,"route_id":13,"train_id":30}}],"edges":[{"source":"1","target":"2","attributes":{}},{"source":"2","target":"3","attributes":{}},{"source":"3","target":"4","attributes":{}},{"source":"4","target":"5","attributes":{}},{"source":"5","target":"6","attributes":{}},{"source":"6","target":"7","attributes":{}},{"source":"7","target":"8","attributes":{}},{"source":"8","target":"9","attributes":{}},{"source":"9","target":"10","attributes":{}},{"source":"10","target":"11","attributes":{}},{"source":"11","target":"12","attributes":{}},{"source":"12","target":"13","attributes":{}},{"source":"13","target":"14","attributes":{}},{"source":"14","target":"15","attributes":{}},{"source":"15","target":"16","attributes":{}},{"source":"16","target":"17","attributes":{}},{"source":"17","target":"18","attributes":{}},{"source":"19","target":"20","attributes":{}},{"source":"20","target":"21","attributes":{}},{"source":"21","target":"22","attributes":{}},{"source":"22","target":"23","attributes":{}},{"source":"23","target":"24","attributes":{}},{"source":"24","target":"25","attributes":{}},{"source":"25","target":"26","attributes":{}},{"source":"26","target":"27","attributes":{}},{"source":"27","target":"28","attributes":{}},{"source":"28","target":"29","attributes":{}},{"source":"29","target":"30","attributes":{}},{"source":"30","target":"31","attributes":{}},{"source":"31","target":"32","attributes":{}},{"source":"32","target":"33","attributes":{}},{"source":"33","target":"34","attributes":{}},{"source":"34","target":"35","attributes":{}},{"source":"36","target":"37","attributes":{}},{"source":"37","target":"38","attributes":{}},{"source":"38","target":"39","attributes":{}},{"source":"39","target":"40","attributes":{}},{"source":"40","target":"41","attributes":{}},{"source":"41","target":"42","attributes":{}},{"source":"42","target":"43","attributes":{}},{"source":"43","target":"44","attributes":{}},{"source":"44","target":"45","attributes":{}},{"source":"45","target":"46","attributes":{}},{"source":"46","target":"47","attributes":{}},{"source":"47","target":"48","attributes":{}},{"source":"48","target":"49","attributes":{}},{"source":"49","target":"50","attributes":{}},{"source":"50","target":"51","attributes":{}},{"source":"51","target":"52","attributes":{}},{"source":"52","target":"53","attributes":{}},{"source":"53","target":"54","attributes":{}},{"source":"55","target":"56","attributes":{}},{"source":"56","target":"57","attributes":{}},{"source":"57","target":"58","attributes":{}},{"source":"58","target":"59","attributes":{}},{"source":"59","target":"60","attributes":{}},{"source":"60","target":"61","attributes":{}},{"source":"61","target":"62","attributes":{}},{"source":"62","target":"63","attributes":{}},{"source":"63","target":"64","attributes":{}},{"source":"64","target":"65","attributes":{}},{"source":"65","target":"66","attributes":{}},{"source":"66","target":"67","attributes":{}},{"source":"67","target":"68","attributes":{}},{"source":"68","target":"69","attributes":{}},{"source":"69","target":"70","attributes":{}},{"source":"70","target":"71","attributes":{}},{"source":"71","target":"72","attributes":{}},{"source":"73","target":"74","attributes":{}},{"source":"74","target":"75","attributes":{}},{"source":"75","target":"76","attributes":{}},{"source":"76","target":"77","attributes":{}},{"source":"77","target":"78","attributes":{}},{"source":"78","target":"79","attributes":{}},{"source":"79","target":"80","attributes":{}},{"source":"80","target":"81","attributes":{}},{"source":"81","target":"82","attributes":{}},{"source":"82","target":"83","attributes":{}},{"source":"83","target":"84","attributes":{}},{"source":"84","target":"85","attributes":{}},{"source":"85","target":"86","attributes":{}},{"source":"86","target":"87","attributes":{}},{"source":"88","target":"89","attributes":{}},{"source":"89","target":"90","attributes":{}},{"source":"90","target":"91","attributes":{}},{"source":"91","target":"92","attributes":{}},{"source":"92","target":"93","attributes":{}},{"source":"93","target":"94","attributes":{}},{"source":"94","target":"95","attributes":{}},{"source":"95","target":"96","attributes":{}},{"source":"96","target":"97","attributes":{}},{"source":"97","target":"98","attributes":{}},{"source":"98","target":"99","attributes":{}},{"source":"99","target":"100","attributes":{}},{"source":"100","target":"101","attributes":{}},{"source":"101","target":"102","attributes":{}},{"source":"102","target":"103","attributes":{}},{"source":"103","target":"104","attributes":{}},{"source":"105","target":"106","attributes":{}},{"source":"106","target":"107","attributes":{}},{"source":"107","target":"108","attributes":{}},{"source":"108","target":"109","attributes":{}},{"source":"109","target":"110","attributes":{}},{"source":"110","target":"111","attributes":{}},{"source":"111","target":"112","attributes":{}},{"source":"112","target":"113","attributes":{}},{"source":"113","target":"114","attributes":{}},{"source":"114","target":"115","attributes":{}},{"source":"115","target":"116","attributes":{}},{"source":"116","target":"117","attributes":{}},{"source":"117","target":"118","attributes":{}},{"source":"118","target":"119","attributes":{}},{"source":"119","target":"120","attributes":{}},{"source":"120","target":"121","attributes":{}},{"source":"122","target":"123","attributes":{}},{"source":"123","target":"124","attributes":{}},{"source":"124","target":"125","attributes":{}},{"source":"125","target":"126","attributes":{}},{"source":"126","target":"127","attributes":{}},{"source":"127","target":"128","attributes":{}},{"source":"128","target":"129","attributes":{}},{"source":"129","target":"130","attributes":{}},{"source":"130","target":"131","attributes":{}},{"source":"131","target":"132","attributes":{}},{"source":"132","target":"133","attributes":{}},{"source":"133","target":"134","attributes":{}},{"source":"134","target":"135","attributes":{}},{"source":"135","target":"136","attributes":{}},{"source":"136","target":"137","attributes":{}},{"source":"137","target":"138","attributes":{}},{"source":"138","target":"139","attributes":{}},{"source":"139","target":"140","attributes":{}},{"source":"141","target":"142","attributes":{}},{"source":"142","target":"143","attributes":{}},{"source":"143","target":"144","attributes":{}},{"source":"144","target":"145","attributes":{}},{"source":"145","target":"146","attributes":{}},{"source":"146","target":"147","attributes":{}},{"source":"147","target":"148","attributes":{}},{"source":"148","target":"149","attributes":{}},{"source":"149","target":"150","attributes":{}},{"source":"150","target":"151","attributes":{}},{"source":"151","target":"152","attributes":{}},{"source":"152","target":"153","attributes":{}},{"source":"153","target":"154","attributes":{}},{"source":"154","target":"155","attributes":{}},{"source":"155","target":"156","attributes":{}},{"source":"156","target":"157","attributes":{}},{"source":"158","target":"159","attributes":{}},{"source":"159","target":"160","attributes":{}},{"source":"160","target":"161","attributes":{}},{"source":"161","target":"162","attributes":{}},{"source":"162","target":"163","attributes":{}},{"source":"163","target":"164","attributes":{}},{"source":"164","target":"165","attributes":{}},{"source":"165","target":"166","attributes":{}},{"source":"166","target":"167","attributes":{}},{"source":"167","target":"168","attributes":{}},{"source":"168","target":"169","attributes":{}},{"source":"169","target":"170","attributes":{}},{"source":"170","target":"171","attributes":{}},{"source":"171","target":"172","attributes":{}},{"source":"172","target":"173","attributes":{}},{"source":"173","target":"174","attributes":{}},{"source":"174","target":"175","attributes":{}},{"source":"176","target":"177","attributes":{}},{"source":"177","target":"178","attributes":{}},{"source":"178","target":"179","attributes":{}},{"source":"179","target":"180","attributes":{}},{"source":"180","target":"181","attributes":{}},{"source":"181","target":"182","attributes":{}},{"source":"182","target":"183","attributes":{}},{"source":"183","target":"184","attributes":{}},{"source":"184","target":"185","attributes":{}},{"source":"185","target":"186","attributes":{}},{"source":"186","target":"187","attributes":{}},{"source":"187","target":"188","attributes":{}},{"source":"188","target":"189","attributes":{}},{"source":"189","target":"190","attributes":{}},{"source":"190","target":"191","attributes":{}},{"source":"191","target":"192","attributes":{}},{"source":"192","target":"193","attributes":{}},{"source":"193","target":"194","attributes":{}},{"source":"195","target":"196","attributes":{}},{"source":"196","target":"197","attributes":{}},{"source":"197","target":"198","attributes":{}},{"source":"198","target":"199","attributes":{}},{"source":"199","target":"200","attributes":{}},{"source":"200","target":"201","attributes":{}},{"source":"201","target":"202","attributes":{}},{"source":"202","target":"203","attributes":{}},{"source":"203","target":"204","attributes":{}},{"source":"204","target":"205","attributes":{}},{"source":"205","target":"206","attributes":{}},{"source":"206","target":"207","attributes":{}},{"source":"207","target":"208","attributes":{}},{"source":"208","target":"209","attributes":{}},{"source":"209","target":"210","attributes":{}},{"source":"210","target":"211","attributes":{}},{"source":"212","target":"213","attributes":{}},{"source":"213","target":"214","attributes":{}},{"source":"214","target":"215","attributes":{}},{"source":"215","target":"216","attributes":{}},{"source":"216","target":"217","attributes":{}},{"source":"217","target":"218","attributes":{}},{"source":"218","target":"219","attributes":{}},{"source":"219","target":"220","attributes":{}},{"source":"220","target":"221","attributes":{}},{"source":"221","target":"222","attributes":{}},{"source":"222","target":"223","attributes":{}},{"source":"223","target":"224","attributes":{}},{"source":"224","target":"225","attributes":{}},{"source":"225","target":"226","attributes":{}},{"source":"226","target":"227","attributes":{}},{"source":"227","target":"228","attributes":{}},{"source":"228","target":"229","attributes":{}},{"source":"230","target":"231","attributes":{}},{"source":"231","target":"232","attributes":{}},{"source":"232","target":"233","attributes":{}},{"source":"233","target":"234","attributes":{}},{"source":"234","target":"235","attributes":{}},{"source":"235","target":"236","attributes":{}},{"source":"236","target":"237","attributes":{}},{"source":"237","target":"238","attributes":{}},{"source":"238","target":"239","attributes":{}},{"source":"239","target":"240","attributes":{}},{"source":"240","target":"241","attributes":{}},{"source":"241","target":"242","attributes":{}},{"source":"242","target":"243","attributes":{}},{"source":"243","target":"244","attributes":{}},{"source":"244","target":"245","attributes":{}},{"source":"245","target":"246","attributes":{}},{"source":"247","target":"248","attributes":{}},{"source":"248","target":"249","attributes":{}},{"source":"249","target":"250","attributes":{}},{"source":"250","target":"251","attributes":{}},{"source":"251","target":"252","attributes":{}},{"source":"252","target":"253","attributes":{}},{"source":"253","target":"254","attributes":{}},{"source":"254","target":"255","attributes":{}},{"source":"255","target":"256","attributes":{}},{"source":"256","target":"257","attributes":{}},{"source":"257","target":"258","attributes":{}},{"source":"258","target":"259","attributes":{}},{"source":"259","target":"260","attributes":{}},{"source":"260","target":"261","attributes":{}},{"source":"261","target":"262","attributes":{}},{"source":"262","target":"263","attributes":{}},{"source":"263","target":"264","attributes":{}},{"source":"264","target":"265","attributes":{}},{"source":"266","target":"267","attributes":{}},{"source":"267","target":"268","attributes":{}},{"source":"268","target":"269","attributes":{}},{"source":"269","target":"270","attributes":{}},{"source":"270","target":"271","attributes":{}},{"source":"271","target":"272","attributes":{}},{"source":"272","target":"273","attributes":{}},{"source":"273","target":"274","attributes":{}},{"source":"274","target":"275","attributes":{}},{"source":"275","target":"276","attributes":{}},{"source":"276","target":"277","attributes":{}},{"source":"277","target":"278","attributes":{}},{"source":"278","target":"279","attributes":{}},{"source":"279","target":"280","attributes":{}},{"source":"281","target":"282","attributes":{}},{"source":"282","target":"283","attributes":{}},{"source":"283","target":"284","attributes":{}},{"source":"284","target":"285","attributes":{}},{"source":"285","target":"286","attributes":{}},{"source":"286","target":"287","attributes":{}},{"source":"287","target":"288","attributes":{}},{"source":"288","target":"289","attributes":{}},{"source":"289","target":"290","attributes":{}},{"source":"290","target":"291","attributes":{}},{"source":"291","target":"292","attributes":{}},{"source":"292","target":"293","attributes":{}},{"source":"293","target":"294","attributes":{}},{"source":"294","target":"295","attributes":{}},{"source":"295","target":"296","attributes":{}},{"source":"296","target":"297","attributes":{}},{"source":"297","target":"298","attributes":{}},{"source":"299","target":"300","attributes":{}},{"source":"300","target":"301","attributes":{}},{"source":"301","target":"302","attributes":{}},{"source":"302","target":"303","attributes":{}},{"source":"303","target":"304","attributes":{}},{"source":"304","target":"305","attributes":{}},{"source":"305","target":"306","attributes":{}},{"source":"306","target":"307","attributes":{}},{"source":"307","target":"308","attributes":{}},{"source":"308","target":"309","attributes":{}},{"source":"309","target":"310","attributes":{}},{"source":"310","target":"311","attributes":{}},{"source":"311","target":"312","attributes":{}},{"source":"312","target":"313","attributes":{}},{"source":"314","target":"315","attributes":{}},{"source":"315","target":"316","attributes":{}},{"source":"316","target":"317","attributes":{}},{"source":"317","target":"318","attributes":{}},{"source":"318","target":"319","attributes":{}},{"source":"319","target":"320","attributes":{}},{"source":"320","target":"321","attributes":{}},{"source":"321","target":"322","attributes":{}},{"source":"322","target":"323","attributes":{}},{"source":"323","target":"324","attributes":{}},{"source":"324","target":"325","attributes":{}},{"source":"325","target":"326","attributes":{}},{"source":"326","target":"327","attributes":{}},{"source":"327","target":"328","attributes":{}},{"source":"328","target":"329","attributes":{}},{"source":"330","target":"331","attributes":{}},{"source":"331","target":"332","attributes":{}},{"source":"332","target":"333","attributes":{}},{"source":"333","target":"334","attributes":{}},{"source":"334","target":"335","attributes":{}},{"source":"335","target":"336","attributes":{}},{"source":"336","target":"337","attributes":{}},{"source":"337","target":"338","attributes":{}},{"source":"338","target":"339","attributes":{}},{"source":"339","target":"340","attributes":{}},{"source":"340","target":"341","attributes":{}},{"source":"341","target":"342","attributes":{}},{"source":"342","target":"343","attributes":{}},{"source":"343","target":"344","attributes":{}},{"source":"344","target":"345","attributes":{}},{"source":"345","target":"346","attributes":{}},{"source":"346","target":"347","attributes":{}},{"source":"347","target":"348","attributes":{}},{"source":"349","target":"350","attributes":{}},{"source":"350","target":"351","attributes":{}},{"source":"351","target":"352","attributes":{}},{"source":"352","target":"353","attributes":{}},{"source":"353","target":"354","attributes":{}},{"source":"354","target":"355","attributes":{}},{"source":"355","target":"356","attributes":{}},{"source":"356","target":"357","attributes":{}},{"source":"357","target":"358","attributes":{}},{"source":"358","target":"359","attributes":{}},{"source":"359","target":"360","attributes":{}},{"source":"360","target":"361","attributes":{}},{"source":"361","target":"362","attributes":{}},{"source":"362","target":"363","attributes":{}},{"source":"363","target":"364","attributes":{}},{"source":"364","target":"365","attributes":{}},{"source":"365","target":"366","attributes":{}},{"source":"367","target":"368","attributes":{}},{"source":"368","target":"369","attributes":{}},{"source":"369","target":"370","attributes":{}},{"source":"370","target":"371","attributes":{}},{"source":"371","target":"372","attributes":{}},{"source":"372","target":"373","attributes":{}},{"source":"373","target":"374","attributes":{}},{"source":"374","target":"375","attributes":{}},{"source":"375","target":"376","attributes":{}},{"source":"376","target":"377","attributes":{}},{"source":"377","target":"378","attributes":{}},{"source":"378","target":"379","attributes":{}},{"source":"379","target":"380","attributes":{}},{"source":"380","target":"381","attributes":{}},{"source":"381","target":"382","attributes":{}},{"source":"382","target":"383","attributes":{}},{"source":"383","target":"384","attributes":{}},{"source":"384","target":"385","attributes":{}},{"source":"386","target":"387","attributes":{}},{"source":"387","target":"388","attributes":{}},{"source":"388","target":"389","attributes":{}},{"source":"389","target":"390","attributes":{}},{"source":"390","target":"391","attributes":{}},{"source":"391","target":"392","attributes":{}},{"source":"392","target":"393","attributes":{}},{"source":"393","target":"394","attributes":{}},{"source":"394","target":"395","attributes":{}},{"source":"395","target":"396","attributes":{}},{"source":"396","target":"397","attributes":{}},{"source":"397","target":"398","attributes":{}},{"source":"398","target":"399","attributes":{}},{"source":"399","target":"400","attributes":{}},{"source":"400","target":"401","attributes":{}},{"source":"401","target":"402","attributes":{}},{"source":"402","target":"403","attributes":{}},{"source":"404","target":"405","attributes":{}},{"source":"405","target":"406","attributes":{}},{"source":"406","target":"407","attributes":{}},{"source":"407","target":"408","attributes":{}},{"source":"408","target":"409","attributes":{}},{"source":"409","target":"410","attributes":{}},{"source":"410","target":"411","attributes":{}},{"source":"411","target":"412","attributes":{}},{"source":"412","target":"413","attributes":{}},{"source":"413","target":"414","attributes":{}},{"source":"414","target":"415","attributes":{}},{"source":"415","target":"416","attributes":{}},{"source":"416","target":"417","attributes":{}},{"source":"417","target":"418","attributes":{}},{"source":"418","target":"419","attributes":{}},{"source":"419","target":"420","attributes":{}},{"source":"420","target":"421","attributes":{}},{"source":"421","target":"422","attributes":{}},{"source":"423","target":"424","attributes":{}},{"source":"424","target":"425","attributes":{}},{"source":"425","target":"426","attributes":{}},{"source":"426","target":"427","attributes":{}},{"source":"427","target":"428","attributes":{}},{"source":"428","target":"429","attributes":{}},{"source":"429","target":"430","attributes":{}},{"source":"430","target":"431","attributes":{}},{"source":"431","target":"432","attributes":{}},{"source":"432","target":"433","attributes":{}},{"source":"433","target":"434","attributes":{}},{"source":"434","target":"435","attributes":{}},{"source":"435","target":"436","attributes":{}},{"source":"436","target":"437","attributes":{}},{"source":"437","target":"438","attributes":{}},{"source":"438","target":"439","attributes":{}},{"source":"440","target":"441","attributes":{}},{"source":"441","target":"442","attributes":{}},{"source":"442","target":"443","attributes":{}},{"source":"443","target":"444","attributes":{}},{"source":"444","target":"445","attributes":{}},{"source":"445","target":"446","attributes":{}},{"source":"446","target":"447","attributes":{}},{"source":"447","target":"448","attributes":{}},{"source":"448","target":"449","attributes":{}},{"source":"449","target":"450","attributes":{}},{"source":"450","target":"451","attributes":{}},{"source":"451","target":"452","attributes":{}},{"source":"452","target":"453","attributes":{}},{"source":"453","target":"454","attributes":{}},{"source":"454","target":"455","attributes":{}},{"source":"455","target":"456","attributes":{}},{"source":"457","target":"458","attributes":{}},{"source":"458","target":"459","attributes":{}},{"source":"459","target":"460","attributes":{}},{"source":"460","target":"461","attributes":{}},{"source":"461","target":"462","attributes":{}},{"source":"462","target":"463","attributes":{}},{"source":"463","target":"464","attributes":{}},{"source":"464","target":"465","attributes":{}},{"source":"465","target":"466","attributes":{}},{"source":"466","target":"467","attributes":{}},{"source":"467","target":"468","attributes":{}},{"source":"468","target":"469","attributes":{}},{"source":"469","target":"470","attributes":{}},{"source":"470","target":"471","attributes":{}},{"source":"471","target":"472","attributes":{}},{"source":"472","target":"473","attributes":{}},{"source":"474","target":"475","attributes":{}},{"source":"475","target":"476","attributes":{}},{"source":"476","target":"477","attributes":{}},{"source":"477","target":"478","attributes":{}},{"source":"478","target":"479","attributes":{}},{"source":"479","target":"480","attributes":{}},{"source":"480","target":"481","attributes":{}},{"source":"481","target":"482","attributes":{}},{"source":"482","target":"483","attributes":{}},{"source":"483","target":"484","attributes":{}},{"source":"484","target":"485","attributes":{}},{"source":"485","target":"486","attributes":{}},{"source":"486","target":"487","attributes":{}},{"source":"487","target":"488","attributes":{}},{"source":"488","target":"489","attributes":{}},{"source":"489","target":"490","attributes":{}},{"source":"490","target":"491","attributes":{}},{"source":"492","target":"493","attributes":{}},{"source":"493","target":"494","attributes":{}},{"source":"494","target":"495","attributes":{}},{"source":"495","target":"496","attributes":{}},{"source":"496","target":"497","attributes":{}},{"source":"497","target":"498","attributes":{}},{"source":"498","target":"499","attributes":{}},{"source":"499","target":"500","attributes":{}},{"source":"500","target":"501","attributes":{}},{"source":"501","target":"502","attributes":{}},{"source":"502","target":"503","attributes":{}},{"source":"503","target":"504","attributes":{}},{"source":"504","target":"505","attributes":{}},{"source":"505","target":"506","attributes":{}},{"source":"506","target":"507","attributes":{}},{"source":"508","target":"509","attributes":{}},{"source":"509","target":"510","attributes":{}},{"source":"510","target":"511","attributes":{}},{"source":"511","target":"512","attributes":{}},{"source":"512","target":"513","attributes":{}},{"source":"513","target":"514","attributes":{}},{"source":"514","target":"515","attributes":{}},{"source":"515","target":"516","attributes":{}},{"source":"516","target":"517","attributes":{}},{"source":"517","target":"518","attributes":{}},{"source":"518","target":"519","attributes":{}},{"source":"519","target":"520","attributes":{}},{"source":"520","target":"521","attributes":{}},{"source":"521","target":"522","attributes":{}},{"source":"522","target":"523","attributes":{}},{"source":"523","target":"524","attributes":{}},{"source":"524","target":"525","attributes":{}},{"source":"523","target":"241","attributes":{"source":523,"target":241,"type":"arrow","value":1}},{"source":"180","target":"225","attributes":{"source":180,"target":225,"type":"arrow","value":1}},{"source":"517","target":"381","attributes":{"source":517,"target":381,"type":"arrow","value":1}},{"source":"427","target":"349","attributes":{"source":427,"target":349,"type":"arrow","value":1}},{"source":"482","target":"277","attributes":{"source":482,"target":277,"type":"arrow","value":1}},{"source":"98","target":"413","attributes":{"source":98,"target":413,"type":"arrow","value":1}},{"source":"399","target":"338","attributes":{"source":399,"target":338,"type":"arrow","value":1}},{"source":"238","target":"511","attributes":{"source":238,"target":511,"type":"arrow","value":1}},{"source":"154","target":"387","attributes":{"source":154,"target":387,"type":"arrow","value":1}},{"source":"321","target":"422","attributes":{"source":321,"target":422,"type":"arrow","value":1}},{"source":"177","target":"488","attributes":{"source":177,"target":488,"type":"arrow","value":1}},{"source":"217","target":"273","attributes":{"source":217,"target":273,"type":"arrow","value":1}},{"source":"154","target":"224","attributes":{"source":154,"target":224,"type":"arrow","value":1}},{"source":"356","target":"76","attributes":{"source":356,"target":76,"type":"arrow","value":1}},{"source":"500","target":"269","attributes":{"source":500,"target":269,"type":"arrow","value":1}},{"source":"453","target":"174","attributes":{"source":453,"target":174,"type":"arrow","value":1}},{"source":"1","target":"446","attributes":{"source":1,"target":446,"type":"arrow","value":1}},{"source":"520","target":"150","attributes":{"source":520,"target":150,"type":"arrow","value":1}},{"source":"499","target":"248","attributes":{"source":499,"target":248,"type":"arrow","value":1}},{"source":"129","target":"457","attributes":{"source":129,"target":457,"type":"arrow","value":1}},{"source":"269","target":"492","attributes":{"source":269,"target":492,"type":"arrow","value":1}},{"source":"27","target":"364","attributes":{"source":27,"target":364,"type":"arrow","value":1}},{"source":"326","target":"337","attributes":{"source":326,"target":337,"type":"arrow","value":1}},{"source":"444","target":"486","attributes":{"source":444,"target":486,"type":"arrow","value":1}},{"source":"476","target":"54","attributes":{"source":476,"target":54,"type":"arrow","value":1}},{"source":"143","target":"137","attributes":{"source":143,"target":137,"type":"arrow","value":1}},{"source":"239","target":"121","attributes":{"source":239,"target":121,"type":"arrow","value":1}},{"source":"35","target":"358","attributes":{"source":35,"target":358,"type":"arrow","value":1}},{"source":"475","target":"9","attributes":{"source":475,"target":9,"type":"arrow","value":1}},{"source":"25","target":"46","attributes":{"source":25,"target":46,"type":"arrow","value":1}},{"source":"255","target":"489","attributes":{"source":255,"target":489,"type":"arrow","value":1}},{"source":"522","target":"216","attributes":{"source":522,"target":216,"type":"arrow","value":1}},{"source":"84","target":"361","attributes":{"source":84,"target":361,"type":"arrow","value":1}},{"source":"175","target":"180","attributes":{"source":175,"target":180,"type":"arrow","value":1}},{"source":"260","target":"49","attributes":{"source":260,"target":49,"type":"arrow","value":1}},{"source":"458","target":"32","attributes":{"source":458,"target":32,"type":"arrow","value":1}},{"source":"188","target":"27","attributes":{"source":188,"target":27,"type":"arrow","value":1}},{"source":"492","target":"428","attributes":{"source":492,"target":428,"type":"arrow","value":1}},{"source":"509","target":"314","attributes":{"source":509,"target":314,"type":"arrow","value":1}},{"source":"288","target":"22","attributes":{"source":288,"target":22,"type":"arrow","value":1}},{"source":"489","target":"245","attributes":{"source":489,"target":245,"type":"arrow","value":1}},{"source":"404","target":"246","attributes":{"source":404,"target":246,"type":"arrow","value":1}},{"source":"310","target":"289","attributes":{"source":310,"target":289,"type":"arrow","value":1}},{"source":"54","target":"497","attributes":{"source":54,"target":497,"type":"arrow","value":1}},{"source":"306","target":"253","attributes":{"source":306,"target":253,"type":"arrow","value":1}},{"source":"345","target":"28","attributes":{"source":345,"target":28,"type":"arrow","value":1}},{"source":"310","target":"233","attributes":{"source":310,"target":233,"type":"arrow","value":1}},{"source":"482","target":"499","attributes":{"source":482,"target":499,"type":"arrow","value":1}},{"source":"512","target":"255","attributes":{"source":512,"target":255,"type":"arrow","value":1}},{"source":"321","target":"217","attributes":{"source":321,"target":217,"type":"arrow","value":1}},{"source":"393","target":"327","attributes":{"source":393,"target":327,"type":"arrow","value":1}},{"source":"464","target":"193","attributes":{"source":464,"target":193,"type":"arrow","value":1}},{"source":"271","target":"36","attributes":{"source":271,"target":36,"type":"arrow","value":1}},{"source":"467","target":"232","attributes":{"source":467,"target":232,"type":"arrow","value":1}},{"source":"300","target":"113","attributes":{"source":300,"target":113,"type":"arrow","value":1}},{"source":"365","target":"198","attributes":{"source":365,"target":198,"type":"arrow","value":1}},{"source":"6","target":"473","attributes":{"source":6,"target":473,"type":"arrow","value":1}},{"source":"399","target":"524","attributes":{"source":399,"target":524,"type":"arrow","value":1}},{"source":"15","target":"274","attributes":{"source":15,"target":274,"type":"arrow","value":1}},{"source":"213","target":"92","attributes":{"source":213,"target":92,"type":"arrow","value":1}},{"source":"162","target":"307","attributes":{"source":162,"target":307,"type":"arrow","value":1}},{"source":"11","target":"31","attributes":{"source":11,"target":31,"type":"arrow","value":1}},{"source":"219","target":"287","attributes":{"source":219,"target":287,"type":"arrow","value":1}},{"source":"393","target":"440","attributes":{"source":393,"target":440,"type":"arrow","value":1}},{"source":"344","target":"438","attributes":{"source":344,"target":438,"type":"arrow","value":1}},{"source":"142","target":"130","attributes":{"source":142,"target":130,"type":"arrow","value":1}},{"source":"178","target":"17","attributes":{"source":178,"target":17,"type":"arrow","value":1}},{"source":"2","target":"405","attributes":{"source":2,"target":405,"type":"arrow","value":1}},{"source":"498","target":"347","attributes":{"source":498,"target":347,"type":"arrow","value":1}},{"source":"396","target":"416","attributes":{"source":396,"target":416,"type":"arrow","value":1}},{"source":"225","target":"354","attributes":{"source":225,"target":354,"type":"arrow","value":1}},{"source":"214","target":"29","attributes":{"source":214,"target":29,"type":"arrow","value":1}},{"source":"225","target":"416","attributes":{"source":225,"target":416,"type":"arrow","value":1}},{"source":"477","target":"422","attributes":{"source":477,"target":422,"type":"arrow","value":1}},{"source":"4","target":"355","attributes":{"source":4,"target":355,"type":"arrow","value":1}},{"source":"99","target":"391","attributes":{"source":99,"target":391,"type":"arrow","value":1}},{"source":"432","target":"296","attributes":{"source":432,"target":296,"type":"arrow","value":1}},{"source":"166","target":"491","attributes":{"source":166,"target":491,"type":"arrow","value":1}},{"source":"307","target":"50","attributes":{"source":307,"target":50,"type":"arrow","value":1}},{"source":"499","target":"415","attributes":{"source":499,"target":415,"type":"arrow","value":1}},{"source":"424","target":"388","attributes":{"source":424,"target":388,"type":"arrow","value":1}},{"source":"509","target":"270","attributes":{"source":509,"target":270,"type":"arrow","value":1}},{"source":"377","target":"493","attributes":{"source":377,"target":493,"type":"arrow","value":1}},{"source":"382","target":"172","attributes":{"source":382,"target":172,"type":"arrow","value":1}},{"source":"367","target":"283","attributes":{"source":367,"target":283,"type":"arrow","value":1}},{"source":"36","target":"341","attributes":{"source":36,"target":341,"type":"arrow","value":1}},{"source":"424","target":"288","attributes":{"source":424,"target":288,"type":"arrow","value":1}},{"source":"183","target":"351","attributes":{"source":183,"target":351,"type":"arrow","value":1}},{"source":"117","target":"46","attributes":{"source":117,"target":46,"type":"arrow","value":1}},{"source":"6","target":"389","attributes":{"source":6,"target":389,"type":"arrow","value":1}},{"source":"520","target":"38","attributes":{"source":520,"target":38,"type":"arrow","value":1}},{"source":"201","target":"120","attributes":{"source":201,"target":120,"type":"arrow","value":1}},{"source":"341","target":"52","attributes":{"source":341,"target":52,"type":"arrow","value":1}},{"source":"256","target":"111","attributes":{"source":256,"target":111,"type":"arrow","value":1}},{"source":"502","target":"160","attributes":{"source":502,"target":160,"type":"arrow","value":1}},{"source":"314","target":"305","attributes":{"source":314,"target":305,"type":"arrow","value":1}},{"source":"267","target":"254","attributes":{"source":267,"target":254,"type":"arrow","value":1}},{"source":"525","target":"446","attributes":{"source":525,"target":446,"type":"arrow","value":1}},{"source":"124","target":"143","attributes":{"source":124,"target":143,"type":"arrow","value":1}},{"source":"19","target":"286","attributes":{"source":19,"target":286,"type":"arrow","value":1}},{"source":"247","target":"17","attributes":{"source":247,"target":17,"type":"arrow","value":1}},{"source":"58","target":"436","attributes":{"source":58,"target":436,"type":"arrow","value":1}},{"source":"476","target":"77","attributes":{"source":476,"target":77,"type":"arrow","value":1}},{"source":"399","target":"440","attributes":{"source":399,"target":440,"type":"arrow","value":1}},{"source":"291","target":"481","attributes":{"source":291,"target":481,"type":"arrow","value":1}},{"source":"21","target":"432","attributes":{"source":21,"target":432,"type":"arrow","value":1}},{"source":"276","target":"215","attributes":{"source":276,"target":215,"type":"arrow","value":1}},{"source":"394","target":"121","attributes":{"source":394,"target":121,"type":"arrow","value":1}},{"source":"387","target":"129","attributes":{"source":387,"target":129,"type":"arrow","value":1}},{"source":"53","target":"191","attributes":{"source":53,"target":191,"type":"arrow","value":1}},{"source":"153","target":"348","attributes":{"source":153,"target":348,"type":"arrow","value":1}},{"source":"124","target":"336","attributes":{"source":124,"target":336,"type":"arrow","value":1}},{"source":"307","target":"87","attributes":{"source":307,"target":87,"type":"arrow","value":1}},{"source":"349","target":"105","attributes":{"source":349,"target":105,"type":"arrow","value":1}},{"source":"516","target":"137","attributes":{"source":516,"target":137,"type":"arrow","value":1}},{"source":"393","target":"170","attributes":{"source":393,"target":170,"type":"arrow","value":1}},{"source":"212","target":"224","attributes":{"source":212,"target":224,"type":"arrow","value":1}},{"source":"207","target":"40","attributes":{"source":207,"target":40,"type":"arrow","value":1}},{"source":"18","target":"257","attributes":{"source":18,"target":257,"type":"arrow","value":1}},{"source":"486","target":"478","attributes":{"source":486,"target":478,"type":"arrow","value":1}},{"source":"175","target":"85","attributes":{"source":175,"target":85,"type":"arrow","value":1}},{"source":"99","target":"24","attributes":{"source":99,"target":24,"type":"arrow","value":1}},{"source":"6","target":"234","attributes":{"source":6,"target":234,"type":"arrow","value":1}},{"source":"503","target":"51","attributes":{"source":503,"target":51,"type":"arrow","value":1}},{"source":"306","target":"388","attributes":{"source":306,"target":388,"type":"arrow","value":1}},{"source":"416","target":"214","attributes":{"source":416,"target":214,"type":"arrow","value":1}},{"source":"439","target":"87","attributes":{"source":439,"target":87,"type":"arrow","value":1}},{"source":"130","target":"451","attributes":{"source":130,"target":451,"type":"arrow","value":1}},{"source":"500","target":"447","attributes":{"source":500,"target":447,"type":"arrow","value":1}},{"source":"282","target":"490","attributes":{"source":282,"target":490,"type":"arrow","value":1}},{"source":"282","target":"41","attributes":{"source":282,"target":41,"type":"arrow","value":1}},{"source":"433","target":"397","attributes":{"source":433,"target":397,"type":"arrow","value":1}},{"source":"104","target":"264","attributes":{"source":104,"target":264,"type":"arrow","value":1}},{"source":"114","target":"113","attributes":{"source":114,"target":113,"type":"arrow","value":1}},{"source":"430","target":"301","attributes":{"source":430,"target":301,"type":"arrow","value":1}},{"source":"311","target":"119","attributes":{"source":311,"target":119,"type":"arrow","value":1}},{"source":"106","target":"68","attributes":{"source":106,"target":68,"type":"arrow","value":1}},{"source":"485","target":"439","attributes":{"source":485,"target":439,"type":"arrow","value":1}},{"source":"461","target":"157","attributes":{"source":461,"target":157,"type":"arrow","value":1}},{"source":"151","target":"106","attributes":{"source":151,"target":106,"type":"arrow","value":1}},{"source":"350","target":"252","attributes":{"source":350,"target":252,"type":"arrow","value":1}},{"source":"369","target":"2","attributes":{"source":369,"target":2,"type":"arrow","value":1}},{"source":"73","target":"127","attributes":{"source":73,"target":127,"type":"arrow","value":1}},{"source":"487","target":"21","attributes":{"source":487,"target":21,"type":"arrow","value":1}},{"source":"344","target":"465","attributes":{"source":344,"target":465,"type":"arrow","value":1}},{"source":"180","target":"400","attributes":{"source":180,"target":400,"type":"arrow","value":1}},{"source":"524","target":"516","attributes":{"source":524,"target":516,"type":"arrow","value":1}},{"source":"418","target":"516","attributes":{"source":418,"target":516,"type":"arrow","value":1}},{"source":"365","target":"142","attributes":{"source":365,"target":142,"type":"arrow","value":1}},{"source":"45","target":"382","attributes":{"source":45,"target":382,"type":"arrow","value":1}},{"source":"387","target":"400","attributes":{"source":387,"target":400,"type":"arrow","value":1}},{"source":"491","target":"45","attributes":{"source":491,"target":45,"type":"arrow","value":1}},{"source":"13","target":"218","attributes":{"source":13,"target":218,"type":"arrow","value":1}},{"source":"414","target":"440","attributes":{"source":414,"target":440,"type":"arrow","value":1}},{"source":"521","target":"89","attributes":{"source":521,"target":89,"type":"arrow","value":1}},{"source":"183","target":"412","attributes":{"source":183,"target":412,"type":"arrow","value":1}},{"source":"111","target":"129","attributes":{"source":111,"target":129,"type":"arrow","value":1}},{"source":"317","target":"90","attributes":{"source":317,"target":90,"type":"arrow","value":1}},{"source":"230","target":"355","attributes":{"source":230,"target":355,"type":"arrow","value":1}},{"source":"36","target":"355","attributes":{"source":36,"target":355,"type":"arrow","value":1}},{"source":"342","target":"204","attributes":{"source":342,"target":204,"type":"arrow","value":1}},{"source":"381","target":"490","attributes":{"source":381,"target":490,"type":"arrow","value":1}},{"source":"175","target":"138","attributes":{"source":175,"target":138,"type":"arrow","value":1}},{"source":"348","target":"357","attributes":{"source":348,"target":357,"type":"arrow","value":1}},{"source":"523","target":"90","attributes":{"source":523,"target":90,"type":"arrow","value":1}},{"source":"476","target":"437","attributes":{"source":476,"target":437,"type":"arrow","value":1}},{"source":"334","target":"170","attributes":{"source":334,"target":170,"type":"arrow","value":1}},{"source":"282","target":"113","attributes":{"source":282,"target":113,"type":"arrow","value":1}},{"source":"447","target":"156","attributes":{"source":447,"target":156,"type":"arrow","value":1}},{"source":"62","target":"36","attributes":{"source":62,"target":36,"type":"arrow","value":1}},{"source":"13","target":"246","attributes":{"source":13,"target":246,"type":"arrow","value":1}},{"source":"139","target":"364","attributes":{"source":139,"target":364,"type":"arrow","value":1}},{"source":"493","target":"343","attributes":{"source":493,"target":343,"type":"arrow","value":1}},{"source":"3","target":"105","attributes":{"source":3,"target":105,"type":"arrow","value":1}},{"source":"517","target":"254","attributes":{"source":517,"target":254,"type":"arrow","value":1}},{"source":"219","target":"50","attributes":{"source":219,"target":50,"type":"arrow","value":1}},{"source":"23","target":"306","attributes":{"source":23,"target":306,"type":"arrow","value":1}},{"source":"159","target":"94","attributes":{"source":159,"target":94,"type":"arrow","value":1}},{"source":"395","target":"143","attributes":{"source":395,"target":143,"type":"arrow","value":1}},{"source":"39","target":"161","attributes":{"source":39,"target":161,"type":"arrow","value":1}},{"source":"26","target":"210","attributes":{"source":26,"target":210,"type":"arrow","value":1}},{"source":"502","target":"30","attributes":{"source":502,"target":30,"type":"arrow","value":1}},{"source":"164","target":"502","attributes":{"source":164,"target":502,"type":"arrow","value":1}},{"source":"60","target":"44","attributes":{"source":60,"target":44,"type":"arrow","value":1}},{"source":"56","target":"121","attributes":{"source":56,"target":121,"type":"arrow","value":1}},{"source":"74","target":"205","attributes":{"source":74,"target":205,"type":"arrow","value":1}},{"source":"391","target":"325","attributes":{"source":391,"target":325,"type":"arrow","value":1}},{"source":"156","target":"93","attributes":{"source":156,"target":93,"type":"arrow","value":1}},{"source":"87","target":"226","attributes":{"source":87,"target":226,"type":"arrow","value":1}},{"source":"26","target":"130","attributes":{"source":26,"target":130,"type":"arrow","value":1}},{"source":"502","target":"27","attributes":{"source":502,"target":27,"type":"arrow","value":1}},{"source":"90","target":"439","attributes":{"source":90,"target":439,"type":"arrow","value":1}},{"source":"425","target":"310","attributes":{"source":425,"target":310,"type":"arrow","value":1}},{"source":"174","target":"234","attributes":{"source":174,"target":234,"type":"arrow","value":1}},{"source":"404","target":"261","attributes":{"source":404,"target":261,"type":"arrow","value":1}},{"source":"401","target":"248","attributes":{"source":401,"target":248,"type":"arrow","value":1}},{"source":"309","target":"158","attributes":{"source":309,"target":158,"type":"arrow","value":1}},{"source":"263","target":"60","attributes":{"source":263,"target":60,"type":"arrow","value":1}},{"source":"334","target":"19","attributes":{"source":334,"target":19,"type":"arrow","value":1}},{"source":"266","target":"217","attributes":{"source":266,"target":217,"type":"arrow","value":1}},{"source":"366","target":"154","attributes":{"source":366,"target":154,"type":"arrow","value":1}},{"source":"199","target":"70","attributes":{"source":199,"target":70,"type":"arrow","value":1}},{"source":"409","target":"509","attributes":{"source":409,"target":509,"type":"arrow","value":1}},{"source":"408","target":"172","attributes":{"source":408,"target":172,"type":"arrow","value":1}},{"source":"331","target":"394","attributes":{"source":331,"target":394,"type":"arrow","value":1}},{"source":"19","target":"33","attributes":{"source":19,"target":33,"type":"arrow","value":1}},{"source":"452","target":"495","attributes":{"source":452,"target":495,"type":"arrow","value":1}},{"source":"212","target":"390","attributes":{"source":212,"target":390,"type":"arrow","value":1}},{"source":"188","target":"284","attributes":{"source":188,"target":284,"type":"arrow","value":1}},{"source":"60","target":"398","attributes":{"source":60,"target":398,"type":"arrow","value":1}},{"source":"127","target":"257","attributes":{"source":127,"target":257,"type":"arrow","value":1}},{"source":"377","target":"508","attributes":{"source":377,"target":508,"type":"arrow","value":1}},{"source":"433","target":"249","attributes":{"source":433,"target":249,"type":"arrow","value":1}},{"source":"180","target":"478","attributes":{"source":180,"target":478,"type":"arrow","value":1}},{"source":"233","target":"397","attributes":{"source":233,"target":397,"type":"arrow","value":1}},{"source":"364","target":"244","attributes":{"source":364,"target":244,"type":"arrow","value":1}},{"source":"188","target":"47","attributes":{"source":188,"target":47,"type":"arrow","value":1}},{"source":"464","target":"312","attributes":{"source":464,"target":312,"type":"arrow","value":1}},{"source":"232","target":"85","attributes":{"source":232,"target":85,"type":"arrow","value":1}},{"source":"506","target":"250","attributes":{"source":506,"target":250,"type":"arrow","value":1}},{"source":"249","target":"335","attributes":{"source":249,"target":335,"type":"arrow","value":1}},{"source":"495","target":"57","attributes":{"source":495,"target":57,"type":"arrow","value":1}},{"source":"357","target":"451","attributes":{"source":357,"target":451,"type":"arrow","value":1}},{"source":"318","target":"185","attributes":{"source":318,"target":185,"type":"arrow","value":1}},{"source":"507","target":"149","attributes":{"source":507,"target":149,"type":"arrow","value":1}},{"source":"133","target":"138","attributes":{"source":133,"target":138,"type":"arrow","value":1}},{"source":"15","target":"221","attributes":{"source":15,"target":221,"type":"arrow","value":1}},{"source":"233","target":"408","attributes":{"source":233,"target":408,"type":"arrow","value":1}},{"source":"148","target":"486","attributes":{"source":148,"target":486,"type":"arrow","value":1}},{"source":"22","target":"188","attributes":{"source":22,"target":188,"type":"arrow","value":1}},{"source":"82","target":"13","attributes":{"source":82,"target":13,"type":"arrow","value":1}},{"source":"250","target":"279","attributes":{"source":250,"target":279,"type":"arrow","value":1}},{"source":"133","target":"43","attributes":{"source":133,"target":43,"type":"arrow","value":1}},{"source":"403","target":"431","attributes":{"source":403,"target":431,"type":"arrow","value":1}},{"source":"121","target":"155","attributes":{"source":121,"target":155,"type":"arrow","value":1}},{"source":"235","target":"92","attributes":{"source":235,"target":92,"type":"arrow","value":1}},{"source":"122","target":"300","attributes":{"source":122,"target":300,"type":"arrow","value":1}},{"source":"267","target":"366","attributes":{"source":267,"target":366,"type":"arrow","value":1}},{"source":"28","target":"52","attributes":{"source":28,"target":52,"type":"arrow","value":1}},{"source":"211","target":"283","attributes":{"source":211,"target":283,"type":"arrow","value":1}},{"source":"398","target":"114","attributes":{"source":398,"target":114,"type":"arrow","value":1}},{"source":"238","target":"112","attributes":{"source":238,"target":112,"type":"arrow","value":1}},{"source":"122","target":"56","attributes":{"source":122,"target":56,"type":"arrow","value":1}},{"source":"63","target":"384","attributes":{"source":63,"target":384,"type":"arrow","value":1}},{"source":"386","target":"320","attributes":{"source":386,"target":320,"type":"arrow","value":1}},{"source":"92","target":"229","attributes":{"source":92,"target":229,"type":"arrow","value":1}},{"source":"93","target":"60","attributes":{"source":93,"target":60,"type":"arrow","value":1}},{"source":"525","target":"31","attributes":{"source":525,"target":31,"type":"arrow","value":1}},{"source":"215","target":"286","attributes":{"source":215,"target":286,"type":"arrow","value":1}},{"source":"494","target":"185","attributes":{"source":494,"target":185,"type":"arrow","value":1}},{"source":"476","target":"499","attributes":{"source":476,"target":499,"type":"arrow","value":1}},{"source":"170","target":"331","attributes":{"source":170,"target":331,"type":"arrow","value":1}},{"source":"293","target":"253","attributes":{"source":293,"target":253,"type":"arrow","value":1}},{"source":"495","target":"208","attributes":{"source":495,"target":208,"type":"arrow","value":1}},{"source":"126","target":"46","attributes":{"source":126,"target":46,"type":"arrow","value":1}},{"source":"222","target":"153","attributes":{"source":222,"target":153,"type":"arrow","value":1}},{"source":"236","target":"454","attributes":{"source":236,"target":454,"type":"arrow","value":1}},{"source":"266","target":"154","attributes":{"source":266,"target":154,"type":"arrow","value":1}},{"source":"470","target":"135","attributes":{"source":470,"target":135,"type":"arrow","value":1}},{"source":"94","target":"104","attributes":{"source":94,"target":104,"type":"arrow","value":1}},{"source":"340","target":"418","attributes":{"source":340,"target":418,"type":"arrow","value":1}},{"source":"4","target":"396","attributes":{"source":4,"target":396,"type":"arrow","value":1}}]}');var s=r(524),u=r(973);const d=2*Math.PI/3,c=4*Math.PI/3;class h extends u.AbstractProgram{constructor(t){super(t,"attribute vec2 a_position;\nattribute float a_size;\nattribute float a_angle;\nattribute vec4 a_color;\n\nuniform mat3 u_matrix;\nuniform float u_sqrtZoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\nvarying vec2 v_diffVector;\nvarying float v_radius;\nvarying float v_border;\n\nconst float bias = 255.0 / 254.0;\nconst float marginRatio = 1.05;\n\nvoid main() {\n  float size = a_size * u_correctionRatio * u_sqrtZoomRatio * 4.0;\n  vec2 diffVector = size * vec2(cos(a_angle), sin(a_angle));\n  vec2 position = a_position + diffVector * marginRatio;\n  gl_Position = vec4(\n    (u_matrix * vec3(position, 1)).xy,\n    0,\n    1\n  );\n\n  v_border = u_correctionRatio * u_sqrtZoomRatio * u_sqrtZoomRatio;\n  v_diffVector = diffVector;\n  v_radius = size / 2.0 / marginRatio;\n\n  v_color = a_color;\n  v_color.a *= bias;\n}","#ifdef GL_FRAGMENT_PRECISION_HIGH\n   precision highp float;\n#else\n   precision mediump float;\n#endif\n\nvarying vec4 v_color;\nvarying vec2 v_diffVector;\nvarying float v_radius;\nvarying float v_border;\n\nconst vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\n\nvoid main(void) {\n  float dist = length(v_diffVector) - v_radius;\n\n  float t = 0.0;\n  if (dist > v_border)\n    t = 1.0;\n  else if (dist > 0.0)\n    t = dist / v_border;\n\n  gl_FragColor = mix(v_color, transparent, t);\n}",3,5),this.positionLocation=t.getAttribLocation(this.program,"a_position"),this.sizeLocation=t.getAttribLocation(this.program,"a_size"),this.colorLocation=t.getAttribLocation(this.program,"a_color"),this.angleLocation=t.getAttribLocation(this.program,"a_angle");const e=t.getUniformLocation(this.program,"u_matrix");if(null===e)throw new Error("AbstractNodeProgram: error while getting matrixLocation");this.matrixLocation=e;const r=t.getUniformLocation(this.program,"u_sqrtZoomRatio");if(null===r)throw new Error("NodeProgram: error while getting sqrtZoomRatioLocation");this.sqrtZoomRatioLocation=r;const i=t.getUniformLocation(this.program,"u_correctionRatio");if(null===i)throw new Error("NodeProgram: error while getting correctionRatioLocation");this.correctionRatioLocation=i,this.bind()}bind(){const t=this.gl;t.enableVertexAttribArray(this.positionLocation),t.enableVertexAttribArray(this.sizeLocation),t.enableVertexAttribArray(this.colorLocation),t.enableVertexAttribArray(this.angleLocation),t.vertexAttribPointer(this.positionLocation,2,t.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,0),t.vertexAttribPointer(this.sizeLocation,1,t.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,8),t.vertexAttribPointer(this.colorLocation,4,t.UNSIGNED_BYTE,!0,this.attributes*Float32Array.BYTES_PER_ELEMENT,12),t.vertexAttribPointer(this.angleLocation,1,t.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,16)}process(t,e,r){const i=this.array;let a=3*r*5;if(e){for(let t=a+15;a<t;a++)i[a]=0;return}const o=(0,s.floatColor)(t.color);i[a++]=t.x,i[a++]=t.y,i[a++]=t.size,i[a++]=o,i[a++]=0,i[a++]=t.x,i[a++]=t.y,i[a++]=t.size,i[a++]=o,i[a++]=d,i[a++]=t.x,i[a++]=t.y,i[a++]=t.size,i[a++]=o,i[a]=c}render(t){if(this.hasNothingToRender())return;const e=this.gl,r=this.program;e.useProgram(r),e.uniformMatrix3fv(this.matrixLocation,!1,t.matrix),e.uniform1f(this.sqrtZoomRatioLocation,Math.sqrt(t.ratio)),e.uniform1f(this.correctionRatioLocation,t.correctionRatio),e.drawArrays(e.TRIANGLES,0,this.array.length/5)}}class l{constructor(t){this.state={searchQuery:""},this.rootelement=t,this.sigmaContainer=t.querySelector("#sigma-container"),this.searchWindowInputContainer=t.querySelector("#search-input"),this.searchWindowDatalist=t.querySelector("#suggestions")}setSearchQuery(t){if(this.state.searchQuery=t,this.searchWindowInputContainer.value!==t&&(this.searchWindowInputContainer.value=t),t){const r=t.toLowerCase();var e=this.graph.nodes().map((t=>({id:t,label:this.graph.getNodeAttribute(t,"label")}))).filter((({label:t})=>t.toLowerCase().includes(r)));if(e[0].label===t){this.state.selectedNode=e[0].id,this.state.suggestions=void 0;const t=this.renderer.getNodeDisplayData(this.state.selectedNode);this.renderer.getCamera().animate(t,{duration:500})}else this.state.selectedNode=void 0,this.state.suggestions=new Set(e.map((({id:t})=>t)))}else this.state.selectedNode=void 0,this.state.suggestions=void 0;this.renderer.refresh()}setHoveredNode(t){t?(this.state.hoveredNode=t,this.graph.getNodeAttribute(t,"train_id"),this.state.hoveredNeighbors=this.filterNodesForGivenTarget(t)):(this.state.hoveredNode=void 0,this.state.hoveredNeighbors=void 0),this.renderer.refresh()}filterNodesForGivenTarget(t){const e=this.graph.getNodeAttribute(t,"train_id");let r=new Set;return r.add(e),this.graph.mapEdges((t=>{const i=this.graph.getEdgeAttribute(t,"train_id_source"),a=this.graph.getEdgeAttribute(t,"train_id_target");i===e?r.add(a):a===e&&r.add(i)})),r=new Set(this.graph.filterNodes((t=>r.has(this.graph.getNodeAttribute(t,"train_id")))))}createSigmaGraph(){var t;this.graph=new(e()),this.graph.import(n);var r=0;this.graph.forEachNode(((e,i)=>{let a=this.graph.getNodeAttribute(e,"train_id");t===a?r++:(t=a,r=0),this.graph.setNodeAttribute(e,"x",r/2).setNodeAttribute(e,"y",a/2);let o="Train:"+a;this.graph.mergeNodeAttributes(e,{label:o}).setNodeAttribute(e,"color","#000000").setNodeAttribute(e,"type","square")})),this.graph.forEachEdge((t=>{const e=this.graph.findNode((e=>e===this.graph.source(t))),r=this.graph.findNode((e=>e===this.graph.target(t)));this.graph.setEdgeAttribute(t,"type","arrow").setEdgeAttribute(t,"train_id_source",this.graph.getNodeAttribute(e,"train_id")).setEdgeAttribute(t,"train_id_target",this.graph.getNodeAttribute(r,"train_id")).setEdgeAttribute(t,"size","3")})),this.renderer=new(o())(this.graph,this.sigmaContainer,{allowInvalidContainer:!0,nodeProgramClasses:{square:h},renderEdgeLabels:!0});for(var i=this.graph.nodes().map((t=>this.graph.getNodeAttribute(t,"label"))),a=i[0],s=1;s<i.length;)i[s]===a?i.splice(s,1):a=i[s++];this.searchWindowDatalist.innerHTML=i.map((t=>`<option value="${t}"></option>`)).join("\n"),this.searchWindowInputContainer.addEventListener("input",(()=>{this.setSearchQuery(this.searchWindowInputContainer.value||"")})),this.searchWindowInputContainer.addEventListener("blur",(()=>{this.setSearchQuery("")})),this.renderer.on("enterNode",(({node:t})=>{this.setHoveredNode(t)})),this.renderer.on("leaveNode",(()=>{this.setHoveredNode(void 0)})),this.renderer.setSetting("nodeReducer",((t,e)=>{const r=Object.assign({},e);return this.state.hoveredNeighbors&&!this.state.hoveredNeighbors.has(t)&&this.state.hoveredNode!==t&&(r.label="",r.color="#f6f6f6"),this.state.selectedNode===t?r.highlighted=!0:this.state.suggestions&&!this.state.suggestions.has(t)&&(r.label="",r.color="#f6f6f6"),r})),this.renderer.setSetting("edgeReducer",((t,e)=>{const r=Object.assign({},e);return this.state.hoveredNode&&!this.graph.hasExtremity(t,this.state.hoveredNode)&&(r.hidden=!0),!this.state.suggestions||this.state.suggestions.has(this.graph.source(t))&&this.state.suggestions.has(this.graph.target(t))||(r.hidden=!0),r}))}resizeSigmaGraph(){void 0!==this.renderer?this.renderer.refresh():console.log("graph doesn't exist!")}destroySigmaGraph(){void 0!==this.renderer&&(this.renderer.clear(),this.renderer.kill(),this.rootelement.removeChild(this.sigmaContainer))}}})(),i})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUtrYyxXQUNQbGMsS0FBS2tjLFNBQVNoUixRQUNkbEwsS0FBS2tjLFNBQVMyQixPQUNkN2QsS0FBSzB5QyxZQUFZcFEsWUFBWXRpQyxLQUFLNHlDLGdCQUV0QyxFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL0B5b21ndWl0aGVyZWFsL2hlbHBlcnMvZXh0ZW5kLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvZ3JhcGhvbG9neS11dGlscy9pcy1ncmFwaC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9ncmFwaG9sb2d5L2Rpc3QvZ3JhcGhvbG9neS51bWQubWluLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL2NvcmUvY2FtZXJhLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL2NvcmUvY2FwdG9ycy9jYXB0b3IuanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvc2lnbWEvY29yZS9jYXB0b3JzL21vdXNlLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL2NvcmUvY2FwdG9ycy90b3VjaC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS9jb3JlL2xhYmVscy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS9jb3JlL3F1YWR0cmVlLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL2luZGV4LmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL3JlbmRlcmluZy9jYW52YXMvZWRnZS1sYWJlbC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS9yZW5kZXJpbmcvY2FudmFzL2hvdmVyLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL3JlbmRlcmluZy9jYW52YXMvbGFiZWwuanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvc2lnbWEvcmVuZGVyaW5nL3dlYmdsL3Byb2dyYW1zL2NvbW1vbi9lZGdlLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL3JlbmRlcmluZy93ZWJnbC9wcm9ncmFtcy9jb21tb24vbm9kZS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS9yZW5kZXJpbmcvd2ViZ2wvcHJvZ3JhbXMvY29tbW9uL3Byb2dyYW0uanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvc2lnbWEvcmVuZGVyaW5nL3dlYmdsL3Byb2dyYW1zL2VkZ2UuYXJyb3cuanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvc2lnbWEvcmVuZGVyaW5nL3dlYmdsL3Byb2dyYW1zL2VkZ2UuYXJyb3dIZWFkLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL3JlbmRlcmluZy93ZWJnbC9wcm9ncmFtcy9lZGdlLmNsYW1wZWQuanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvc2lnbWEvcmVuZGVyaW5nL3dlYmdsL3Byb2dyYW1zL2VkZ2UuanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvc2lnbWEvcmVuZGVyaW5nL3dlYmdsL3Byb2dyYW1zL25vZGUuZmFzdC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS9yZW5kZXJpbmcvd2ViZ2wvc2hhZGVycy9lZGdlLmFycm93SGVhZC5mcmFnLmdsc2wuanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvc2lnbWEvcmVuZGVyaW5nL3dlYmdsL3NoYWRlcnMvZWRnZS5hcnJvd0hlYWQudmVydC5nbHNsLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL3JlbmRlcmluZy93ZWJnbC9zaGFkZXJzL2VkZ2UuY2xhbXBlZC52ZXJ0Lmdsc2wuanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvc2lnbWEvcmVuZGVyaW5nL3dlYmdsL3NoYWRlcnMvZWRnZS5mcmFnLmdsc2wuanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvc2lnbWEvcmVuZGVyaW5nL3dlYmdsL3NoYWRlcnMvZWRnZS52ZXJ0Lmdsc2wuanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvc2lnbWEvcmVuZGVyaW5nL3dlYmdsL3NoYWRlcnMvbm9kZS5mYXN0LmZyYWcuZ2xzbC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS9yZW5kZXJpbmcvd2ViZ2wvc2hhZGVycy9ub2RlLmZhc3QudmVydC5nbHNsLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL3JlbmRlcmluZy93ZWJnbC9zaGFkZXJzL3V0aWxzLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL3NldHRpbmdzLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL3NpZ21hLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL3R5cGVzLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL3V0aWxzL2FuaW1hdGUuanMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9ub2RlX21vZHVsZXMvc2lnbWEvdXRpbHMvZGF0YS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS91dGlscy9lYXNpbmdzLmpzIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vbm9kZV9tb2R1bGVzL3NpZ21hL3V0aWxzL2VkZ2UtY29sbGlzaW9ucy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS91dGlscy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL25vZGVfbW9kdWxlcy9zaWdtYS91dGlscy9tYXRyaWNlcy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vY29tcG9uZW50cy9vcmRlcmluZ19ncmFwaC9ub2RlLnNxdWFyZS50cyIsIndlYnBhY2s6Ly93ZWJwYWNrU2lnbWFHcmFwaC8uL2NvbXBvbmVudHMvb3JkZXJpbmdfZ3JhcGgvbm9kZS5zcXVhcmUudmVydC5nbHNsIiwid2VicGFjazovL3dlYnBhY2tTaWdtYUdyYXBoLy4vY29tcG9uZW50cy9vcmRlcmluZ19ncmFwaC9ub2RlLnNxdWFyZS5mcmFnLmdsc2wiLCJ3ZWJwYWNrOi8vd2VicGFja1NpZ21hR3JhcGgvLi9jb21wb25lbnRzL29yZGVyaW5nX2dyYXBoL3NpZ21hX2dyYXBoLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIndlYnBhY2tTaWdtYUdyYXBoXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIndlYnBhY2tTaWdtYUdyYXBoXCJdID0gZmFjdG9yeSgpO1xufSkoc2VsZiwgKCkgPT4ge1xucmV0dXJuICIsIi8qKlxuICogRXh0ZW5kIGZ1bmN0aW9uXG4gKiA9PT09PT09PT09PT09PT09XG4gKlxuICogRnVuY3Rpb24gdXNlZCB0byBwdXNoIGEgYnVuY2ggb2YgdmFsdWVzIGludG8gYW4gYXJyYXkgYXQgb25jZS5cbiAqXG4gKiBJdHMgc3RyYXRlZ3kgaXMgdG8gbXV0YXRlIHRhcmdldCBhcnJheSdzIGxlbmd0aCB0aGVuIHNldHRpbmcgdGhlIG5ldyBpbmRpY2VzXG4gKiB0byBiZSB0aGUgdmFsdWVzIHRvIGFkZC5cbiAqXG4gKiBBIGJlbmNobWFyayBwcm92ZWQgdGhhdCBpdCBpcyBmYXN0ZXIgdGhhbiB0aGUgZm9sbG93aW5nIHN0cmF0ZWdpZXM6XG4gKiAgIDEpIGBhcnJheS5wdXNoLmFwcGx5KGFycmF5LCB2YWx1ZXMpYC5cbiAqICAgMikgQSBsb29wIG9mIHB1c2hlcy5cbiAqICAgMykgYGFycmF5ID0gYXJyYXkuY29uY2F0KHZhbHVlcylgLCBvYnZpb3VzbHkuXG4gKlxuICogSW50dWl0aXZlbHksIHRoaXMgaXMgY29ycmVjdCBiZWNhdXNlIHdoZW4gYWRkaW5nIGEgbG90IG9mIGVsZW1lbnRzLCB0aGVcbiAqIGNob3NlbiBzdHJhdGVnaWVzIGRvZXMgbm90IG5lZWQgdG8gaGFuZGxlIHRoZSBgYXJndW1lbnRzYCBvYmplY3QgdG9cbiAqIGV4ZWN1dGUgIy5hcHBseSdzIHZhcmlhZGljaXR5IGFuZCBiZWNhdXNlIHRoZSBhcnJheSBrbm93IGl0cyBmaW5hbCBsZW5ndGhcbiAqIGF0IHRoZSBiZWdpbm5pbmcsIGF2b2lkaW5nIHBvdGVudGlhbCBtdWx0aXBsZSByZWFsbG9jYXRpb25zIG9mIHRoZSB1bmRlcmx5aW5nXG4gKiBjb250aWd1b3VzIGFycmF5LiBTb21lIGVuZ2luZXMgbWF5IGJlIGFibGUgdG8gb3B0aW1pemUgdGhlIGxvb3Agb2YgcHVzaFxuICogb3BlcmF0aW9ucyBidXQgZW1waXJpY2FsbHkgdGhleSBkb24ndCBzZWVtIHRvIGRvIHNvLlxuICovXG5cbi8qKlxuICogRXh0ZW5kcyB0aGUgdGFyZ2V0IGFycmF5IHdpdGggdGhlIGdpdmVuIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0gIHthcnJheX0gYXJyYXkgIC0gVGFyZ2V0IGFycmF5LlxuICogQHBhcmFtICB7YXJyYXl9IHZhbHVlcyAtIFZhbHVlcyB0byBhZGQuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXh0ZW5kKGFycmF5LCB2YWx1ZXMpIHtcbiAgdmFyIGwyID0gdmFsdWVzLmxlbmd0aDtcblxuICBpZiAobDIgPT09IDApXG4gICAgcmV0dXJuO1xuXG4gIHZhciBsMSA9IGFycmF5Lmxlbmd0aDtcblxuICBhcnJheS5sZW5ndGggKz0gbDI7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsMjsgaSsrKVxuICAgIGFycmF5W2wxICsgaV0gPSB2YWx1ZXNbaV07XG59O1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFIgPSB0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgPyBSZWZsZWN0IDogbnVsbFxudmFyIFJlZmxlY3RBcHBseSA9IFIgJiYgdHlwZW9mIFIuYXBwbHkgPT09ICdmdW5jdGlvbidcbiAgPyBSLmFwcGx5XG4gIDogZnVuY3Rpb24gUmVmbGVjdEFwcGx5KHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpIHtcbiAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwodGFyZ2V0LCByZWNlaXZlciwgYXJncyk7XG4gIH1cblxudmFyIFJlZmxlY3RPd25LZXlzXG5pZiAoUiAmJiB0eXBlb2YgUi5vd25LZXlzID09PSAnZnVuY3Rpb24nKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gUi5vd25LZXlzXG59IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KVxuICAgICAgLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpO1xuICB9O1xufSBlbHNlIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gUHJvY2Vzc0VtaXRXYXJuaW5nKHdhcm5pbmcpIHtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuKSBjb25zb2xlLndhcm4od2FybmluZyk7XG59XG5cbnZhciBOdW1iZXJJc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBOdW1iZXJJc05hTih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIEV2ZW50RW1pdHRlci5pbml0LmNhbGwodGhpcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbm1vZHVsZS5leHBvcnRzLm9uY2UgPSBvbmNlO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50ID0gMDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxudmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuZnVuY3Rpb24gY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcikge1xuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgJ2RlZmF1bHRNYXhMaXN0ZW5lcnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInIHx8IGFyZyA8IDAgfHwgTnVtYmVySXNOYU4oYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgYXJnICsgJy4nKTtcbiAgICB9XG4gICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZztcbiAgfVxufSk7XG5cbkV2ZW50RW1pdHRlci5pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKHRoaXMuX2V2ZW50cyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXJJc05hTihuKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIG4gKyAnLicpO1xuICB9XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gX2dldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gX2dldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpO1xuXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZClcbiAgICBkb0Vycm9yID0gKGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQpO1xuICBlbHNlIGlmICghZG9FcnJvcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAoZG9FcnJvcikge1xuICAgIHZhciBlcjtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAwKVxuICAgICAgZXIgPSBhcmdzWzBdO1xuICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3dcbiAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9XG4gICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuaGFuZGxlZCBlcnJvci4nICsgKGVyID8gJyAoJyArIGVyLm1lc3NhZ2UgKyAnKScgOiAnJykpO1xuICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICB9XG5cbiAgdmFyIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgUmVmbGVjdEFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBSZWZsZWN0QXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHtcbiAgdmFyIG07XG4gIHZhciBldmVudHM7XG4gIHZhciBleGlzdGluZztcblxuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFyZ2V0LmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyID8gbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgICAgIC8vIFJlLWFzc2lnbiBgZXZlbnRzYCBiZWNhdXNlIGEgbmV3TGlzdGVuZXIgaGFuZGxlciBjb3VsZCBoYXZlIGNhdXNlZCB0aGVcbiAgICAgIC8vIHRoaXMuX2V2ZW50cyB0byBiZSBhc3NpZ25lZCB0byBhIG5ldyBvYmplY3RcbiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICAgIH1cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTtcbiAgfVxuXG4gIGlmIChleGlzdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9XG4gICAgICAgIHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIH0gZWxzZSBpZiAocHJlcGVuZCkge1xuICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgbSA9IF9nZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICBpZiAobSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSAmJiAhZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgLy8gTm8gZXJyb3IgY29kZSBmb3IgdGhpcyBzaW5jZSBpdCBpcyBhIFdhcm5pbmdcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLmxlbmd0aCArICcgJyArIFN0cmluZyh0eXBlKSArICcgbGlzdGVuZXJzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgIHcubmFtZSA9ICdNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmcnO1xuICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgIHcuY291bnQgPSBleGlzdGluZy5sZW5ndGg7XG4gICAgICBQcm9jZXNzRW1pdFdhcm5pbmcodyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBvbmNlV3JhcHBlcigpIHtcbiAgaWYgKCF0aGlzLmZpcmVkKSB7XG4gICAgdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLndyYXBGbik7XG4gICAgdGhpcy5maXJlZCA9IHRydWU7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5hcHBseSh0aGlzLnRhcmdldCwgYXJndW1lbnRzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgc3RhdGUgPSB7IGZpcmVkOiBmYWxzZSwgd3JhcEZuOiB1bmRlZmluZWQsIHRhcmdldDogdGFyZ2V0LCB0eXBlOiB0eXBlLCBsaXN0ZW5lcjogbGlzdGVuZXIgfTtcbiAgdmFyIHdyYXBwZWQgPSBvbmNlV3JhcHBlci5iaW5kKHN0YXRlKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZS53cmFwRm4gPSB3cmFwcGVkO1xuICByZXR1cm4gd3JhcHBlZDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcbiAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gMClcbiAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpXG4gICAgICAgICAgZXZlbnRzW3R5cGVdID0gbGlzdFswXTtcblxuICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGZvciAoaSA9IGxpc3RlbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5mdW5jdGlvbiBfbGlzdGVuZXJzKHRhcmdldCwgdHlwZSwgdW53cmFwKSB7XG4gIHZhciBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICBpZiAoZXZsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xuXG4gIHJldHVybiB1bndyYXAgP1xuICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIHRydWUpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnMgPSBmdW5jdGlvbiByYXdMaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3RPd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKylcbiAgICBsaXN0W2luZGV4XSA9IGxpc3RbaW5kZXggKyAxXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGFycikge1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gb25jZShlbWl0dGVyLCBuYW1lKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZnVuY3Rpb24gZXJyb3JMaXN0ZW5lcihlcnIpIHtcbiAgICAgIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIobmFtZSwgcmVzb2x2ZXIpO1xuICAgICAgcmVqZWN0KGVycik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZXIoKSB7XG4gICAgICBpZiAodHlwZW9mIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBlcnJvckxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICB9O1xuXG4gICAgZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIHJlc29sdmVyLCB7IG9uY2U6IHRydWUgfSk7XG4gICAgaWYgKG5hbWUgIT09ICdlcnJvcicpIHtcbiAgICAgIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGVycm9yTGlzdGVuZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlcihlbWl0dGVyLCBoYW5kbGVyLCBmbGFncykge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgJ2Vycm9yJywgaGFuZGxlciwgZmxhZ3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCBuYW1lLCBsaXN0ZW5lciwgZmxhZ3MpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLm9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKGZsYWdzLm9uY2UpIHtcbiAgICAgIGVtaXR0ZXIub25jZShuYW1lLCBsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVtaXR0ZXIub24obmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gRXZlbnRUYXJnZXQgZG9lcyBub3QgaGF2ZSBgZXJyb3JgIGV2ZW50IHNlbWFudGljcyBsaWtlIE5vZGVcbiAgICAvLyBFdmVudEVtaXR0ZXJzLCB3ZSBkbyBub3QgbGlzdGVuIGZvciBgZXJyb3JgIGV2ZW50cyBoZXJlLlxuICAgIGVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBmdW5jdGlvbiB3cmFwTGlzdGVuZXIoYXJnKSB7XG4gICAgICAvLyBJRSBkb2VzIG5vdCBoYXZlIGJ1aWx0aW4gYHsgb25jZTogdHJ1ZSB9YCBzdXBwb3J0IHNvIHdlXG4gICAgICAvLyBoYXZlIHRvIGRvIGl0IG1hbnVhbGx5LlxuICAgICAgaWYgKGZsYWdzLm9uY2UpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIHdyYXBMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICBsaXN0ZW5lcihhcmcpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImVtaXR0ZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRXZlbnRFbWl0dGVyLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgZW1pdHRlcik7XG4gIH1cbn1cbiIsIi8qKlxuICogR3JhcGhvbG9neSBpc0dyYXBoXG4gKiA9PT09PT09PT09PT09PT09PT09XG4gKlxuICogVmVyeSBzaW1wbGUgZnVuY3Rpb24gYWltaW5nIGF0IGVuc3VyaW5nIHRoZSBnaXZlbiB2YXJpYWJsZSBpcyBhXG4gKiBncmFwaG9sb2d5IGluc3RhbmNlLlxuICovXG5cbi8qKlxuICogQ2hlY2tpbmcgdGhlIHZhbHVlIGlzIGEgZ3JhcGhvbG9neSBpbnN0YW5jZS5cbiAqXG4gKiBAcGFyYW0gIHthbnl9ICAgICB2YWx1ZSAtIFRhcmdldCB2YWx1ZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNHcmFwaCh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHZhbHVlICE9PSBudWxsICYmXG4gICAgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuICAgIHR5cGVvZiB2YWx1ZS5hZGRVbmRpcmVjdGVkRWRnZVdpdGhLZXkgPT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgdmFsdWUuZHJvcE5vZGUgPT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgdmFsdWUubXVsdGkgPT09ICdib29sZWFuJ1xuICApO1xufTtcbiIsIiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGUpOih0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6dHx8c2VsZikuZ3JhcGhvbG9neT1lKCl9KHRoaXMsKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdChlKXtyZXR1cm4gdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSx0KGUpfWZ1bmN0aW9uIGUodCxlKXt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUucHJvdG90eXBlKSx0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj10LHIodCxlKX1mdW5jdGlvbiBuKHQpe3JldHVybiBuPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfSxuKHQpfWZ1bmN0aW9uIHIodCxlKXtyZXR1cm4gcj1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9LHIodCxlKX1mdW5jdGlvbiBpKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19ZnVuY3Rpb24gbyh0LGUsbil7cmV0dXJuIG89aSgpP1JlZmxlY3QuY29uc3RydWN0LmJpbmQoKTpmdW5jdGlvbih0LGUsbil7dmFyIGk9W251bGxdO2kucHVzaC5hcHBseShpLGUpO3ZhciBvPW5ldyhGdW5jdGlvbi5iaW5kLmFwcGx5KHQsaSkpO3JldHVybiBuJiZyKG8sbi5wcm90b3R5cGUpLG99LG8uYXBwbHkobnVsbCxhcmd1bWVudHMpfWZ1bmN0aW9uIGEodCl7dmFyIGU9XCJmdW5jdGlvblwiPT10eXBlb2YgTWFwP25ldyBNYXA6dm9pZCAwO3JldHVybiBhPWZ1bmN0aW9uKHQpe2lmKG51bGw9PT10fHwoaT10LC0xPT09RnVuY3Rpb24udG9TdHJpbmcuY2FsbChpKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKSkpcmV0dXJuIHQ7dmFyIGk7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7aWYodm9pZCAwIT09ZSl7aWYoZS5oYXModCkpcmV0dXJuIGUuZ2V0KHQpO2Uuc2V0KHQsYSl9ZnVuY3Rpb24gYSgpe3JldHVybiBvKHQsYXJndW1lbnRzLG4odGhpcykuY29uc3RydWN0b3IpfXJldHVybiBhLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6YSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxyKGEsdCl9LGEodCl9ZnVuY3Rpb24gYyh0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH12YXIgdT1mdW5jdGlvbigpe2Zvcih2YXIgdD1hcmd1bWVudHNbMF0sZT0xLG49YXJndW1lbnRzLmxlbmd0aDtlPG47ZSsrKWlmKGFyZ3VtZW50c1tlXSlmb3IodmFyIHIgaW4gYXJndW1lbnRzW2VdKXRbcl09YXJndW1lbnRzW2VdW3JdO3JldHVybiB0fTtmdW5jdGlvbiBkKHQsZSxuLHIpe3ZhciBpPXQuX25vZGVzLmdldChlKSxvPW51bGw7cmV0dXJuIGk/bz1cIm1peGVkXCI9PT1yP2kub3V0JiZpLm91dFtuXXx8aS51bmRpcmVjdGVkJiZpLnVuZGlyZWN0ZWRbbl06XCJkaXJlY3RlZFwiPT09cj9pLm91dCYmaS5vdXRbbl06aS51bmRpcmVjdGVkJiZpLnVuZGlyZWN0ZWRbbl06b31mdW5jdGlvbiBzKGUpe3JldHVyblwib2JqZWN0XCI9PT10KGUpJiZudWxsIT09ZSYmZS5jb25zdHJ1Y3Rvcj09PU9iamVjdH1mdW5jdGlvbiBoKHQpe3ZhciBlO2ZvcihlIGluIHQpcmV0dXJuITE7cmV0dXJuITB9ZnVuY3Rpb24gcCh0LGUsbil7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7ZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITEsd3JpdGFibGU6ITAsdmFsdWU6bn0pfWZ1bmN0aW9uIGYodCxlLG4pe3ZhciByPXtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH07XCJmdW5jdGlvblwiPT10eXBlb2Ygbj9yLmdldD1uOihyLnZhbHVlPW4sci53cml0YWJsZT0hMSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSxyKX1mdW5jdGlvbiBsKHQpe3JldHVybiEhcyh0KSYmISh0LmF0dHJpYnV0ZXMmJiFBcnJheS5pc0FycmF5KHQuYXR0cmlidXRlcykpfVwiZnVuY3Rpb25cIj09dHlwZW9mIE9iamVjdC5hc3NpZ24mJih1PU9iamVjdC5hc3NpZ24pO3ZhciBnLHk9e2V4cG9ydHM6e319LHc9XCJvYmplY3RcIj09dHlwZW9mIFJlZmxlY3Q/UmVmbGVjdDpudWxsLHY9dyYmXCJmdW5jdGlvblwiPT10eXBlb2Ygdy5hcHBseT93LmFwcGx5OmZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwodCxlLG4pfTtnPXcmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHcub3duS2V5cz93Lm93bktleXM6T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scz9mdW5jdGlvbih0KXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModCkuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModCkpfTpmdW5jdGlvbih0KXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModCl9O3ZhciBiPU51bWJlci5pc05hTnx8ZnVuY3Rpb24odCl7cmV0dXJuIHQhPXR9O2Z1bmN0aW9uIG0oKXttLmluaXQuY2FsbCh0aGlzKX15LmV4cG9ydHM9bSx5LmV4cG9ydHMub25jZT1mdW5jdGlvbih0LGUpe3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24obixyKXtmdW5jdGlvbiBpKG4pe3QucmVtb3ZlTGlzdGVuZXIoZSxvKSxyKG4pfWZ1bmN0aW9uIG8oKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LnJlbW92ZUxpc3RlbmVyJiZ0LnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIixpKSxuKFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSl9VSh0LGUsbyx7b25jZTohMH0pLFwiZXJyb3JcIiE9PWUmJmZ1bmN0aW9uKHQsZSxuKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiB0Lm9uJiZVKHQsXCJlcnJvclwiLGUsbil9KHQsaSx7b25jZTohMH0pfSkpfSxtLkV2ZW50RW1pdHRlcj1tLG0ucHJvdG90eXBlLl9ldmVudHM9dm9pZCAwLG0ucHJvdG90eXBlLl9ldmVudHNDb3VudD0wLG0ucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnM9dm9pZCAwO3ZhciBrPTEwO2Z1bmN0aW9uIF8odCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnK3R5cGVvZiB0KX1mdW5jdGlvbiBHKHQpe3JldHVybiB2b2lkIDA9PT10Ll9tYXhMaXN0ZW5lcnM/bS5kZWZhdWx0TWF4TGlzdGVuZXJzOnQuX21heExpc3RlbmVyc31mdW5jdGlvbiB4KHQsZSxuLHIpe3ZhciBpLG8sYSxjO2lmKF8obiksdm9pZCAwPT09KG89dC5fZXZlbnRzKT8obz10Ll9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0Ll9ldmVudHNDb3VudD0wKToodm9pZCAwIT09by5uZXdMaXN0ZW5lciYmKHQuZW1pdChcIm5ld0xpc3RlbmVyXCIsZSxuLmxpc3RlbmVyP24ubGlzdGVuZXI6biksbz10Ll9ldmVudHMpLGE9b1tlXSksdm9pZCAwPT09YSlhPW9bZV09biwrK3QuX2V2ZW50c0NvdW50O2Vsc2UgaWYoXCJmdW5jdGlvblwiPT10eXBlb2YgYT9hPW9bZV09cj9bbixhXTpbYSxuXTpyP2EudW5zaGlmdChuKTphLnB1c2gobiksKGk9Ryh0KSk+MCYmYS5sZW5ndGg+aSYmIWEud2FybmVkKXthLndhcm5lZD0hMDt2YXIgdT1uZXcgRXJyb3IoXCJQb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5IGxlYWsgZGV0ZWN0ZWQuIFwiK2EubGVuZ3RoK1wiIFwiK1N0cmluZyhlKStcIiBsaXN0ZW5lcnMgYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvIGluY3JlYXNlIGxpbWl0XCIpO3UubmFtZT1cIk1heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZ1wiLHUuZW1pdHRlcj10LHUudHlwZT1lLHUuY291bnQ9YS5sZW5ndGgsYz11LGNvbnNvbGUmJmNvbnNvbGUud2FybiYmY29uc29sZS53YXJuKGMpfXJldHVybiB0fWZ1bmN0aW9uIEUoKXtpZighdGhpcy5maXJlZClyZXR1cm4gdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLHRoaXMud3JhcEZuKSx0aGlzLmZpcmVkPSEwLDA9PT1hcmd1bWVudHMubGVuZ3RoP3RoaXMubGlzdGVuZXIuY2FsbCh0aGlzLnRhcmdldCk6dGhpcy5saXN0ZW5lci5hcHBseSh0aGlzLnRhcmdldCxhcmd1bWVudHMpfWZ1bmN0aW9uIEEodCxlLG4pe3ZhciByPXtmaXJlZDohMSx3cmFwRm46dm9pZCAwLHRhcmdldDp0LHR5cGU6ZSxsaXN0ZW5lcjpufSxpPUUuYmluZChyKTtyZXR1cm4gaS5saXN0ZW5lcj1uLHIud3JhcEZuPWksaX1mdW5jdGlvbiBMKHQsZSxuKXt2YXIgcj10Ll9ldmVudHM7aWYodm9pZCAwPT09cilyZXR1cm5bXTt2YXIgaT1yW2VdO3JldHVybiB2b2lkIDA9PT1pP1tdOlwiZnVuY3Rpb25cIj09dHlwZW9mIGk/bj9baS5saXN0ZW5lcnx8aV06W2ldOm4/ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBBcnJheSh0Lmxlbmd0aCksbj0wO248ZS5sZW5ndGg7KytuKWVbbl09dFtuXS5saXN0ZW5lcnx8dFtuXTtyZXR1cm4gZX0oaSk6RChpLGkubGVuZ3RoKX1mdW5jdGlvbiBTKHQpe3ZhciBlPXRoaXMuX2V2ZW50cztpZih2b2lkIDAhPT1lKXt2YXIgbj1lW3RdO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG4pcmV0dXJuIDE7aWYodm9pZCAwIT09bilyZXR1cm4gbi5sZW5ndGh9cmV0dXJuIDB9ZnVuY3Rpb24gRCh0LGUpe2Zvcih2YXIgbj1uZXcgQXJyYXkoZSkscj0wO3I8ZTsrK3IpbltyXT10W3JdO3JldHVybiBufWZ1bmN0aW9uIFUodCxlLG4scil7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdC5vbilyLm9uY2U/dC5vbmNlKGUsbik6dC5vbihlLG4pO2Vsc2V7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdC5hZGRFdmVudExpc3RlbmVyKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImVtaXR0ZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRXZlbnRFbWl0dGVyLiBSZWNlaXZlZCB0eXBlICcrdHlwZW9mIHQpO3QuYWRkRXZlbnRMaXN0ZW5lcihlLChmdW5jdGlvbiBpKG8pe3Iub25jZSYmdC5yZW1vdmVFdmVudExpc3RlbmVyKGUsaSksbihvKX0pKX19ZnVuY3Rpb24gTih0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBFcnJvcihcIm9ibGl0ZXJhdG9yL2l0ZXJhdG9yOiBleHBlY3RpbmcgYSBmdW5jdGlvbiFcIik7dGhpcy5uZXh0PXR9T2JqZWN0LmRlZmluZVByb3BlcnR5KG0sXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGt9LHNldDpmdW5jdGlvbih0KXtpZihcIm51bWJlclwiIT10eXBlb2YgdHx8dDwwfHxiKHQpKXRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyt0K1wiLlwiKTtrPXR9fSksbS5pbml0PWZ1bmN0aW9uKCl7dm9pZCAwIT09dGhpcy5fZXZlbnRzJiZ0aGlzLl9ldmVudHMhPT1PYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuX2V2ZW50c3x8KHRoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2V2ZW50c0NvdW50PTApLHRoaXMuX21heExpc3RlbmVycz10aGlzLl9tYXhMaXN0ZW5lcnN8fHZvaWQgMH0sbS5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzPWZ1bmN0aW9uKHQpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiB0fHx0PDB8fGIodCkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnK3QrXCIuXCIpO3JldHVybiB0aGlzLl9tYXhMaXN0ZW5lcnM9dCx0aGlzfSxtLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnM9ZnVuY3Rpb24oKXtyZXR1cm4gRyh0aGlzKX0sbS5wcm90b3R5cGUuZW1pdD1mdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj0xO248YXJndW1lbnRzLmxlbmd0aDtuKyspZS5wdXNoKGFyZ3VtZW50c1tuXSk7dmFyIHI9XCJlcnJvclwiPT09dCxpPXRoaXMuX2V2ZW50cztpZih2b2lkIDAhPT1pKXI9ciYmdm9pZCAwPT09aS5lcnJvcjtlbHNlIGlmKCFyKXJldHVybiExO2lmKHIpe3ZhciBvO2lmKGUubGVuZ3RoPjAmJihvPWVbMF0pLG8gaW5zdGFuY2VvZiBFcnJvcil0aHJvdyBvO3ZhciBhPW5ldyBFcnJvcihcIlVuaGFuZGxlZCBlcnJvci5cIisobz9cIiAoXCIrby5tZXNzYWdlK1wiKVwiOlwiXCIpKTt0aHJvdyBhLmNvbnRleHQ9byxhfXZhciBjPWlbdF07aWYodm9pZCAwPT09YylyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBjKXYoYyx0aGlzLGUpO2Vsc2V7dmFyIHU9Yy5sZW5ndGgsZD1EKGMsdSk7Zm9yKG49MDtuPHU7KytuKXYoZFtuXSx0aGlzLGUpfXJldHVybiEwfSxtLnByb3RvdHlwZS5hZGRMaXN0ZW5lcj1mdW5jdGlvbih0LGUpe3JldHVybiB4KHRoaXMsdCxlLCExKX0sbS5wcm90b3R5cGUub249bS5wcm90b3R5cGUuYWRkTGlzdGVuZXIsbS5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHgodGhpcyx0LGUsITApfSxtLnByb3RvdHlwZS5vbmNlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIF8oZSksdGhpcy5vbih0LEEodGhpcyx0LGUpKSx0aGlzfSxtLnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIF8oZSksdGhpcy5wcmVwZW5kTGlzdGVuZXIodCxBKHRoaXMsdCxlKSksdGhpc30sbS5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI9ZnVuY3Rpb24odCxlKXt2YXIgbixyLGksbyxhO2lmKF8oZSksdm9pZCAwPT09KHI9dGhpcy5fZXZlbnRzKSlyZXR1cm4gdGhpcztpZih2b2lkIDA9PT0obj1yW3RdKSlyZXR1cm4gdGhpcztpZihuPT09ZXx8bi5saXN0ZW5lcj09PWUpMD09LS10aGlzLl9ldmVudHNDb3VudD90aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKTooZGVsZXRlIHJbdF0sci5yZW1vdmVMaXN0ZW5lciYmdGhpcy5lbWl0KFwicmVtb3ZlTGlzdGVuZXJcIix0LG4ubGlzdGVuZXJ8fGUpKTtlbHNlIGlmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIG4pe2ZvcihpPS0xLG89bi5sZW5ndGgtMTtvPj0wO28tLSlpZihuW29dPT09ZXx8bltvXS5saXN0ZW5lcj09PWUpe2E9bltvXS5saXN0ZW5lcixpPW87YnJlYWt9aWYoaTwwKXJldHVybiB0aGlzOzA9PT1pP24uc2hpZnQoKTpmdW5jdGlvbih0LGUpe2Zvcig7ZSsxPHQubGVuZ3RoO2UrKyl0W2VdPXRbZSsxXTt0LnBvcCgpfShuLGkpLDE9PT1uLmxlbmd0aCYmKHJbdF09blswXSksdm9pZCAwIT09ci5yZW1vdmVMaXN0ZW5lciYmdGhpcy5lbWl0KFwicmVtb3ZlTGlzdGVuZXJcIix0LGF8fGUpfXJldHVybiB0aGlzfSxtLnByb3RvdHlwZS5vZmY9bS5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIsbS5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzPWZ1bmN0aW9uKHQpe3ZhciBlLG4scjtpZih2b2lkIDA9PT0obj10aGlzLl9ldmVudHMpKXJldHVybiB0aGlzO2lmKHZvaWQgMD09PW4ucmVtb3ZlTGlzdGVuZXIpcmV0dXJuIDA9PT1hcmd1bWVudHMubGVuZ3RoPyh0aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9ldmVudHNDb3VudD0wKTp2b2lkIDAhPT1uW3RdJiYoMD09LS10aGlzLl9ldmVudHNDb3VudD90aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKTpkZWxldGUgblt0XSksdGhpcztpZigwPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGksbz1PYmplY3Qua2V5cyhuKTtmb3Iocj0wO3I8by5sZW5ndGg7KytyKVwicmVtb3ZlTGlzdGVuZXJcIiE9PShpPW9bcl0pJiZ0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhpKTtyZXR1cm4gdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoXCJyZW1vdmVMaXN0ZW5lclwiKSx0aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9ldmVudHNDb3VudD0wLHRoaXN9aWYoXCJmdW5jdGlvblwiPT10eXBlb2YoZT1uW3RdKSl0aGlzLnJlbW92ZUxpc3RlbmVyKHQsZSk7ZWxzZSBpZih2b2lkIDAhPT1lKWZvcihyPWUubGVuZ3RoLTE7cj49MDtyLS0pdGhpcy5yZW1vdmVMaXN0ZW5lcih0LGVbcl0pO3JldHVybiB0aGlzfSxtLnByb3RvdHlwZS5saXN0ZW5lcnM9ZnVuY3Rpb24odCl7cmV0dXJuIEwodGhpcyx0LCEwKX0sbS5wcm90b3R5cGUucmF3TGlzdGVuZXJzPWZ1bmN0aW9uKHQpe3JldHVybiBMKHRoaXMsdCwhMSl9LG0ubGlzdGVuZXJDb3VudD1mdW5jdGlvbih0LGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHQubGlzdGVuZXJDb3VudD90Lmxpc3RlbmVyQ291bnQoZSk6Uy5jYWxsKHQsZSl9LG0ucHJvdG90eXBlLmxpc3RlbmVyQ291bnQ9UyxtLnByb3RvdHlwZS5ldmVudE5hbWVzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50PjA/Zyh0aGlzLl9ldmVudHMpOltdfSxcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiYoTi5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSksTi5vZj1mdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cyxlPXQubGVuZ3RoLG49MDtyZXR1cm4gbmV3IE4oKGZ1bmN0aW9uKCl7cmV0dXJuIG4+PWU/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOnRbbisrXX19KSl9LE4uZW1wdHk9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IE4oKGZ1bmN0aW9uKCl7cmV0dXJue2RvbmU6ITB9fSkpfSxOLmZyb21TZXF1ZW5jZT1mdW5jdGlvbih0KXt2YXIgZT0wLG49dC5sZW5ndGg7cmV0dXJuIG5ldyBOKChmdW5jdGlvbigpe3JldHVybiBlPj1uP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTp0W2UrK119fSkpfSxOLmlzPWZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2YgTnx8XCJvYmplY3RcIj09dHlwZW9mIHQmJm51bGwhPT10JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0Lm5leHR9O3ZhciBPPU4saj17fTtqLkFSUkFZX0JVRkZFUl9TVVBQT1JUPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBBcnJheUJ1ZmZlcixqLlNZTUJPTF9TVVBQT1JUPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2w7dmFyIEM9TyxNPWosej1NLkFSUkFZX0JVRkZFUl9TVVBQT1JULFc9TS5TWU1CT0xfU1VQUE9SVDt2YXIgUD1mdW5jdGlvbih0KXt2YXIgZT1mdW5jdGlvbih0KXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdHx8QXJyYXkuaXNBcnJheSh0KXx8eiYmQXJyYXlCdWZmZXIuaXNWaWV3KHQpP0MuZnJvbVNlcXVlbmNlKHQpOlwib2JqZWN0XCIhPXR5cGVvZiB0fHxudWxsPT09dD9udWxsOlcmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHRbU3ltYm9sLml0ZXJhdG9yXT90W1N5bWJvbC5pdGVyYXRvcl0oKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiB0Lm5leHQ/dDpudWxsfSh0KTtpZighZSl0aHJvdyBuZXcgRXJyb3IoXCJvYmxpdGVyYXRvcjogdGFyZ2V0IGlzIG5vdCBpdGVyYWJsZSBub3IgYSB2YWxpZCBpdGVyYXRvci5cIik7cmV0dXJuIGV9LFI9UCxLPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuLHI9YXJndW1lbnRzLmxlbmd0aD4xP2U6MS8wLGk9ciE9PTEvMD9uZXcgQXJyYXkocik6W10sbz0wLGE9Uih0KTs7KXtpZihvPT09cilyZXR1cm4gaTtpZigobj1hLm5leHQoKSkuZG9uZSlyZXR1cm4gbyE9PWUmJihpLmxlbmd0aD1vKSxpO2lbbysrXT1uLnZhbHVlfX0sVD1mdW5jdGlvbih0KXtmdW5jdGlvbiBuKGUpe3ZhciBuO3JldHVybihuPXQuY2FsbCh0aGlzKXx8dGhpcykubmFtZT1cIkdyYXBoRXJyb3JcIixuLm1lc3NhZ2U9ZSxufXJldHVybiBlKG4sdCksbn0oYShFcnJvcikpLEI9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbihlKXt2YXIgcjtyZXR1cm4ocj10LmNhbGwodGhpcyxlKXx8dGhpcykubmFtZT1cIkludmFsaWRBcmd1bWVudHNHcmFwaEVycm9yXCIsXCJmdW5jdGlvblwiPT10eXBlb2YgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UmJkVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGMociksbi5wcm90b3R5cGUuY29uc3RydWN0b3IpLHJ9cmV0dXJuIGUobix0KSxufShUKSxGPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIG4oZSl7dmFyIHI7cmV0dXJuKHI9dC5jYWxsKHRoaXMsZSl8fHRoaXMpLm5hbWU9XCJOb3RGb3VuZEdyYXBoRXJyb3JcIixcImZ1bmN0aW9uXCI9PXR5cGVvZiBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSYmRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoYyhyKSxuLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcikscn1yZXR1cm4gZShuLHQpLG59KFQpLEk9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbihlKXt2YXIgcjtyZXR1cm4ocj10LmNhbGwodGhpcyxlKXx8dGhpcykubmFtZT1cIlVzYWdlR3JhcGhFcnJvclwiLFwiZnVuY3Rpb25cIj09dHlwZW9mIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlJiZFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShjKHIpLG4ucHJvdG90eXBlLmNvbnN0cnVjdG9yKSxyfXJldHVybiBlKG4sdCksbn0oVCk7ZnVuY3Rpb24gWSh0LGUpe3RoaXMua2V5PXQsdGhpcy5hdHRyaWJ1dGVzPWUsdGhpcy5jbGVhcigpfWZ1bmN0aW9uIHEodCxlKXt0aGlzLmtleT10LHRoaXMuYXR0cmlidXRlcz1lLHRoaXMuY2xlYXIoKX1mdW5jdGlvbiBKKHQsZSl7dGhpcy5rZXk9dCx0aGlzLmF0dHJpYnV0ZXM9ZSx0aGlzLmNsZWFyKCl9ZnVuY3Rpb24gVih0LGUsbixyLGkpe3RoaXMua2V5PWUsdGhpcy5hdHRyaWJ1dGVzPWksdGhpcy51bmRpcmVjdGVkPXQsdGhpcy5zb3VyY2U9bix0aGlzLnRhcmdldD1yfVkucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5pbkRlZ3JlZT0wLHRoaXMub3V0RGVncmVlPTAsdGhpcy51bmRpcmVjdGVkRGVncmVlPTAsdGhpcy51bmRpcmVjdGVkTG9vcHM9MCx0aGlzLmRpcmVjdGVkTG9vcHM9MCx0aGlzLmluPXt9LHRoaXMub3V0PXt9LHRoaXMudW5kaXJlY3RlZD17fX0scS5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLmluRGVncmVlPTAsdGhpcy5vdXREZWdyZWU9MCx0aGlzLmRpcmVjdGVkTG9vcHM9MCx0aGlzLmluPXt9LHRoaXMub3V0PXt9fSxKLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMudW5kaXJlY3RlZERlZ3JlZT0wLHRoaXMudW5kaXJlY3RlZExvb3BzPTAsdGhpcy51bmRpcmVjdGVkPXt9fSxWLnByb3RvdHlwZS5hdHRhY2g9ZnVuY3Rpb24oKXt2YXIgdD1cIm91dFwiLGU9XCJpblwiO3RoaXMudW5kaXJlY3RlZCYmKHQ9ZT1cInVuZGlyZWN0ZWRcIik7dmFyIG49dGhpcy5zb3VyY2Uua2V5LHI9dGhpcy50YXJnZXQua2V5O3RoaXMuc291cmNlW3RdW3JdPXRoaXMsdGhpcy51bmRpcmVjdGVkJiZuPT09cnx8KHRoaXMudGFyZ2V0W2VdW25dPXRoaXMpfSxWLnByb3RvdHlwZS5hdHRhY2hNdWx0aT1mdW5jdGlvbigpe3ZhciB0PVwib3V0XCIsZT1cImluXCIsbj10aGlzLnNvdXJjZS5rZXkscj10aGlzLnRhcmdldC5rZXk7dGhpcy51bmRpcmVjdGVkJiYodD1lPVwidW5kaXJlY3RlZFwiKTt2YXIgaT10aGlzLnNvdXJjZVt0XSxvPWlbcl07aWYodm9pZCAwPT09bylyZXR1cm4gaVtyXT10aGlzLHZvaWQodGhpcy51bmRpcmVjdGVkJiZuPT09cnx8KHRoaXMudGFyZ2V0W2VdW25dPXRoaXMpKTtvLnByZXZpb3VzPXRoaXMsdGhpcy5uZXh0PW8saVtyXT10aGlzLHRoaXMudGFyZ2V0W2VdW25dPXRoaXN9LFYucHJvdG90eXBlLmRldGFjaD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuc291cmNlLmtleSxlPXRoaXMudGFyZ2V0LmtleSxuPVwib3V0XCIscj1cImluXCI7dGhpcy51bmRpcmVjdGVkJiYobj1yPVwidW5kaXJlY3RlZFwiKSxkZWxldGUgdGhpcy5zb3VyY2Vbbl1bZV0sZGVsZXRlIHRoaXMudGFyZ2V0W3JdW3RdfSxWLnByb3RvdHlwZS5kZXRhY2hNdWx0aT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuc291cmNlLmtleSxlPXRoaXMudGFyZ2V0LmtleSxuPVwib3V0XCIscj1cImluXCI7dGhpcy51bmRpcmVjdGVkJiYobj1yPVwidW5kaXJlY3RlZFwiKSx2b2lkIDA9PT10aGlzLnByZXZpb3VzP3ZvaWQgMD09PXRoaXMubmV4dD8oZGVsZXRlIHRoaXMuc291cmNlW25dW2VdLGRlbGV0ZSB0aGlzLnRhcmdldFtyXVt0XSk6KHRoaXMubmV4dC5wcmV2aW91cz12b2lkIDAsdGhpcy5zb3VyY2Vbbl1bZV09dGhpcy5uZXh0LHRoaXMudGFyZ2V0W3JdW3RdPXRoaXMubmV4dCk6KHRoaXMucHJldmlvdXMubmV4dD10aGlzLm5leHQsdm9pZCAwIT09dGhpcy5uZXh0JiYodGhpcy5uZXh0LnByZXZpb3VzPXRoaXMucHJldmlvdXMpKX07ZnVuY3Rpb24gSCh0LGUsbixyLGksbyxhKXt2YXIgYyx1LGQscztpZihyPVwiXCIrciwwPT09bil7aWYoIShjPXQuX25vZGVzLmdldChyKSkpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQociwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO2Q9aSxzPW99ZWxzZSBpZigzPT09bil7aWYoaT1cIlwiK2ksISh1PXQuX2VkZ2VzLmdldChpKSkpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQoaSwnXCIgZWRnZSBpbiB0aGUgZ3JhcGguJykpO3ZhciBoPXUuc291cmNlLmtleSxwPXUudGFyZ2V0LmtleTtpZihyPT09aCljPXUudGFyZ2V0O2Vsc2V7aWYociE9PXApdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiB0aGUgXCInKS5jb25jYXQociwnXCIgbm9kZSBpcyBub3QgYXR0YWNoZWQgdG8gdGhlIFwiJykuY29uY2F0KGksJ1wiIGVkZ2UgKCcpLmNvbmNhdChoLFwiLCBcIikuY29uY2F0KHAsXCIpLlwiKSk7Yz11LnNvdXJjZX1kPW8scz1hfWVsc2V7aWYoISh1PXQuX2VkZ2VzLmdldChyKSkpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQociwnXCIgZWRnZSBpbiB0aGUgZ3JhcGguJykpO2M9MT09PW4/dS5zb3VyY2U6dS50YXJnZXQsZD1pLHM9b31yZXR1cm5bYyxkLHNdfXZhciBRPVt7bmFtZTpmdW5jdGlvbih0KXtyZXR1cm5cImdldFwiLmNvbmNhdCh0LFwiQXR0cmlidXRlXCIpfSxhdHRhY2hlcjpmdW5jdGlvbih0LGUsbil7dC5wcm90b3R5cGVbZV09ZnVuY3Rpb24odCxyLGkpe3ZhciBvPUgodGhpcyxlLG4sdCxyLGkpLGE9b1swXSxjPW9bMV07cmV0dXJuIGEuYXR0cmlidXRlc1tjXX19fSx7bmFtZTpmdW5jdGlvbih0KXtyZXR1cm5cImdldFwiLmNvbmNhdCh0LFwiQXR0cmlidXRlc1wiKX0sYXR0YWNoZXI6ZnVuY3Rpb24odCxlLG4pe3QucHJvdG90eXBlW2VdPWZ1bmN0aW9uKHQscil7cmV0dXJuIEgodGhpcyxlLG4sdCxyKVswXS5hdHRyaWJ1dGVzfX19LHtuYW1lOmZ1bmN0aW9uKHQpe3JldHVyblwiaGFzXCIuY29uY2F0KHQsXCJBdHRyaWJ1dGVcIil9LGF0dGFjaGVyOmZ1bmN0aW9uKHQsZSxuKXt0LnByb3RvdHlwZVtlXT1mdW5jdGlvbih0LHIsaSl7dmFyIG89SCh0aGlzLGUsbix0LHIsaSksYT1vWzBdLGM9b1sxXTtyZXR1cm4gYS5hdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KGMpfX19LHtuYW1lOmZ1bmN0aW9uKHQpe3JldHVyblwic2V0XCIuY29uY2F0KHQsXCJBdHRyaWJ1dGVcIil9LGF0dGFjaGVyOmZ1bmN0aW9uKHQsZSxuKXt0LnByb3RvdHlwZVtlXT1mdW5jdGlvbih0LHIsaSxvKXt2YXIgYT1IKHRoaXMsZSxuLHQscixpLG8pLGM9YVswXSx1PWFbMV0sZD1hWzJdO3JldHVybiBjLmF0dHJpYnV0ZXNbdV09ZCx0aGlzLmVtaXQoXCJub2RlQXR0cmlidXRlc1VwZGF0ZWRcIix7a2V5OmMua2V5LHR5cGU6XCJzZXRcIixhdHRyaWJ1dGVzOmMuYXR0cmlidXRlcyxuYW1lOnV9KSx0aGlzfX19LHtuYW1lOmZ1bmN0aW9uKHQpe3JldHVyblwidXBkYXRlXCIuY29uY2F0KHQsXCJBdHRyaWJ1dGVcIil9LGF0dGFjaGVyOmZ1bmN0aW9uKHQsZSxuKXt0LnByb3RvdHlwZVtlXT1mdW5jdGlvbih0LHIsaSxvKXt2YXIgYT1IKHRoaXMsZSxuLHQscixpLG8pLGM9YVswXSx1PWFbMV0sZD1hWzJdO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGQpdGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogdXBkYXRlciBzaG91bGQgYmUgYSBmdW5jdGlvbi5cIikpO3ZhciBzPWMuYXR0cmlidXRlcyxoPWQoc1t1XSk7cmV0dXJuIHNbdV09aCx0aGlzLmVtaXQoXCJub2RlQXR0cmlidXRlc1VwZGF0ZWRcIix7a2V5OmMua2V5LHR5cGU6XCJzZXRcIixhdHRyaWJ1dGVzOmMuYXR0cmlidXRlcyxuYW1lOnV9KSx0aGlzfX19LHtuYW1lOmZ1bmN0aW9uKHQpe3JldHVyblwicmVtb3ZlXCIuY29uY2F0KHQsXCJBdHRyaWJ1dGVcIil9LGF0dGFjaGVyOmZ1bmN0aW9uKHQsZSxuKXt0LnByb3RvdHlwZVtlXT1mdW5jdGlvbih0LHIsaSl7dmFyIG89SCh0aGlzLGUsbix0LHIsaSksYT1vWzBdLGM9b1sxXTtyZXR1cm4gZGVsZXRlIGEuYXR0cmlidXRlc1tjXSx0aGlzLmVtaXQoXCJub2RlQXR0cmlidXRlc1VwZGF0ZWRcIix7a2V5OmEua2V5LHR5cGU6XCJyZW1vdmVcIixhdHRyaWJ1dGVzOmEuYXR0cmlidXRlcyxuYW1lOmN9KSx0aGlzfX19LHtuYW1lOmZ1bmN0aW9uKHQpe3JldHVyblwicmVwbGFjZVwiLmNvbmNhdCh0LFwiQXR0cmlidXRlc1wiKX0sYXR0YWNoZXI6ZnVuY3Rpb24odCxlLG4pe3QucHJvdG90eXBlW2VdPWZ1bmN0aW9uKHQscixpKXt2YXIgbz1IKHRoaXMsZSxuLHQscixpKSxhPW9bMF0sYz1vWzFdO2lmKCFzKGMpKXRocm93IG5ldyBCKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IHByb3ZpZGVkIGF0dHJpYnV0ZXMgYXJlIG5vdCBhIHBsYWluIG9iamVjdC5cIikpO3JldHVybiBhLmF0dHJpYnV0ZXM9Yyx0aGlzLmVtaXQoXCJub2RlQXR0cmlidXRlc1VwZGF0ZWRcIix7a2V5OmEua2V5LHR5cGU6XCJyZXBsYWNlXCIsYXR0cmlidXRlczphLmF0dHJpYnV0ZXN9KSx0aGlzfX19LHtuYW1lOmZ1bmN0aW9uKHQpe3JldHVyblwibWVyZ2VcIi5jb25jYXQodCxcIkF0dHJpYnV0ZXNcIil9LGF0dGFjaGVyOmZ1bmN0aW9uKHQsZSxuKXt0LnByb3RvdHlwZVtlXT1mdW5jdGlvbih0LHIsaSl7dmFyIG89SCh0aGlzLGUsbix0LHIsaSksYT1vWzBdLGM9b1sxXTtpZighcyhjKSl0aHJvdyBuZXcgQihcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiBwcm92aWRlZCBhdHRyaWJ1dGVzIGFyZSBub3QgYSBwbGFpbiBvYmplY3QuXCIpKTtyZXR1cm4gdShhLmF0dHJpYnV0ZXMsYyksdGhpcy5lbWl0KFwibm9kZUF0dHJpYnV0ZXNVcGRhdGVkXCIse2tleTphLmtleSx0eXBlOlwibWVyZ2VcIixhdHRyaWJ1dGVzOmEuYXR0cmlidXRlcyxkYXRhOmN9KSx0aGlzfX19LHtuYW1lOmZ1bmN0aW9uKHQpe3JldHVyblwidXBkYXRlXCIuY29uY2F0KHQsXCJBdHRyaWJ1dGVzXCIpfSxhdHRhY2hlcjpmdW5jdGlvbih0LGUsbil7dC5wcm90b3R5cGVbZV09ZnVuY3Rpb24odCxyLGkpe3ZhciBvPUgodGhpcyxlLG4sdCxyLGkpLGE9b1swXSxjPW9bMV07aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgYyl0aHJvdyBuZXcgQihcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiBwcm92aWRlZCB1cGRhdGVyIGlzIG5vdCBhIGZ1bmN0aW9uLlwiKSk7cmV0dXJuIGEuYXR0cmlidXRlcz1jKGEuYXR0cmlidXRlcyksdGhpcy5lbWl0KFwibm9kZUF0dHJpYnV0ZXNVcGRhdGVkXCIse2tleTphLmtleSx0eXBlOlwidXBkYXRlXCIsYXR0cmlidXRlczphLmF0dHJpYnV0ZXN9KSx0aGlzfX19XTt2YXIgWD1be25hbWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJnZXRcIi5jb25jYXQodCxcIkF0dHJpYnV0ZVwiKX0sYXR0YWNoZXI6ZnVuY3Rpb24odCxlLG4pe3QucHJvdG90eXBlW2VdPWZ1bmN0aW9uKHQscil7dmFyIGk7aWYoXCJtaXhlZFwiIT09dGhpcy50eXBlJiZcIm1peGVkXCIhPT1uJiZuIT09dGhpcy50eXBlKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IGNhbm5vdCBmaW5kIHRoaXMgdHlwZSBvZiBlZGdlcyBpbiB5b3VyIFwiKS5jb25jYXQodGhpcy50eXBlLFwiIGdyYXBoLlwiKSk7aWYoYXJndW1lbnRzLmxlbmd0aD4yKXtpZih0aGlzLm11bHRpKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IGNhbm5vdCB1c2UgYSB7c291cmNlLHRhcmdldH0gY29tYm8gd2hlbiBhc2tpbmcgYWJvdXQgYW4gZWRnZSdzIGF0dHJpYnV0ZXMgaW4gYSBNdWx0aUdyYXBoIHNpbmNlIHdlIGNhbm5vdCBpbmZlciB0aGUgb25lIHlvdSB3YW50IGluZm9ybWF0aW9uIGFib3V0LlwiKSk7dmFyIG89XCJcIit0LGE9XCJcIityO2lmKHI9YXJndW1lbnRzWzJdLCEoaT1kKHRoaXMsbyxhLG4pKSl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGNvdWxkIG5vdCBmaW5kIGFuIGVkZ2UgZm9yIHRoZSBnaXZlbiBwYXRoIChcIicpLmNvbmNhdChvLCdcIiAtIFwiJykuY29uY2F0KGEsJ1wiKS4nKSl9ZWxzZXtpZihcIm1peGVkXCIhPT1uKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IGNhbGxpbmcgdGhpcyBtZXRob2Qgd2l0aCBvbmx5IGEga2V5ICh2cy4gYSBzb3VyY2UgYW5kIHRhcmdldCkgZG9lcyBub3QgbWFrZSBzZW5zZSBzaW5jZSBhbiBlZGdlIHdpdGggdGhpcyBrZXkgY291bGQgaGF2ZSB0aGUgb3RoZXIgdHlwZS5cIikpO2lmKHQ9XCJcIit0LCEoaT10aGlzLl9lZGdlcy5nZXQodCkpKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHQsJ1wiIGVkZ2UgaW4gdGhlIGdyYXBoLicpKX1yZXR1cm4gaS5hdHRyaWJ1dGVzW3JdfX19LHtuYW1lOmZ1bmN0aW9uKHQpe3JldHVyblwiZ2V0XCIuY29uY2F0KHQsXCJBdHRyaWJ1dGVzXCIpfSxhdHRhY2hlcjpmdW5jdGlvbih0LGUsbil7dC5wcm90b3R5cGVbZV09ZnVuY3Rpb24odCl7dmFyIHI7aWYoXCJtaXhlZFwiIT09dGhpcy50eXBlJiZcIm1peGVkXCIhPT1uJiZuIT09dGhpcy50eXBlKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IGNhbm5vdCBmaW5kIHRoaXMgdHlwZSBvZiBlZGdlcyBpbiB5b3VyIFwiKS5jb25jYXQodGhpcy50eXBlLFwiIGdyYXBoLlwiKSk7aWYoYXJndW1lbnRzLmxlbmd0aD4xKXtpZih0aGlzLm11bHRpKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IGNhbm5vdCB1c2UgYSB7c291cmNlLHRhcmdldH0gY29tYm8gd2hlbiBhc2tpbmcgYWJvdXQgYW4gZWRnZSdzIGF0dHJpYnV0ZXMgaW4gYSBNdWx0aUdyYXBoIHNpbmNlIHdlIGNhbm5vdCBpbmZlciB0aGUgb25lIHlvdSB3YW50IGluZm9ybWF0aW9uIGFib3V0LlwiKSk7dmFyIGk9XCJcIit0LG89XCJcIithcmd1bWVudHNbMV07aWYoIShyPWQodGhpcyxpLG8sbikpKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgYW4gZWRnZSBmb3IgdGhlIGdpdmVuIHBhdGggKFwiJykuY29uY2F0KGksJ1wiIC0gXCInKS5jb25jYXQobywnXCIpLicpKX1lbHNle2lmKFwibWl4ZWRcIiE9PW4pdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2FsbGluZyB0aGlzIG1ldGhvZCB3aXRoIG9ubHkgYSBrZXkgKHZzLiBhIHNvdXJjZSBhbmQgdGFyZ2V0KSBkb2VzIG5vdCBtYWtlIHNlbnNlIHNpbmNlIGFuIGVkZ2Ugd2l0aCB0aGlzIGtleSBjb3VsZCBoYXZlIHRoZSBvdGhlciB0eXBlLlwiKSk7aWYodD1cIlwiK3QsIShyPXRoaXMuX2VkZ2VzLmdldCh0KSkpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgZWRnZSBpbiB0aGUgZ3JhcGguJykpfXJldHVybiByLmF0dHJpYnV0ZXN9fX0se25hbWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJoYXNcIi5jb25jYXQodCxcIkF0dHJpYnV0ZVwiKX0sYXR0YWNoZXI6ZnVuY3Rpb24odCxlLG4pe3QucHJvdG90eXBlW2VdPWZ1bmN0aW9uKHQscil7dmFyIGk7aWYoXCJtaXhlZFwiIT09dGhpcy50eXBlJiZcIm1peGVkXCIhPT1uJiZuIT09dGhpcy50eXBlKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IGNhbm5vdCBmaW5kIHRoaXMgdHlwZSBvZiBlZGdlcyBpbiB5b3VyIFwiKS5jb25jYXQodGhpcy50eXBlLFwiIGdyYXBoLlwiKSk7aWYoYXJndW1lbnRzLmxlbmd0aD4yKXtpZih0aGlzLm11bHRpKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IGNhbm5vdCB1c2UgYSB7c291cmNlLHRhcmdldH0gY29tYm8gd2hlbiBhc2tpbmcgYWJvdXQgYW4gZWRnZSdzIGF0dHJpYnV0ZXMgaW4gYSBNdWx0aUdyYXBoIHNpbmNlIHdlIGNhbm5vdCBpbmZlciB0aGUgb25lIHlvdSB3YW50IGluZm9ybWF0aW9uIGFib3V0LlwiKSk7dmFyIG89XCJcIit0LGE9XCJcIityO2lmKHI9YXJndW1lbnRzWzJdLCEoaT1kKHRoaXMsbyxhLG4pKSl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGNvdWxkIG5vdCBmaW5kIGFuIGVkZ2UgZm9yIHRoZSBnaXZlbiBwYXRoIChcIicpLmNvbmNhdChvLCdcIiAtIFwiJykuY29uY2F0KGEsJ1wiKS4nKSl9ZWxzZXtpZihcIm1peGVkXCIhPT1uKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IGNhbGxpbmcgdGhpcyBtZXRob2Qgd2l0aCBvbmx5IGEga2V5ICh2cy4gYSBzb3VyY2UgYW5kIHRhcmdldCkgZG9lcyBub3QgbWFrZSBzZW5zZSBzaW5jZSBhbiBlZGdlIHdpdGggdGhpcyBrZXkgY291bGQgaGF2ZSB0aGUgb3RoZXIgdHlwZS5cIikpO2lmKHQ9XCJcIit0LCEoaT10aGlzLl9lZGdlcy5nZXQodCkpKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHQsJ1wiIGVkZ2UgaW4gdGhlIGdyYXBoLicpKX1yZXR1cm4gaS5hdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KHIpfX19LHtuYW1lOmZ1bmN0aW9uKHQpe3JldHVyblwic2V0XCIuY29uY2F0KHQsXCJBdHRyaWJ1dGVcIil9LGF0dGFjaGVyOmZ1bmN0aW9uKHQsZSxuKXt0LnByb3RvdHlwZVtlXT1mdW5jdGlvbih0LHIsaSl7dmFyIG87aWYoXCJtaXhlZFwiIT09dGhpcy50eXBlJiZcIm1peGVkXCIhPT1uJiZuIT09dGhpcy50eXBlKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IGNhbm5vdCBmaW5kIHRoaXMgdHlwZSBvZiBlZGdlcyBpbiB5b3VyIFwiKS5jb25jYXQodGhpcy50eXBlLFwiIGdyYXBoLlwiKSk7aWYoYXJndW1lbnRzLmxlbmd0aD4zKXtpZih0aGlzLm11bHRpKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IGNhbm5vdCB1c2UgYSB7c291cmNlLHRhcmdldH0gY29tYm8gd2hlbiBhc2tpbmcgYWJvdXQgYW4gZWRnZSdzIGF0dHJpYnV0ZXMgaW4gYSBNdWx0aUdyYXBoIHNpbmNlIHdlIGNhbm5vdCBpbmZlciB0aGUgb25lIHlvdSB3YW50IGluZm9ybWF0aW9uIGFib3V0LlwiKSk7dmFyIGE9XCJcIit0LGM9XCJcIityO2lmKHI9YXJndW1lbnRzWzJdLGk9YXJndW1lbnRzWzNdLCEobz1kKHRoaXMsYSxjLG4pKSl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGNvdWxkIG5vdCBmaW5kIGFuIGVkZ2UgZm9yIHRoZSBnaXZlbiBwYXRoIChcIicpLmNvbmNhdChhLCdcIiAtIFwiJykuY29uY2F0KGMsJ1wiKS4nKSl9ZWxzZXtpZihcIm1peGVkXCIhPT1uKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IGNhbGxpbmcgdGhpcyBtZXRob2Qgd2l0aCBvbmx5IGEga2V5ICh2cy4gYSBzb3VyY2UgYW5kIHRhcmdldCkgZG9lcyBub3QgbWFrZSBzZW5zZSBzaW5jZSBhbiBlZGdlIHdpdGggdGhpcyBrZXkgY291bGQgaGF2ZSB0aGUgb3RoZXIgdHlwZS5cIikpO2lmKHQ9XCJcIit0LCEobz10aGlzLl9lZGdlcy5nZXQodCkpKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHQsJ1wiIGVkZ2UgaW4gdGhlIGdyYXBoLicpKX1yZXR1cm4gby5hdHRyaWJ1dGVzW3JdPWksdGhpcy5lbWl0KFwiZWRnZUF0dHJpYnV0ZXNVcGRhdGVkXCIse2tleTpvLmtleSx0eXBlOlwic2V0XCIsYXR0cmlidXRlczpvLmF0dHJpYnV0ZXMsbmFtZTpyfSksdGhpc319fSx7bmFtZTpmdW5jdGlvbih0KXtyZXR1cm5cInVwZGF0ZVwiLmNvbmNhdCh0LFwiQXR0cmlidXRlXCIpfSxhdHRhY2hlcjpmdW5jdGlvbih0LGUsbil7dC5wcm90b3R5cGVbZV09ZnVuY3Rpb24odCxyLGkpe3ZhciBvO2lmKFwibWl4ZWRcIiE9PXRoaXMudHlwZSYmXCJtaXhlZFwiIT09biYmbiE9PXRoaXMudHlwZSl0aHJvdyBuZXcgSShcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiBjYW5ub3QgZmluZCB0aGlzIHR5cGUgb2YgZWRnZXMgaW4geW91ciBcIikuY29uY2F0KHRoaXMudHlwZSxcIiBncmFwaC5cIikpO2lmKGFyZ3VtZW50cy5sZW5ndGg+Myl7aWYodGhpcy5tdWx0aSl0aHJvdyBuZXcgSShcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiBjYW5ub3QgdXNlIGEge3NvdXJjZSx0YXJnZXR9IGNvbWJvIHdoZW4gYXNraW5nIGFib3V0IGFuIGVkZ2UncyBhdHRyaWJ1dGVzIGluIGEgTXVsdGlHcmFwaCBzaW5jZSB3ZSBjYW5ub3QgaW5mZXIgdGhlIG9uZSB5b3Ugd2FudCBpbmZvcm1hdGlvbiBhYm91dC5cIikpO3ZhciBhPVwiXCIrdCxjPVwiXCIrcjtpZihyPWFyZ3VtZW50c1syXSxpPWFyZ3VtZW50c1szXSwhKG89ZCh0aGlzLGEsYyxuKSkpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBjb3VsZCBub3QgZmluZCBhbiBlZGdlIGZvciB0aGUgZ2l2ZW4gcGF0aCAoXCInKS5jb25jYXQoYSwnXCIgLSBcIicpLmNvbmNhdChjLCdcIikuJykpfWVsc2V7aWYoXCJtaXhlZFwiIT09bil0aHJvdyBuZXcgSShcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiBjYWxsaW5nIHRoaXMgbWV0aG9kIHdpdGggb25seSBhIGtleSAodnMuIGEgc291cmNlIGFuZCB0YXJnZXQpIGRvZXMgbm90IG1ha2Ugc2Vuc2Ugc2luY2UgYW4gZWRnZSB3aXRoIHRoaXMga2V5IGNvdWxkIGhhdmUgdGhlIG90aGVyIHR5cGUuXCIpKTtpZih0PVwiXCIrdCwhKG89dGhpcy5fZWRnZXMuZ2V0KHQpKSl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdCh0LCdcIiBlZGdlIGluIHRoZSBncmFwaC4nKSl9aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgaSl0aHJvdyBuZXcgQihcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiB1cGRhdGVyIHNob3VsZCBiZSBhIGZ1bmN0aW9uLlwiKSk7cmV0dXJuIG8uYXR0cmlidXRlc1tyXT1pKG8uYXR0cmlidXRlc1tyXSksdGhpcy5lbWl0KFwiZWRnZUF0dHJpYnV0ZXNVcGRhdGVkXCIse2tleTpvLmtleSx0eXBlOlwic2V0XCIsYXR0cmlidXRlczpvLmF0dHJpYnV0ZXMsbmFtZTpyfSksdGhpc319fSx7bmFtZTpmdW5jdGlvbih0KXtyZXR1cm5cInJlbW92ZVwiLmNvbmNhdCh0LFwiQXR0cmlidXRlXCIpfSxhdHRhY2hlcjpmdW5jdGlvbih0LGUsbil7dC5wcm90b3R5cGVbZV09ZnVuY3Rpb24odCxyKXt2YXIgaTtpZihcIm1peGVkXCIhPT10aGlzLnR5cGUmJlwibWl4ZWRcIiE9PW4mJm4hPT10aGlzLnR5cGUpdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2Fubm90IGZpbmQgdGhpcyB0eXBlIG9mIGVkZ2VzIGluIHlvdXIgXCIpLmNvbmNhdCh0aGlzLnR5cGUsXCIgZ3JhcGguXCIpKTtpZihhcmd1bWVudHMubGVuZ3RoPjIpe2lmKHRoaXMubXVsdGkpdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2Fubm90IHVzZSBhIHtzb3VyY2UsdGFyZ2V0fSBjb21ibyB3aGVuIGFza2luZyBhYm91dCBhbiBlZGdlJ3MgYXR0cmlidXRlcyBpbiBhIE11bHRpR3JhcGggc2luY2Ugd2UgY2Fubm90IGluZmVyIHRoZSBvbmUgeW91IHdhbnQgaW5mb3JtYXRpb24gYWJvdXQuXCIpKTt2YXIgbz1cIlwiK3QsYT1cIlwiK3I7aWYocj1hcmd1bWVudHNbMl0sIShpPWQodGhpcyxvLGEsbikpKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgYW4gZWRnZSBmb3IgdGhlIGdpdmVuIHBhdGggKFwiJykuY29uY2F0KG8sJ1wiIC0gXCInKS5jb25jYXQoYSwnXCIpLicpKX1lbHNle2lmKFwibWl4ZWRcIiE9PW4pdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2FsbGluZyB0aGlzIG1ldGhvZCB3aXRoIG9ubHkgYSBrZXkgKHZzLiBhIHNvdXJjZSBhbmQgdGFyZ2V0KSBkb2VzIG5vdCBtYWtlIHNlbnNlIHNpbmNlIGFuIGVkZ2Ugd2l0aCB0aGlzIGtleSBjb3VsZCBoYXZlIHRoZSBvdGhlciB0eXBlLlwiKSk7aWYodD1cIlwiK3QsIShpPXRoaXMuX2VkZ2VzLmdldCh0KSkpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgZWRnZSBpbiB0aGUgZ3JhcGguJykpfXJldHVybiBkZWxldGUgaS5hdHRyaWJ1dGVzW3JdLHRoaXMuZW1pdChcImVkZ2VBdHRyaWJ1dGVzVXBkYXRlZFwiLHtrZXk6aS5rZXksdHlwZTpcInJlbW92ZVwiLGF0dHJpYnV0ZXM6aS5hdHRyaWJ1dGVzLG5hbWU6cn0pLHRoaXN9fX0se25hbWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJyZXBsYWNlXCIuY29uY2F0KHQsXCJBdHRyaWJ1dGVzXCIpfSxhdHRhY2hlcjpmdW5jdGlvbih0LGUsbil7dC5wcm90b3R5cGVbZV09ZnVuY3Rpb24odCxyKXt2YXIgaTtpZihcIm1peGVkXCIhPT10aGlzLnR5cGUmJlwibWl4ZWRcIiE9PW4mJm4hPT10aGlzLnR5cGUpdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2Fubm90IGZpbmQgdGhpcyB0eXBlIG9mIGVkZ2VzIGluIHlvdXIgXCIpLmNvbmNhdCh0aGlzLnR5cGUsXCIgZ3JhcGguXCIpKTtpZihhcmd1bWVudHMubGVuZ3RoPjIpe2lmKHRoaXMubXVsdGkpdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2Fubm90IHVzZSBhIHtzb3VyY2UsdGFyZ2V0fSBjb21ibyB3aGVuIGFza2luZyBhYm91dCBhbiBlZGdlJ3MgYXR0cmlidXRlcyBpbiBhIE11bHRpR3JhcGggc2luY2Ugd2UgY2Fubm90IGluZmVyIHRoZSBvbmUgeW91IHdhbnQgaW5mb3JtYXRpb24gYWJvdXQuXCIpKTt2YXIgbz1cIlwiK3QsYT1cIlwiK3I7aWYocj1hcmd1bWVudHNbMl0sIShpPWQodGhpcyxvLGEsbikpKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgYW4gZWRnZSBmb3IgdGhlIGdpdmVuIHBhdGggKFwiJykuY29uY2F0KG8sJ1wiIC0gXCInKS5jb25jYXQoYSwnXCIpLicpKX1lbHNle2lmKFwibWl4ZWRcIiE9PW4pdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2FsbGluZyB0aGlzIG1ldGhvZCB3aXRoIG9ubHkgYSBrZXkgKHZzLiBhIHNvdXJjZSBhbmQgdGFyZ2V0KSBkb2VzIG5vdCBtYWtlIHNlbnNlIHNpbmNlIGFuIGVkZ2Ugd2l0aCB0aGlzIGtleSBjb3VsZCBoYXZlIHRoZSBvdGhlciB0eXBlLlwiKSk7aWYodD1cIlwiK3QsIShpPXRoaXMuX2VkZ2VzLmdldCh0KSkpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgZWRnZSBpbiB0aGUgZ3JhcGguJykpfWlmKCFzKHIpKXRocm93IG5ldyBCKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IHByb3ZpZGVkIGF0dHJpYnV0ZXMgYXJlIG5vdCBhIHBsYWluIG9iamVjdC5cIikpO3JldHVybiBpLmF0dHJpYnV0ZXM9cix0aGlzLmVtaXQoXCJlZGdlQXR0cmlidXRlc1VwZGF0ZWRcIix7a2V5Omkua2V5LHR5cGU6XCJyZXBsYWNlXCIsYXR0cmlidXRlczppLmF0dHJpYnV0ZXN9KSx0aGlzfX19LHtuYW1lOmZ1bmN0aW9uKHQpe3JldHVyblwibWVyZ2VcIi5jb25jYXQodCxcIkF0dHJpYnV0ZXNcIil9LGF0dGFjaGVyOmZ1bmN0aW9uKHQsZSxuKXt0LnByb3RvdHlwZVtlXT1mdW5jdGlvbih0LHIpe3ZhciBpO2lmKFwibWl4ZWRcIiE9PXRoaXMudHlwZSYmXCJtaXhlZFwiIT09biYmbiE9PXRoaXMudHlwZSl0aHJvdyBuZXcgSShcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiBjYW5ub3QgZmluZCB0aGlzIHR5cGUgb2YgZWRnZXMgaW4geW91ciBcIikuY29uY2F0KHRoaXMudHlwZSxcIiBncmFwaC5cIikpO2lmKGFyZ3VtZW50cy5sZW5ndGg+Mil7aWYodGhpcy5tdWx0aSl0aHJvdyBuZXcgSShcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiBjYW5ub3QgdXNlIGEge3NvdXJjZSx0YXJnZXR9IGNvbWJvIHdoZW4gYXNraW5nIGFib3V0IGFuIGVkZ2UncyBhdHRyaWJ1dGVzIGluIGEgTXVsdGlHcmFwaCBzaW5jZSB3ZSBjYW5ub3QgaW5mZXIgdGhlIG9uZSB5b3Ugd2FudCBpbmZvcm1hdGlvbiBhYm91dC5cIikpO3ZhciBvPVwiXCIrdCxhPVwiXCIrcjtpZihyPWFyZ3VtZW50c1syXSwhKGk9ZCh0aGlzLG8sYSxuKSkpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBjb3VsZCBub3QgZmluZCBhbiBlZGdlIGZvciB0aGUgZ2l2ZW4gcGF0aCAoXCInKS5jb25jYXQobywnXCIgLSBcIicpLmNvbmNhdChhLCdcIikuJykpfWVsc2V7aWYoXCJtaXhlZFwiIT09bil0aHJvdyBuZXcgSShcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiBjYWxsaW5nIHRoaXMgbWV0aG9kIHdpdGggb25seSBhIGtleSAodnMuIGEgc291cmNlIGFuZCB0YXJnZXQpIGRvZXMgbm90IG1ha2Ugc2Vuc2Ugc2luY2UgYW4gZWRnZSB3aXRoIHRoaXMga2V5IGNvdWxkIGhhdmUgdGhlIG90aGVyIHR5cGUuXCIpKTtpZih0PVwiXCIrdCwhKGk9dGhpcy5fZWRnZXMuZ2V0KHQpKSl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdCh0LCdcIiBlZGdlIGluIHRoZSBncmFwaC4nKSl9aWYoIXMocikpdGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogcHJvdmlkZWQgYXR0cmlidXRlcyBhcmUgbm90IGEgcGxhaW4gb2JqZWN0LlwiKSk7cmV0dXJuIHUoaS5hdHRyaWJ1dGVzLHIpLHRoaXMuZW1pdChcImVkZ2VBdHRyaWJ1dGVzVXBkYXRlZFwiLHtrZXk6aS5rZXksdHlwZTpcIm1lcmdlXCIsYXR0cmlidXRlczppLmF0dHJpYnV0ZXMsZGF0YTpyfSksdGhpc319fSx7bmFtZTpmdW5jdGlvbih0KXtyZXR1cm5cInVwZGF0ZVwiLmNvbmNhdCh0LFwiQXR0cmlidXRlc1wiKX0sYXR0YWNoZXI6ZnVuY3Rpb24odCxlLG4pe3QucHJvdG90eXBlW2VdPWZ1bmN0aW9uKHQscil7dmFyIGk7aWYoXCJtaXhlZFwiIT09dGhpcy50eXBlJiZcIm1peGVkXCIhPT1uJiZuIT09dGhpcy50eXBlKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IGNhbm5vdCBmaW5kIHRoaXMgdHlwZSBvZiBlZGdlcyBpbiB5b3VyIFwiKS5jb25jYXQodGhpcy50eXBlLFwiIGdyYXBoLlwiKSk7aWYoYXJndW1lbnRzLmxlbmd0aD4yKXtpZih0aGlzLm11bHRpKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IGNhbm5vdCB1c2UgYSB7c291cmNlLHRhcmdldH0gY29tYm8gd2hlbiBhc2tpbmcgYWJvdXQgYW4gZWRnZSdzIGF0dHJpYnV0ZXMgaW4gYSBNdWx0aUdyYXBoIHNpbmNlIHdlIGNhbm5vdCBpbmZlciB0aGUgb25lIHlvdSB3YW50IGluZm9ybWF0aW9uIGFib3V0LlwiKSk7dmFyIG89XCJcIit0LGE9XCJcIityO2lmKHI9YXJndW1lbnRzWzJdLCEoaT1kKHRoaXMsbyxhLG4pKSl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGNvdWxkIG5vdCBmaW5kIGFuIGVkZ2UgZm9yIHRoZSBnaXZlbiBwYXRoIChcIicpLmNvbmNhdChvLCdcIiAtIFwiJykuY29uY2F0KGEsJ1wiKS4nKSl9ZWxzZXtpZihcIm1peGVkXCIhPT1uKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IGNhbGxpbmcgdGhpcyBtZXRob2Qgd2l0aCBvbmx5IGEga2V5ICh2cy4gYSBzb3VyY2UgYW5kIHRhcmdldCkgZG9lcyBub3QgbWFrZSBzZW5zZSBzaW5jZSBhbiBlZGdlIHdpdGggdGhpcyBrZXkgY291bGQgaGF2ZSB0aGUgb3RoZXIgdHlwZS5cIikpO2lmKHQ9XCJcIit0LCEoaT10aGlzLl9lZGdlcy5nZXQodCkpKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHQsJ1wiIGVkZ2UgaW4gdGhlIGdyYXBoLicpKX1pZihcImZ1bmN0aW9uXCIhPXR5cGVvZiByKXRocm93IG5ldyBCKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IHByb3ZpZGVkIHVwZGF0ZXIgaXMgbm90IGEgZnVuY3Rpb24uXCIpKTtyZXR1cm4gaS5hdHRyaWJ1dGVzPXIoaS5hdHRyaWJ1dGVzKSx0aGlzLmVtaXQoXCJlZGdlQXR0cmlidXRlc1VwZGF0ZWRcIix7a2V5Omkua2V5LHR5cGU6XCJ1cGRhdGVcIixhdHRyaWJ1dGVzOmkuYXR0cmlidXRlc30pLHRoaXN9fX1dO3ZhciBaPU8sJD1QLHR0PWZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzLGU9bnVsbCxuPS0xO3JldHVybiBuZXcgWigoZnVuY3Rpb24oKXtmb3IodmFyIHI9bnVsbDs7KXtpZihudWxsPT09ZSl7aWYoKytuPj10Lmxlbmd0aClyZXR1cm57ZG9uZTohMH07ZT0kKHRbbl0pfWlmKCEwIT09KHI9ZS5uZXh0KCkpLmRvbmUpYnJlYWs7ZT1udWxsfXJldHVybiByfSkpfSxldD1be25hbWU6XCJlZGdlc1wiLHR5cGU6XCJtaXhlZFwifSx7bmFtZTpcImluRWRnZXNcIix0eXBlOlwiZGlyZWN0ZWRcIixkaXJlY3Rpb246XCJpblwifSx7bmFtZTpcIm91dEVkZ2VzXCIsdHlwZTpcImRpcmVjdGVkXCIsZGlyZWN0aW9uOlwib3V0XCJ9LHtuYW1lOlwiaW5ib3VuZEVkZ2VzXCIsdHlwZTpcIm1peGVkXCIsZGlyZWN0aW9uOlwiaW5cIn0se25hbWU6XCJvdXRib3VuZEVkZ2VzXCIsdHlwZTpcIm1peGVkXCIsZGlyZWN0aW9uOlwib3V0XCJ9LHtuYW1lOlwiZGlyZWN0ZWRFZGdlc1wiLHR5cGU6XCJkaXJlY3RlZFwifSx7bmFtZTpcInVuZGlyZWN0ZWRFZGdlc1wiLHR5cGU6XCJ1bmRpcmVjdGVkXCJ9XTtmdW5jdGlvbiBudCh0LGUsbixyKXt2YXIgaT0hMTtmb3IodmFyIG8gaW4gZSlpZihvIT09cil7dmFyIGE9ZVtvXTtpZihpPW4oYS5rZXksYS5hdHRyaWJ1dGVzLGEuc291cmNlLmtleSxhLnRhcmdldC5rZXksYS5zb3VyY2UuYXR0cmlidXRlcyxhLnRhcmdldC5hdHRyaWJ1dGVzLGEudW5kaXJlY3RlZCksdCYmaSlyZXR1cm4gYS5rZXl9fWZ1bmN0aW9uIHJ0KHQsZSxuLHIpe3ZhciBpLG8sYSxjPSExO2Zvcih2YXIgdSBpbiBlKWlmKHUhPT1yKXtpPWVbdV07ZG97aWYobz1pLnNvdXJjZSxhPWkudGFyZ2V0LGM9bihpLmtleSxpLmF0dHJpYnV0ZXMsby5rZXksYS5rZXksby5hdHRyaWJ1dGVzLGEuYXR0cmlidXRlcyxpLnVuZGlyZWN0ZWQpLHQmJmMpcmV0dXJuIGkua2V5O2k9aS5uZXh0fXdoaWxlKHZvaWQgMCE9PWkpfX1mdW5jdGlvbiBpdCh0LGUpe3ZhciBuLHI9T2JqZWN0LmtleXModCksaT1yLmxlbmd0aCxvPTA7cmV0dXJuIG5ldyBPKChmdW5jdGlvbigpe2Rve2lmKG4pbj1uLm5leHQ7ZWxzZXtpZihvPj1pKXJldHVybntkb25lOiEwfTt2YXIgYT1yW28rK107aWYoYT09PWUpe249dm9pZCAwO2NvbnRpbnVlfW49dFthXX19d2hpbGUoIW4pO3JldHVybntkb25lOiExLHZhbHVlOntlZGdlOm4ua2V5LGF0dHJpYnV0ZXM6bi5hdHRyaWJ1dGVzLHNvdXJjZTpuLnNvdXJjZS5rZXksdGFyZ2V0Om4udGFyZ2V0LmtleSxzb3VyY2VBdHRyaWJ1dGVzOm4uc291cmNlLmF0dHJpYnV0ZXMsdGFyZ2V0QXR0cmlidXRlczpuLnRhcmdldC5hdHRyaWJ1dGVzLHVuZGlyZWN0ZWQ6bi51bmRpcmVjdGVkfX19KSl9ZnVuY3Rpb24gb3QodCxlLG4scil7dmFyIGk9ZVtuXTtpZihpKXt2YXIgbz1pLnNvdXJjZSxhPWkudGFyZ2V0O3JldHVybiByKGkua2V5LGkuYXR0cmlidXRlcyxvLmtleSxhLmtleSxvLmF0dHJpYnV0ZXMsYS5hdHRyaWJ1dGVzLGkudW5kaXJlY3RlZCkmJnQ/aS5rZXk6dm9pZCAwfX1mdW5jdGlvbiBhdCh0LGUsbixyKXt2YXIgaT1lW25dO2lmKGkpe3ZhciBvPSExO2Rve2lmKG89cihpLmtleSxpLmF0dHJpYnV0ZXMsaS5zb3VyY2Uua2V5LGkudGFyZ2V0LmtleSxpLnNvdXJjZS5hdHRyaWJ1dGVzLGkudGFyZ2V0LmF0dHJpYnV0ZXMsaS51bmRpcmVjdGVkKSx0JiZvKXJldHVybiBpLmtleTtpPWkubmV4dH13aGlsZSh2b2lkIDAhPT1pKX19ZnVuY3Rpb24gY3QodCxlKXt2YXIgbj10W2VdO3JldHVybiB2b2lkIDAhPT1uLm5leHQ/bmV3IE8oKGZ1bmN0aW9uKCl7aWYoIW4pcmV0dXJue2RvbmU6ITB9O3ZhciB0PXtlZGdlOm4ua2V5LGF0dHJpYnV0ZXM6bi5hdHRyaWJ1dGVzLHNvdXJjZTpuLnNvdXJjZS5rZXksdGFyZ2V0Om4udGFyZ2V0LmtleSxzb3VyY2VBdHRyaWJ1dGVzOm4uc291cmNlLmF0dHJpYnV0ZXMsdGFyZ2V0QXR0cmlidXRlczpuLnRhcmdldC5hdHRyaWJ1dGVzLHVuZGlyZWN0ZWQ6bi51bmRpcmVjdGVkfTtyZXR1cm4gbj1uLm5leHQse2RvbmU6ITEsdmFsdWU6dH19KSk6Ty5vZih7ZWRnZTpuLmtleSxhdHRyaWJ1dGVzOm4uYXR0cmlidXRlcyxzb3VyY2U6bi5zb3VyY2Uua2V5LHRhcmdldDpuLnRhcmdldC5rZXksc291cmNlQXR0cmlidXRlczpuLnNvdXJjZS5hdHRyaWJ1dGVzLHRhcmdldEF0dHJpYnV0ZXM6bi50YXJnZXQuYXR0cmlidXRlcyx1bmRpcmVjdGVkOm4udW5kaXJlY3RlZH0pfWZ1bmN0aW9uIHV0KHQsZSl7aWYoMD09PXQuc2l6ZSlyZXR1cm5bXTtpZihcIm1peGVkXCI9PT1lfHxlPT09dC50eXBlKXJldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIEFycmF5LmZyb20/QXJyYXkuZnJvbSh0Ll9lZGdlcy5rZXlzKCkpOksodC5fZWRnZXMua2V5cygpLHQuX2VkZ2VzLnNpemUpO2Zvcih2YXIgbixyLGk9XCJ1bmRpcmVjdGVkXCI9PT1lP3QudW5kaXJlY3RlZFNpemU6dC5kaXJlY3RlZFNpemUsbz1uZXcgQXJyYXkoaSksYT1cInVuZGlyZWN0ZWRcIj09PWUsYz10Ll9lZGdlcy52YWx1ZXMoKSx1PTA7ITAhPT0obj1jLm5leHQoKSkuZG9uZTspKHI9bi52YWx1ZSkudW5kaXJlY3RlZD09PWEmJihvW3UrK109ci5rZXkpO3JldHVybiBvfWZ1bmN0aW9uIGR0KHQsZSxuLHIpe2lmKDAhPT1lLnNpemUpZm9yKHZhciBpLG8sYT1cIm1peGVkXCIhPT1uJiZuIT09ZS50eXBlLGM9XCJ1bmRpcmVjdGVkXCI9PT1uLHU9ITEsZD1lLl9lZGdlcy52YWx1ZXMoKTshMCE9PShpPWQubmV4dCgpKS5kb25lOylpZihvPWkudmFsdWUsIWF8fG8udW5kaXJlY3RlZD09PWMpe3ZhciBzPW8saD1zLmtleSxwPXMuYXR0cmlidXRlcyxmPXMuc291cmNlLGw9cy50YXJnZXQ7aWYodT1yKGgscCxmLmtleSxsLmtleSxmLmF0dHJpYnV0ZXMsbC5hdHRyaWJ1dGVzLG8udW5kaXJlY3RlZCksdCYmdSlyZXR1cm4gaH19ZnVuY3Rpb24gc3QodCxlKXtpZigwPT09dC5zaXplKXJldHVybiBPLmVtcHR5KCk7dmFyIG49XCJtaXhlZFwiIT09ZSYmZSE9PXQudHlwZSxyPVwidW5kaXJlY3RlZFwiPT09ZSxpPXQuX2VkZ2VzLnZhbHVlcygpO3JldHVybiBuZXcgTygoZnVuY3Rpb24oKXtmb3IodmFyIHQsZTs7KXtpZigodD1pLm5leHQoKSkuZG9uZSlyZXR1cm4gdDtpZihlPXQudmFsdWUsIW58fGUudW5kaXJlY3RlZD09PXIpYnJlYWt9cmV0dXJue3ZhbHVlOntlZGdlOmUua2V5LGF0dHJpYnV0ZXM6ZS5hdHRyaWJ1dGVzLHNvdXJjZTplLnNvdXJjZS5rZXksdGFyZ2V0OmUudGFyZ2V0LmtleSxzb3VyY2VBdHRyaWJ1dGVzOmUuc291cmNlLmF0dHJpYnV0ZXMsdGFyZ2V0QXR0cmlidXRlczplLnRhcmdldC5hdHRyaWJ1dGVzLHVuZGlyZWN0ZWQ6ZS51bmRpcmVjdGVkfSxkb25lOiExfX0pKX1mdW5jdGlvbiBodCh0LGUsbixyLGksbyl7dmFyIGEsYz1lP3J0Om50O2lmKFwidW5kaXJlY3RlZFwiIT09bil7aWYoXCJvdXRcIiE9PXImJihhPWModCxpLmluLG8pLHQmJmEpKXJldHVybiBhO2lmKFwiaW5cIiE9PXImJihhPWModCxpLm91dCxvLHI/dm9pZCAwOmkua2V5KSx0JiZhKSlyZXR1cm4gYX1pZihcImRpcmVjdGVkXCIhPT1uJiYoYT1jKHQsaS51bmRpcmVjdGVkLG8pLHQmJmEpKXJldHVybiBhfWZ1bmN0aW9uIHB0KHQsZSxuLHIpe3ZhciBpPVtdO3JldHVybiBodCghMSx0LGUsbixyLChmdW5jdGlvbih0KXtpLnB1c2godCl9KSksaX1mdW5jdGlvbiBmdCh0LGUsbil7dmFyIHI9Ty5lbXB0eSgpO3JldHVyblwidW5kaXJlY3RlZFwiIT09dCYmKFwib3V0XCIhPT1lJiZ2b2lkIDAhPT1uLmluJiYocj10dChyLGl0KG4uaW4pKSksXCJpblwiIT09ZSYmdm9pZCAwIT09bi5vdXQmJihyPXR0KHIsaXQobi5vdXQsZT92b2lkIDA6bi5rZXkpKSkpLFwiZGlyZWN0ZWRcIiE9PXQmJnZvaWQgMCE9PW4udW5kaXJlY3RlZCYmKHI9dHQocixpdChuLnVuZGlyZWN0ZWQpKSkscn1mdW5jdGlvbiBsdCh0LGUsbixyLGksbyxhKXt2YXIgYyx1PW4/YXQ6b3Q7aWYoXCJ1bmRpcmVjdGVkXCIhPT1lKXtpZih2b2lkIDAhPT1pLmluJiZcIm91dFwiIT09ciYmKGM9dSh0LGkuaW4sbyxhKSx0JiZjKSlyZXR1cm4gYztpZih2b2lkIDAhPT1pLm91dCYmXCJpblwiIT09ciYmKHJ8fGkua2V5IT09bykmJihjPXUodCxpLm91dCxvLGEpLHQmJmMpKXJldHVybiBjfWlmKFwiZGlyZWN0ZWRcIiE9PWUmJnZvaWQgMCE9PWkudW5kaXJlY3RlZCYmKGM9dSh0LGkudW5kaXJlY3RlZCxvLGEpLHQmJmMpKXJldHVybiBjfWZ1bmN0aW9uIGd0KHQsZSxuLHIsaSl7dmFyIG89W107cmV0dXJuIGx0KCExLHQsZSxuLHIsaSwoZnVuY3Rpb24odCl7by5wdXNoKHQpfSkpLG99ZnVuY3Rpb24geXQodCxlLG4scil7dmFyIGk9Ty5lbXB0eSgpO3JldHVyblwidW5kaXJlY3RlZFwiIT09dCYmKHZvaWQgMCE9PW4uaW4mJlwib3V0XCIhPT1lJiZyIGluIG4uaW4mJihpPXR0KGksY3Qobi5pbixyKSkpLHZvaWQgMCE9PW4ub3V0JiZcImluXCIhPT1lJiZyIGluIG4ub3V0JiYoZXx8bi5rZXkhPT1yKSYmKGk9dHQoaSxjdChuLm91dCxyKSkpKSxcImRpcmVjdGVkXCIhPT10JiZ2b2lkIDAhPT1uLnVuZGlyZWN0ZWQmJnIgaW4gbi51bmRpcmVjdGVkJiYoaT10dChpLGN0KG4udW5kaXJlY3RlZCxyKSkpLGl9dmFyIHd0PVt7bmFtZTpcIm5laWdoYm9yc1wiLHR5cGU6XCJtaXhlZFwifSx7bmFtZTpcImluTmVpZ2hib3JzXCIsdHlwZTpcImRpcmVjdGVkXCIsZGlyZWN0aW9uOlwiaW5cIn0se25hbWU6XCJvdXROZWlnaGJvcnNcIix0eXBlOlwiZGlyZWN0ZWRcIixkaXJlY3Rpb246XCJvdXRcIn0se25hbWU6XCJpbmJvdW5kTmVpZ2hib3JzXCIsdHlwZTpcIm1peGVkXCIsZGlyZWN0aW9uOlwiaW5cIn0se25hbWU6XCJvdXRib3VuZE5laWdoYm9yc1wiLHR5cGU6XCJtaXhlZFwiLGRpcmVjdGlvbjpcIm91dFwifSx7bmFtZTpcImRpcmVjdGVkTmVpZ2hib3JzXCIsdHlwZTpcImRpcmVjdGVkXCJ9LHtuYW1lOlwidW5kaXJlY3RlZE5laWdoYm9yc1wiLHR5cGU6XCJ1bmRpcmVjdGVkXCJ9XTtmdW5jdGlvbiB2dCgpe3RoaXMuQT1udWxsLHRoaXMuQj1udWxsfWZ1bmN0aW9uIGJ0KHQsZSxuLHIsaSl7Zm9yKHZhciBvIGluIHIpe3ZhciBhPXJbb10sYz1hLnNvdXJjZSx1PWEudGFyZ2V0LGQ9Yz09PW4/dTpjO2lmKCFlfHwhZS5oYXMoZC5rZXkpKXt2YXIgcz1pKGQua2V5LGQuYXR0cmlidXRlcyk7aWYodCYmcylyZXR1cm4gZC5rZXl9fX1mdW5jdGlvbiBtdCh0LGUsbixyLGkpe2lmKFwibWl4ZWRcIiE9PWUpe2lmKFwidW5kaXJlY3RlZFwiPT09ZSlyZXR1cm4gYnQodCxudWxsLHIsci51bmRpcmVjdGVkLGkpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBuKXJldHVybiBidCh0LG51bGwscixyW25dLGkpfXZhciBvLGE9bmV3IHZ0O2lmKFwidW5kaXJlY3RlZFwiIT09ZSl7aWYoXCJvdXRcIiE9PW4pe2lmKG89YnQodCxudWxsLHIsci5pbixpKSx0JiZvKXJldHVybiBvO2Eud3JhcChyLmluKX1pZihcImluXCIhPT1uKXtpZihvPWJ0KHQsYSxyLHIub3V0LGkpLHQmJm8pcmV0dXJuIG87YS53cmFwKHIub3V0KX19aWYoXCJkaXJlY3RlZFwiIT09ZSYmKG89YnQodCxhLHIsci51bmRpcmVjdGVkLGkpLHQmJm8pKXJldHVybiBvfWZ1bmN0aW9uIGt0KHQsZSxuKXt2YXIgcj1PYmplY3Qua2V5cyhuKSxpPXIubGVuZ3RoLG89MDtyZXR1cm4gbmV3IE8oKGZ1bmN0aW9uKCl7dmFyIGE9bnVsbDtkb3tpZihvPj1pKXJldHVybiB0JiZ0LndyYXAobikse2RvbmU6ITB9O3ZhciBjPW5bcltvKytdXSx1PWMuc291cmNlLGQ9Yy50YXJnZXQ7YT11PT09ZT9kOnUsdCYmdC5oYXMoYS5rZXkpJiYoYT1udWxsKX13aGlsZShudWxsPT09YSk7cmV0dXJue2RvbmU6ITEsdmFsdWU6e25laWdoYm9yOmEua2V5LGF0dHJpYnV0ZXM6YS5hdHRyaWJ1dGVzfX19KSl9ZnVuY3Rpb24gX3QodCxlKXt2YXIgbj1lLm5hbWUscj1lLnR5cGUsaT1lLmRpcmVjdGlvbjt0LnByb3RvdHlwZVtuXT1mdW5jdGlvbih0KXtpZihcIm1peGVkXCIhPT1yJiZcIm1peGVkXCIhPT10aGlzLnR5cGUmJnIhPT10aGlzLnR5cGUpcmV0dXJuW107dD1cIlwiK3Q7dmFyIGU9dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKHZvaWQgMD09PWUpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQobiwnOiBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVybiBmdW5jdGlvbih0LGUsbil7aWYoXCJtaXhlZFwiIT09dCl7aWYoXCJ1bmRpcmVjdGVkXCI9PT10KXJldHVybiBPYmplY3Qua2V5cyhuLnVuZGlyZWN0ZWQpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBPYmplY3Qua2V5cyhuW2VdKX12YXIgcj1bXTtyZXR1cm4gbXQoITEsdCxlLG4sKGZ1bmN0aW9uKHQpe3IucHVzaCh0KX0pKSxyfShcIm1peGVkXCI9PT1yP3RoaXMudHlwZTpyLGksZSl9fWZ1bmN0aW9uIEd0KHQsZSl7dmFyIG49ZS5uYW1lLHI9ZS50eXBlLGk9ZS5kaXJlY3Rpb24sbz1uLnNsaWNlKDAsLTEpK1wiRW50cmllc1wiO3QucHJvdG90eXBlW29dPWZ1bmN0aW9uKHQpe2lmKFwibWl4ZWRcIiE9PXImJlwibWl4ZWRcIiE9PXRoaXMudHlwZSYmciE9PXRoaXMudHlwZSlyZXR1cm4gTy5lbXB0eSgpO3Q9XCJcIit0O3ZhciBlPXRoaXMuX25vZGVzLmdldCh0KTtpZih2b2lkIDA9PT1lKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KG8sJzogY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm4gZnVuY3Rpb24odCxlLG4pe2lmKFwibWl4ZWRcIiE9PXQpe2lmKFwidW5kaXJlY3RlZFwiPT09dClyZXR1cm4ga3QobnVsbCxuLG4udW5kaXJlY3RlZCk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIGt0KG51bGwsbixuW2VdKX12YXIgcj1PLmVtcHR5KCksaT1uZXcgdnQ7cmV0dXJuXCJ1bmRpcmVjdGVkXCIhPT10JiYoXCJvdXRcIiE9PWUmJihyPXR0KHIsa3QoaSxuLG4uaW4pKSksXCJpblwiIT09ZSYmKHI9dHQocixrdChpLG4sbi5vdXQpKSkpLFwiZGlyZWN0ZWRcIiE9PXQmJihyPXR0KHIsa3QoaSxuLG4udW5kaXJlY3RlZCkpKSxyfShcIm1peGVkXCI9PT1yP3RoaXMudHlwZTpyLGksZSl9fWZ1bmN0aW9uIHh0KHQsZSxuLHIsaSl7Zm9yKHZhciBvLGEsYyx1LGQscyxoLHA9ci5fbm9kZXMudmFsdWVzKCksZj1yLnR5cGU7ITAhPT0obz1wLm5leHQoKSkuZG9uZTspe3ZhciBsPSExO2lmKGE9by52YWx1ZSxcInVuZGlyZWN0ZWRcIiE9PWYpZm9yKGMgaW4gdT1hLm91dCl7ZD11W2NdO2Rve2lmKHM9ZC50YXJnZXQsbD0hMCxoPWkoYS5rZXkscy5rZXksYS5hdHRyaWJ1dGVzLHMuYXR0cmlidXRlcyxkLmtleSxkLmF0dHJpYnV0ZXMsZC51bmRpcmVjdGVkKSx0JiZoKXJldHVybiBkO2Q9ZC5uZXh0fXdoaWxlKGQpfWlmKFwiZGlyZWN0ZWRcIiE9PWYpZm9yKGMgaW4gdT1hLnVuZGlyZWN0ZWQpaWYoIShlJiZhLmtleT5jKSl7ZD11W2NdO2Rve2lmKChzPWQudGFyZ2V0KS5rZXkhPT1jJiYocz1kLnNvdXJjZSksbD0hMCxoPWkoYS5rZXkscy5rZXksYS5hdHRyaWJ1dGVzLHMuYXR0cmlidXRlcyxkLmtleSxkLmF0dHJpYnV0ZXMsZC51bmRpcmVjdGVkKSx0JiZoKXJldHVybiBkO2Q9ZC5uZXh0fXdoaWxlKGQpfWlmKG4mJiFsJiYoaD1pKGEua2V5LG51bGwsYS5hdHRyaWJ1dGVzLG51bGwsbnVsbCxudWxsLG51bGwpLHQmJmgpKXJldHVybiBudWxsfX1mdW5jdGlvbiBFdCh0KXtpZighcyh0KSl0aHJvdyBuZXcgQignR3JhcGguaW1wb3J0OiBpbnZhbGlkIHNlcmlhbGl6ZWQgbm9kZS4gQSBzZXJpYWxpemVkIG5vZGUgc2hvdWxkIGJlIGEgcGxhaW4gb2JqZWN0IHdpdGggYXQgbGVhc3QgYSBcImtleVwiIHByb3BlcnR5LicpO2lmKCEoXCJrZXlcImluIHQpKXRocm93IG5ldyBCKFwiR3JhcGguaW1wb3J0OiBzZXJpYWxpemVkIG5vZGUgaXMgbWlzc2luZyBpdHMga2V5LlwiKTtpZihcImF0dHJpYnV0ZXNcImluIHQmJighcyh0LmF0dHJpYnV0ZXMpfHxudWxsPT09dC5hdHRyaWJ1dGVzKSl0aHJvdyBuZXcgQihcIkdyYXBoLmltcG9ydDogaW52YWxpZCBhdHRyaWJ1dGVzLiBBdHRyaWJ1dGVzIHNob3VsZCBiZSBhIHBsYWluIG9iamVjdCwgbnVsbCBvciBvbWl0dGVkLlwiKX1mdW5jdGlvbiBBdCh0KXtpZighcyh0KSl0aHJvdyBuZXcgQignR3JhcGguaW1wb3J0OiBpbnZhbGlkIHNlcmlhbGl6ZWQgZWRnZS4gQSBzZXJpYWxpemVkIGVkZ2Ugc2hvdWxkIGJlIGEgcGxhaW4gb2JqZWN0IHdpdGggYXQgbGVhc3QgYSBcInNvdXJjZVwiICYgXCJ0YXJnZXRcIiBwcm9wZXJ0eS4nKTtpZighKFwic291cmNlXCJpbiB0KSl0aHJvdyBuZXcgQihcIkdyYXBoLmltcG9ydDogc2VyaWFsaXplZCBlZGdlIGlzIG1pc3NpbmcgaXRzIHNvdXJjZS5cIik7aWYoIShcInRhcmdldFwiaW4gdCkpdGhyb3cgbmV3IEIoXCJHcmFwaC5pbXBvcnQ6IHNlcmlhbGl6ZWQgZWRnZSBpcyBtaXNzaW5nIGl0cyB0YXJnZXQuXCIpO2lmKFwiYXR0cmlidXRlc1wiaW4gdCYmKCFzKHQuYXR0cmlidXRlcyl8fG51bGw9PT10LmF0dHJpYnV0ZXMpKXRocm93IG5ldyBCKFwiR3JhcGguaW1wb3J0OiBpbnZhbGlkIGF0dHJpYnV0ZXMuIEF0dHJpYnV0ZXMgc2hvdWxkIGJlIGEgcGxhaW4gb2JqZWN0LCBudWxsIG9yIG9taXR0ZWQuXCIpO2lmKFwidW5kaXJlY3RlZFwiaW4gdCYmXCJib29sZWFuXCIhPXR5cGVvZiB0LnVuZGlyZWN0ZWQpdGhyb3cgbmV3IEIoXCJHcmFwaC5pbXBvcnQ6IGludmFsaWQgdW5kaXJlY3RlZG5lc3MgaW5mb3JtYXRpb24uIFVuZGlyZWN0ZWQgc2hvdWxkIGJlIGJvb2xlYW4gb3Igb21pdHRlZC5cIil9dnQucHJvdG90eXBlLndyYXA9ZnVuY3Rpb24odCl7bnVsbD09PXRoaXMuQT90aGlzLkE9dDpudWxsPT09dGhpcy5CJiYodGhpcy5CPXQpfSx2dC5wcm90b3R5cGUuaGFzPWZ1bmN0aW9uKHQpe3JldHVybiBudWxsIT09dGhpcy5BJiZ0IGluIHRoaXMuQXx8bnVsbCE9PXRoaXMuQiYmdCBpbiB0aGlzLkJ9O3ZhciBMdCxTdD0oTHQ9MjU1Jk1hdGguZmxvb3IoMjU2Kk1hdGgucmFuZG9tKCkpLGZ1bmN0aW9uKCl7cmV0dXJuIEx0Kyt9KSxEdD1uZXcgU2V0KFtcImRpcmVjdGVkXCIsXCJ1bmRpcmVjdGVkXCIsXCJtaXhlZFwiXSksVXQ9bmV3IFNldChbXCJkb21haW5cIixcIl9ldmVudHNcIixcIl9ldmVudHNDb3VudFwiLFwiX21heExpc3RlbmVyc1wiXSksTnQ9e2FsbG93U2VsZkxvb3BzOiEwLG11bHRpOiExLHR5cGU6XCJtaXhlZFwifTtmdW5jdGlvbiBPdCh0LGUsbil7dmFyIHI9bmV3IHQuTm9kZURhdGFDbGFzcyhlLG4pO3JldHVybiB0Ll9ub2Rlcy5zZXQoZSxyKSx0LmVtaXQoXCJub2RlQWRkZWRcIix7a2V5OmUsYXR0cmlidXRlczpufSkscn1mdW5jdGlvbiBqdCh0LGUsbixyLGksbyxhLGMpe2lmKCFyJiZcInVuZGlyZWN0ZWRcIj09PXQudHlwZSl0aHJvdyBuZXcgSShcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiB5b3UgY2Fubm90IGFkZCBhIGRpcmVjdGVkIGVkZ2UgdG8gYW4gdW5kaXJlY3RlZCBncmFwaC4gVXNlIHRoZSAjLmFkZEVkZ2Ugb3IgIy5hZGRVbmRpcmVjdGVkRWRnZSBpbnN0ZWFkLlwiKSk7aWYociYmXCJkaXJlY3RlZFwiPT09dC50eXBlKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IHlvdSBjYW5ub3QgYWRkIGFuIHVuZGlyZWN0ZWQgZWRnZSB0byBhIGRpcmVjdGVkIGdyYXBoLiBVc2UgdGhlICMuYWRkRWRnZSBvciAjLmFkZERpcmVjdGVkRWRnZSBpbnN0ZWFkLlwiKSk7aWYoYyYmIXMoYykpdGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBpbnZhbGlkIGF0dHJpYnV0ZXMuIEV4cGVjdGluZyBhbiBvYmplY3QgYnV0IGdvdCBcIicpLmNvbmNhdChjLCdcIicpKTtpZihvPVwiXCIrbyxhPVwiXCIrYSxjPWN8fHt9LCF0LmFsbG93U2VsZkxvb3BzJiZvPT09YSl0aHJvdyBuZXcgSShcIkdyYXBoLlwiLmNvbmNhdChlLCc6IHNvdXJjZSAmIHRhcmdldCBhcmUgdGhlIHNhbWUgKFwiJykuY29uY2F0KG8sXCJcXFwiKSwgdGh1cyBjcmVhdGluZyBhIGxvb3AgZXhwbGljaXRseSBmb3JiaWRkZW4gYnkgdGhpcyBncmFwaCAnYWxsb3dTZWxmTG9vcHMnIG9wdGlvbiBzZXQgdG8gZmFsc2UuXCIpKTt2YXIgdT10Ll9ub2Rlcy5nZXQobyksZD10Ll9ub2Rlcy5nZXQoYSk7aWYoIXUpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBzb3VyY2Ugbm9kZSBcIicpLmNvbmNhdChvLCdcIiBub3QgZm91bmQuJykpO2lmKCFkKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KGUsJzogdGFyZ2V0IG5vZGUgXCInKS5jb25jYXQoYSwnXCIgbm90IGZvdW5kLicpKTt2YXIgaD17a2V5Om51bGwsdW5kaXJlY3RlZDpyLHNvdXJjZTpvLHRhcmdldDphLGF0dHJpYnV0ZXM6Y307aWYobilpPXQuX2VkZ2VLZXlHZW5lcmF0b3IoKTtlbHNlIGlmKGk9XCJcIitpLHQuX2VkZ2VzLmhhcyhpKSl0aHJvdyBuZXcgSShcIkdyYXBoLlwiLmNvbmNhdChlLCc6IHRoZSBcIicpLmNvbmNhdChpLCdcIiBlZGdlIGFscmVhZHkgZXhpc3RzIGluIHRoZSBncmFwaC4nKSk7aWYoIXQubXVsdGkmJihyP3ZvaWQgMCE9PXUudW5kaXJlY3RlZFthXTp2b2lkIDAhPT11Lm91dFthXSkpdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBhbiBlZGdlIGxpbmtpbmcgXCInKS5jb25jYXQobywnXCIgdG8gXCInKS5jb25jYXQoYSxcIlxcXCIgYWxyZWFkeSBleGlzdHMuIElmIHlvdSByZWFsbHkgd2FudCB0byBhZGQgbXVsdGlwbGUgZWRnZXMgbGlua2luZyB0aG9zZSBub2RlcywgeW91IHNob3VsZCBjcmVhdGUgYSBtdWx0aSBncmFwaCBieSB1c2luZyB0aGUgJ211bHRpJyBvcHRpb24uXCIpKTt2YXIgcD1uZXcgVihyLGksdSxkLGMpO3QuX2VkZ2VzLnNldChpLHApO3ZhciBmPW89PT1hO3JldHVybiByPyh1LnVuZGlyZWN0ZWREZWdyZWUrKyxkLnVuZGlyZWN0ZWREZWdyZWUrKyxmJiYodS51bmRpcmVjdGVkTG9vcHMrKyx0Ll91bmRpcmVjdGVkU2VsZkxvb3BDb3VudCsrKSk6KHUub3V0RGVncmVlKyssZC5pbkRlZ3JlZSsrLGYmJih1LmRpcmVjdGVkTG9vcHMrKyx0Ll9kaXJlY3RlZFNlbGZMb29wQ291bnQrKykpLHQubXVsdGk/cC5hdHRhY2hNdWx0aSgpOnAuYXR0YWNoKCkscj90Ll91bmRpcmVjdGVkU2l6ZSsrOnQuX2RpcmVjdGVkU2l6ZSsrLGgua2V5PWksdC5lbWl0KFwiZWRnZUFkZGVkXCIsaCksaX1mdW5jdGlvbiBDdCh0LGUsbixyLGksbyxhLGMsZCl7aWYoIXImJlwidW5kaXJlY3RlZFwiPT09dC50eXBlKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IHlvdSBjYW5ub3QgbWVyZ2UvdXBkYXRlIGEgZGlyZWN0ZWQgZWRnZSB0byBhbiB1bmRpcmVjdGVkIGdyYXBoLiBVc2UgdGhlICMubWVyZ2VFZGdlLyMudXBkYXRlRWRnZSBvciAjLmFkZFVuZGlyZWN0ZWRFZGdlIGluc3RlYWQuXCIpKTtpZihyJiZcImRpcmVjdGVkXCI9PT10LnR5cGUpdGhyb3cgbmV3IEkoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogeW91IGNhbm5vdCBtZXJnZS91cGRhdGUgYW4gdW5kaXJlY3RlZCBlZGdlIHRvIGEgZGlyZWN0ZWQgZ3JhcGguIFVzZSB0aGUgIy5tZXJnZUVkZ2UvIy51cGRhdGVFZGdlIG9yICMuYWRkRGlyZWN0ZWRFZGdlIGluc3RlYWQuXCIpKTtpZihjKWlmKGQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGMpdGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBpbnZhbGlkIHVwZGF0ZXIgZnVuY3Rpb24uIEV4cGVjdGluZyBhIGZ1bmN0aW9uIGJ1dCBnb3QgXCInKS5jb25jYXQoYywnXCInKSl9ZWxzZSBpZighcyhjKSl0aHJvdyBuZXcgQihcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGludmFsaWQgYXR0cmlidXRlcy4gRXhwZWN0aW5nIGFuIG9iamVjdCBidXQgZ290IFwiJykuY29uY2F0KGMsJ1wiJykpO3ZhciBoO2lmKG89XCJcIitvLGE9XCJcIithLGQmJihoPWMsYz12b2lkIDApLCF0LmFsbG93U2VsZkxvb3BzJiZvPT09YSl0aHJvdyBuZXcgSShcIkdyYXBoLlwiLmNvbmNhdChlLCc6IHNvdXJjZSAmIHRhcmdldCBhcmUgdGhlIHNhbWUgKFwiJykuY29uY2F0KG8sXCJcXFwiKSwgdGh1cyBjcmVhdGluZyBhIGxvb3AgZXhwbGljaXRseSBmb3JiaWRkZW4gYnkgdGhpcyBncmFwaCAnYWxsb3dTZWxmTG9vcHMnIG9wdGlvbiBzZXQgdG8gZmFsc2UuXCIpKTt2YXIgcCxmLGw9dC5fbm9kZXMuZ2V0KG8pLGc9dC5fbm9kZXMuZ2V0KGEpO2lmKCFuJiYocD10Ll9lZGdlcy5nZXQoaSkpKXtpZighKHAuc291cmNlLmtleT09PW8mJnAudGFyZ2V0LmtleT09PWF8fHImJnAuc291cmNlLmtleT09PWEmJnAudGFyZ2V0LmtleT09PW8pKXRocm93IG5ldyBJKFwiR3JhcGguXCIuY29uY2F0KGUsJzogaW5jb25zaXN0ZW5jeSBkZXRlY3RlZCB3aGVuIGF0dGVtcHRpbmcgdG8gbWVyZ2UgdGhlIFwiJykuY29uY2F0KGksJ1wiIGVkZ2Ugd2l0aCBcIicpLmNvbmNhdChvLCdcIiBzb3VyY2UgJiBcIicpLmNvbmNhdChhLCdcIiB0YXJnZXQgdnMuIChcIicpLmNvbmNhdChwLnNvdXJjZS5rZXksJ1wiLCBcIicpLmNvbmNhdChwLnRhcmdldC5rZXksJ1wiKS4nKSk7Zj1wfWlmKGZ8fHQubXVsdGl8fCFsfHwoZj1yP2wudW5kaXJlY3RlZFthXTpsLm91dFthXSksZil7dmFyIHk9W2Yua2V5LCExLCExLCExXTtpZihkPyFoOiFjKXJldHVybiB5O2lmKGQpe3ZhciB3PWYuYXR0cmlidXRlcztmLmF0dHJpYnV0ZXM9aCh3KSx0LmVtaXQoXCJlZGdlQXR0cmlidXRlc1VwZGF0ZWRcIix7dHlwZTpcInJlcGxhY2VcIixrZXk6Zi5rZXksYXR0cmlidXRlczpmLmF0dHJpYnV0ZXN9KX1lbHNlIHUoZi5hdHRyaWJ1dGVzLGMpLHQuZW1pdChcImVkZ2VBdHRyaWJ1dGVzVXBkYXRlZFwiLHt0eXBlOlwibWVyZ2VcIixrZXk6Zi5rZXksYXR0cmlidXRlczpmLmF0dHJpYnV0ZXMsZGF0YTpjfSk7cmV0dXJuIHl9Yz1jfHx7fSxkJiZoJiYoYz1oKGMpKTt2YXIgdj17a2V5Om51bGwsdW5kaXJlY3RlZDpyLHNvdXJjZTpvLHRhcmdldDphLGF0dHJpYnV0ZXM6Y307aWYobilpPXQuX2VkZ2VLZXlHZW5lcmF0b3IoKTtlbHNlIGlmKGk9XCJcIitpLHQuX2VkZ2VzLmhhcyhpKSl0aHJvdyBuZXcgSShcIkdyYXBoLlwiLmNvbmNhdChlLCc6IHRoZSBcIicpLmNvbmNhdChpLCdcIiBlZGdlIGFscmVhZHkgZXhpc3RzIGluIHRoZSBncmFwaC4nKSk7dmFyIGI9ITEsbT0hMTtsfHwobD1PdCh0LG8se30pLGI9ITAsbz09PWEmJihnPWwsbT0hMCkpLGd8fChnPU90KHQsYSx7fSksbT0hMCkscD1uZXcgVihyLGksbCxnLGMpLHQuX2VkZ2VzLnNldChpLHApO3ZhciBrPW89PT1hO3JldHVybiByPyhsLnVuZGlyZWN0ZWREZWdyZWUrKyxnLnVuZGlyZWN0ZWREZWdyZWUrKyxrJiYobC51bmRpcmVjdGVkTG9vcHMrKyx0Ll91bmRpcmVjdGVkU2VsZkxvb3BDb3VudCsrKSk6KGwub3V0RGVncmVlKyssZy5pbkRlZ3JlZSsrLGsmJihsLmRpcmVjdGVkTG9vcHMrKyx0Ll9kaXJlY3RlZFNlbGZMb29wQ291bnQrKykpLHQubXVsdGk/cC5hdHRhY2hNdWx0aSgpOnAuYXR0YWNoKCkscj90Ll91bmRpcmVjdGVkU2l6ZSsrOnQuX2RpcmVjdGVkU2l6ZSsrLHYua2V5PWksdC5lbWl0KFwiZWRnZUFkZGVkXCIsdiksW2ksITAsYixtXX1mdW5jdGlvbiBNdCh0LGUpe3QuX2VkZ2VzLmRlbGV0ZShlLmtleSk7dmFyIG49ZS5zb3VyY2Uscj1lLnRhcmdldCxpPWUuYXR0cmlidXRlcyxvPWUudW5kaXJlY3RlZCxhPW49PT1yO28/KG4udW5kaXJlY3RlZERlZ3JlZS0tLHIudW5kaXJlY3RlZERlZ3JlZS0tLGEmJihuLnVuZGlyZWN0ZWRMb29wcy0tLHQuX3VuZGlyZWN0ZWRTZWxmTG9vcENvdW50LS0pKToobi5vdXREZWdyZWUtLSxyLmluRGVncmVlLS0sYSYmKG4uZGlyZWN0ZWRMb29wcy0tLHQuX2RpcmVjdGVkU2VsZkxvb3BDb3VudC0tKSksdC5tdWx0aT9lLmRldGFjaE11bHRpKCk6ZS5kZXRhY2goKSxvP3QuX3VuZGlyZWN0ZWRTaXplLS06dC5fZGlyZWN0ZWRTaXplLS0sdC5lbWl0KFwiZWRnZURyb3BwZWRcIix7a2V5OmUua2V5LGF0dHJpYnV0ZXM6aSxzb3VyY2U6bi5rZXksdGFyZ2V0OnIua2V5LHVuZGlyZWN0ZWQ6b30pfXZhciB6dD1mdW5jdGlvbihuKXtmdW5jdGlvbiByKHQpe3ZhciBlO2lmKGU9bi5jYWxsKHRoaXMpfHx0aGlzLFwiYm9vbGVhblwiIT10eXBlb2YodD11KHt9LE50LHQpKS5tdWx0aSl0aHJvdyBuZXcgQihcIkdyYXBoLmNvbnN0cnVjdG9yOiBpbnZhbGlkICdtdWx0aScgb3B0aW9uLiBFeHBlY3RpbmcgYSBib29sZWFuIGJ1dCBnb3QgXFxcIlwiLmNvbmNhdCh0Lm11bHRpLCdcIi4nKSk7aWYoIUR0Lmhhcyh0LnR5cGUpKXRocm93IG5ldyBCKCdHcmFwaC5jb25zdHJ1Y3RvcjogaW52YWxpZCBcXCd0eXBlXFwnIG9wdGlvbi4gU2hvdWxkIGJlIG9uZSBvZiBcIm1peGVkXCIsIFwiZGlyZWN0ZWRcIiBvciBcInVuZGlyZWN0ZWRcIiBidXQgZ290IFwiJy5jb25jYXQodC50eXBlLCdcIi4nKSk7aWYoXCJib29sZWFuXCIhPXR5cGVvZiB0LmFsbG93U2VsZkxvb3BzKXRocm93IG5ldyBCKFwiR3JhcGguY29uc3RydWN0b3I6IGludmFsaWQgJ2FsbG93U2VsZkxvb3BzJyBvcHRpb24uIEV4cGVjdGluZyBhIGJvb2xlYW4gYnV0IGdvdCBcXFwiXCIuY29uY2F0KHQuYWxsb3dTZWxmTG9vcHMsJ1wiLicpKTt2YXIgcj1cIm1peGVkXCI9PT10LnR5cGU/WTpcImRpcmVjdGVkXCI9PT10LnR5cGU/cTpKO3AoYyhlKSxcIk5vZGVEYXRhQ2xhc3NcIixyKTt2YXIgaT1cImdlaWRfXCIrU3QoKStcIl9cIixvPTA7cmV0dXJuIHAoYyhlKSxcIl9hdHRyaWJ1dGVzXCIse30pLHAoYyhlKSxcIl9ub2Rlc1wiLG5ldyBNYXApLHAoYyhlKSxcIl9lZGdlc1wiLG5ldyBNYXApLHAoYyhlKSxcIl9kaXJlY3RlZFNpemVcIiwwKSxwKGMoZSksXCJfdW5kaXJlY3RlZFNpemVcIiwwKSxwKGMoZSksXCJfZGlyZWN0ZWRTZWxmTG9vcENvdW50XCIsMCkscChjKGUpLFwiX3VuZGlyZWN0ZWRTZWxmTG9vcENvdW50XCIsMCkscChjKGUpLFwiX2VkZ2VLZXlHZW5lcmF0b3JcIiwoZnVuY3Rpb24oKXt2YXIgdDtkb3t0PWkrbysrfXdoaWxlKGUuX2VkZ2VzLmhhcyh0KSk7cmV0dXJuIHR9KSkscChjKGUpLFwiX29wdGlvbnNcIix0KSxVdC5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gcChjKGUpLHQsZVt0XSl9KSksZihjKGUpLFwib3JkZXJcIiwoZnVuY3Rpb24oKXtyZXR1cm4gZS5fbm9kZXMuc2l6ZX0pKSxmKGMoZSksXCJzaXplXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIGUuX2VkZ2VzLnNpemV9KSksZihjKGUpLFwiZGlyZWN0ZWRTaXplXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIGUuX2RpcmVjdGVkU2l6ZX0pKSxmKGMoZSksXCJ1bmRpcmVjdGVkU2l6ZVwiLChmdW5jdGlvbigpe3JldHVybiBlLl91bmRpcmVjdGVkU2l6ZX0pKSxmKGMoZSksXCJzZWxmTG9vcENvdW50XCIsKGZ1bmN0aW9uKCl7cmV0dXJuIGUuX2RpcmVjdGVkU2VsZkxvb3BDb3VudCtlLl91bmRpcmVjdGVkU2VsZkxvb3BDb3VudH0pKSxmKGMoZSksXCJkaXJlY3RlZFNlbGZMb29wQ291bnRcIiwoZnVuY3Rpb24oKXtyZXR1cm4gZS5fZGlyZWN0ZWRTZWxmTG9vcENvdW50fSkpLGYoYyhlKSxcInVuZGlyZWN0ZWRTZWxmTG9vcENvdW50XCIsKGZ1bmN0aW9uKCl7cmV0dXJuIGUuX3VuZGlyZWN0ZWRTZWxmTG9vcENvdW50fSkpLGYoYyhlKSxcIm11bHRpXCIsZS5fb3B0aW9ucy5tdWx0aSksZihjKGUpLFwidHlwZVwiLGUuX29wdGlvbnMudHlwZSksZihjKGUpLFwiYWxsb3dTZWxmTG9vcHNcIixlLl9vcHRpb25zLmFsbG93U2VsZkxvb3BzKSxmKGMoZSksXCJpbXBsZW1lbnRhdGlvblwiLChmdW5jdGlvbigpe3JldHVyblwiZ3JhcGhvbG9neVwifSkpLGV9ZShyLG4pO3ZhciBpPXIucHJvdG90eXBlO3JldHVybiBpLl9yZXNldEluc3RhbmNlQ291bnRlcnM9ZnVuY3Rpb24oKXt0aGlzLl9kaXJlY3RlZFNpemU9MCx0aGlzLl91bmRpcmVjdGVkU2l6ZT0wLHRoaXMuX2RpcmVjdGVkU2VsZkxvb3BDb3VudD0wLHRoaXMuX3VuZGlyZWN0ZWRTZWxmTG9vcENvdW50PTB9LGkuaGFzTm9kZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fbm9kZXMuaGFzKFwiXCIrdCl9LGkuaGFzRGlyZWN0ZWRFZGdlPWZ1bmN0aW9uKHQsZSl7aWYoXCJ1bmRpcmVjdGVkXCI9PT10aGlzLnR5cGUpcmV0dXJuITE7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPVwiXCIrdCxyPXRoaXMuX2VkZ2VzLmdldChuKTtyZXR1cm4hIXImJiFyLnVuZGlyZWN0ZWR9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3Q9XCJcIit0LGU9XCJcIitlO3ZhciBpPXRoaXMuX25vZGVzLmdldCh0KTtyZXR1cm4hIWkmJmkub3V0Lmhhc093blByb3BlcnR5KGUpfXRocm93IG5ldyBCKFwiR3JhcGguaGFzRGlyZWN0ZWRFZGdlOiBpbnZhbGlkIGFyaXR5IChcIi5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCxcIiwgaW5zdGVhZCBvZiAxIG9yIDIpLiBZb3UgY2FuIGVpdGhlciBhc2sgZm9yIGFuIGVkZ2UgaWQgb3IgZm9yIHRoZSBleGlzdGVuY2Ugb2YgYW4gZWRnZSBiZXR3ZWVuIGEgc291cmNlICYgYSB0YXJnZXQuXCIpKX0saS5oYXNVbmRpcmVjdGVkRWRnZT1mdW5jdGlvbih0LGUpe2lmKFwiZGlyZWN0ZWRcIj09PXRoaXMudHlwZSlyZXR1cm4hMTtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49XCJcIit0LHI9dGhpcy5fZWRnZXMuZ2V0KG4pO3JldHVybiEhciYmci51bmRpcmVjdGVkfWlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt0PVwiXCIrdCxlPVwiXCIrZTt2YXIgaT10aGlzLl9ub2Rlcy5nZXQodCk7cmV0dXJuISFpJiZpLnVuZGlyZWN0ZWQuaGFzT3duUHJvcGVydHkoZSl9dGhyb3cgbmV3IEIoXCJHcmFwaC5oYXNEaXJlY3RlZEVkZ2U6IGludmFsaWQgYXJpdHkgKFwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoLFwiLCBpbnN0ZWFkIG9mIDEgb3IgMikuIFlvdSBjYW4gZWl0aGVyIGFzayBmb3IgYW4gZWRnZSBpZCBvciBmb3IgdGhlIGV4aXN0ZW5jZSBvZiBhbiBlZGdlIGJldHdlZW4gYSBzb3VyY2UgJiBhIHRhcmdldC5cIikpfSxpLmhhc0VkZ2U9ZnVuY3Rpb24odCxlKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49XCJcIit0O3JldHVybiB0aGlzLl9lZGdlcy5oYXMobil9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3Q9XCJcIit0LGU9XCJcIitlO3ZhciByPXRoaXMuX25vZGVzLmdldCh0KTtyZXR1cm4hIXImJih2b2lkIDAhPT1yLm91dCYmci5vdXQuaGFzT3duUHJvcGVydHkoZSl8fHZvaWQgMCE9PXIudW5kaXJlY3RlZCYmci51bmRpcmVjdGVkLmhhc093blByb3BlcnR5KGUpKX10aHJvdyBuZXcgQihcIkdyYXBoLmhhc0VkZ2U6IGludmFsaWQgYXJpdHkgKFwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoLFwiLCBpbnN0ZWFkIG9mIDEgb3IgMikuIFlvdSBjYW4gZWl0aGVyIGFzayBmb3IgYW4gZWRnZSBpZCBvciBmb3IgdGhlIGV4aXN0ZW5jZSBvZiBhbiBlZGdlIGJldHdlZW4gYSBzb3VyY2UgJiBhIHRhcmdldC5cIikpfSxpLmRpcmVjdGVkRWRnZT1mdW5jdGlvbih0LGUpe2lmKFwidW5kaXJlY3RlZFwiIT09dGhpcy50eXBlKXtpZih0PVwiXCIrdCxlPVwiXCIrZSx0aGlzLm11bHRpKXRocm93IG5ldyBJKFwiR3JhcGguZGlyZWN0ZWRFZGdlOiB0aGlzIG1ldGhvZCBpcyBpcnJlbGV2YW50IHdpdGggbXVsdGlncmFwaHMgc2luY2UgdGhlcmUgbWlnaHQgYmUgbXVsdGlwbGUgZWRnZXMgYmV0d2VlbiBzb3VyY2UgJiB0YXJnZXQuIFNlZSAjLmRpcmVjdGVkRWRnZXMgaW5zdGVhZC5cIik7dmFyIG49dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFuKXRocm93IG5ldyBGKCdHcmFwaC5kaXJlY3RlZEVkZ2U6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIHNvdXJjZSBub2RlIGluIHRoZSBncmFwaC4nKSk7aWYoIXRoaXMuX25vZGVzLmhhcyhlKSl0aHJvdyBuZXcgRignR3JhcGguZGlyZWN0ZWRFZGdlOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdChlLCdcIiB0YXJnZXQgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3ZhciByPW4ub3V0JiZuLm91dFtlXXx8dm9pZCAwO3JldHVybiByP3Iua2V5OnZvaWQgMH19LGkudW5kaXJlY3RlZEVkZ2U9ZnVuY3Rpb24odCxlKXtpZihcImRpcmVjdGVkXCIhPT10aGlzLnR5cGUpe2lmKHQ9XCJcIit0LGU9XCJcIitlLHRoaXMubXVsdGkpdGhyb3cgbmV3IEkoXCJHcmFwaC51bmRpcmVjdGVkRWRnZTogdGhpcyBtZXRob2QgaXMgaXJyZWxldmFudCB3aXRoIG11bHRpZ3JhcGhzIHNpbmNlIHRoZXJlIG1pZ2h0IGJlIG11bHRpcGxlIGVkZ2VzIGJldHdlZW4gc291cmNlICYgdGFyZ2V0LiBTZWUgIy51bmRpcmVjdGVkRWRnZXMgaW5zdGVhZC5cIik7dmFyIG49dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFuKXRocm93IG5ldyBGKCdHcmFwaC51bmRpcmVjdGVkRWRnZTogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgc291cmNlIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtpZighdGhpcy5fbm9kZXMuaGFzKGUpKXRocm93IG5ldyBGKCdHcmFwaC51bmRpcmVjdGVkRWRnZTogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQoZSwnXCIgdGFyZ2V0IG5vZGUgaW4gdGhlIGdyYXBoLicpKTt2YXIgcj1uLnVuZGlyZWN0ZWQmJm4udW5kaXJlY3RlZFtlXXx8dm9pZCAwO3JldHVybiByP3Iua2V5OnZvaWQgMH19LGkuZWRnZT1mdW5jdGlvbih0LGUpe2lmKHRoaXMubXVsdGkpdGhyb3cgbmV3IEkoXCJHcmFwaC5lZGdlOiB0aGlzIG1ldGhvZCBpcyBpcnJlbGV2YW50IHdpdGggbXVsdGlncmFwaHMgc2luY2UgdGhlcmUgbWlnaHQgYmUgbXVsdGlwbGUgZWRnZXMgYmV0d2VlbiBzb3VyY2UgJiB0YXJnZXQuIFNlZSAjLmVkZ2VzIGluc3RlYWQuXCIpO3Q9XCJcIit0LGU9XCJcIitlO3ZhciBuPXRoaXMuX25vZGVzLmdldCh0KTtpZighbil0aHJvdyBuZXcgRignR3JhcGguZWRnZTogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgc291cmNlIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtpZighdGhpcy5fbm9kZXMuaGFzKGUpKXRocm93IG5ldyBGKCdHcmFwaC5lZGdlOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdChlLCdcIiB0YXJnZXQgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3ZhciByPW4ub3V0JiZuLm91dFtlXXx8bi51bmRpcmVjdGVkJiZuLnVuZGlyZWN0ZWRbZV18fHZvaWQgMDtpZihyKXJldHVybiByLmtleX0saS5hcmVEaXJlY3RlZE5laWdoYm9ycz1mdW5jdGlvbih0LGUpe3Q9XCJcIit0LGU9XCJcIitlO3ZhciBuPXRoaXMuX25vZGVzLmdldCh0KTtpZighbil0aHJvdyBuZXcgRignR3JhcGguYXJlRGlyZWN0ZWROZWlnaGJvcnM6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm5cInVuZGlyZWN0ZWRcIiE9PXRoaXMudHlwZSYmKGUgaW4gbi5pbnx8ZSBpbiBuLm91dCl9LGkuYXJlT3V0TmVpZ2hib3JzPWZ1bmN0aW9uKHQsZSl7dD1cIlwiK3QsZT1cIlwiK2U7dmFyIG49dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFuKXRocm93IG5ldyBGKCdHcmFwaC5hcmVPdXROZWlnaGJvcnM6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm5cInVuZGlyZWN0ZWRcIiE9PXRoaXMudHlwZSYmZSBpbiBuLm91dH0saS5hcmVJbk5laWdoYm9ycz1mdW5jdGlvbih0LGUpe3Q9XCJcIit0LGU9XCJcIitlO3ZhciBuPXRoaXMuX25vZGVzLmdldCh0KTtpZighbil0aHJvdyBuZXcgRignR3JhcGguYXJlSW5OZWlnaGJvcnM6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm5cInVuZGlyZWN0ZWRcIiE9PXRoaXMudHlwZSYmZSBpbiBuLmlufSxpLmFyZVVuZGlyZWN0ZWROZWlnaGJvcnM9ZnVuY3Rpb24odCxlKXt0PVwiXCIrdCxlPVwiXCIrZTt2YXIgbj10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIW4pdGhyb3cgbmV3IEYoJ0dyYXBoLmFyZVVuZGlyZWN0ZWROZWlnaGJvcnM6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm5cImRpcmVjdGVkXCIhPT10aGlzLnR5cGUmJmUgaW4gbi51bmRpcmVjdGVkfSxpLmFyZU5laWdoYm9ycz1mdW5jdGlvbih0LGUpe3Q9XCJcIit0LGU9XCJcIitlO3ZhciBuPXRoaXMuX25vZGVzLmdldCh0KTtpZighbil0aHJvdyBuZXcgRignR3JhcGguYXJlTmVpZ2hib3JzOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuXCJ1bmRpcmVjdGVkXCIhPT10aGlzLnR5cGUmJihlIGluIG4uaW58fGUgaW4gbi5vdXQpfHxcImRpcmVjdGVkXCIhPT10aGlzLnR5cGUmJmUgaW4gbi51bmRpcmVjdGVkfSxpLmFyZUluYm91bmROZWlnaGJvcnM9ZnVuY3Rpb24odCxlKXt0PVwiXCIrdCxlPVwiXCIrZTt2YXIgbj10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIW4pdGhyb3cgbmV3IEYoJ0dyYXBoLmFyZUluYm91bmROZWlnaGJvcnM6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm5cInVuZGlyZWN0ZWRcIiE9PXRoaXMudHlwZSYmZSBpbiBuLmlufHxcImRpcmVjdGVkXCIhPT10aGlzLnR5cGUmJmUgaW4gbi51bmRpcmVjdGVkfSxpLmFyZU91dGJvdW5kTmVpZ2hib3JzPWZ1bmN0aW9uKHQsZSl7dD1cIlwiK3QsZT1cIlwiK2U7dmFyIG49dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFuKXRocm93IG5ldyBGKCdHcmFwaC5hcmVPdXRib3VuZE5laWdoYm9yczogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVyblwidW5kaXJlY3RlZFwiIT09dGhpcy50eXBlJiZlIGluIG4ub3V0fHxcImRpcmVjdGVkXCIhPT10aGlzLnR5cGUmJmUgaW4gbi51bmRpcmVjdGVkfSxpLmluRGVncmVlPWZ1bmN0aW9uKHQpe3Q9XCJcIit0O3ZhciBlPXRoaXMuX25vZGVzLmdldCh0KTtpZighZSl0aHJvdyBuZXcgRignR3JhcGguaW5EZWdyZWU6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm5cInVuZGlyZWN0ZWRcIj09PXRoaXMudHlwZT8wOmUuaW5EZWdyZWV9LGkub3V0RGVncmVlPWZ1bmN0aW9uKHQpe3Q9XCJcIit0O3ZhciBlPXRoaXMuX25vZGVzLmdldCh0KTtpZighZSl0aHJvdyBuZXcgRignR3JhcGgub3V0RGVncmVlOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuXCJ1bmRpcmVjdGVkXCI9PT10aGlzLnR5cGU/MDplLm91dERlZ3JlZX0saS5kaXJlY3RlZERlZ3JlZT1mdW5jdGlvbih0KXt0PVwiXCIrdDt2YXIgZT10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIWUpdGhyb3cgbmV3IEYoJ0dyYXBoLmRpcmVjdGVkRGVncmVlOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuXCJ1bmRpcmVjdGVkXCI9PT10aGlzLnR5cGU/MDplLmluRGVncmVlK2Uub3V0RGVncmVlfSxpLnVuZGlyZWN0ZWREZWdyZWU9ZnVuY3Rpb24odCl7dD1cIlwiK3Q7dmFyIGU9dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFlKXRocm93IG5ldyBGKCdHcmFwaC51bmRpcmVjdGVkRGVncmVlOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuXCJkaXJlY3RlZFwiPT09dGhpcy50eXBlPzA6ZS51bmRpcmVjdGVkRGVncmVlfSxpLmluYm91bmREZWdyZWU9ZnVuY3Rpb24odCl7dD1cIlwiK3Q7dmFyIGU9dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFlKXRocm93IG5ldyBGKCdHcmFwaC5pbmJvdW5kRGVncmVlOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7dmFyIG49MDtyZXR1cm5cImRpcmVjdGVkXCIhPT10aGlzLnR5cGUmJihuKz1lLnVuZGlyZWN0ZWREZWdyZWUpLFwidW5kaXJlY3RlZFwiIT09dGhpcy50eXBlJiYobis9ZS5pbkRlZ3JlZSksbn0saS5vdXRib3VuZERlZ3JlZT1mdW5jdGlvbih0KXt0PVwiXCIrdDt2YXIgZT10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIWUpdGhyb3cgbmV3IEYoJ0dyYXBoLm91dGJvdW5kRGVncmVlOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7dmFyIG49MDtyZXR1cm5cImRpcmVjdGVkXCIhPT10aGlzLnR5cGUmJihuKz1lLnVuZGlyZWN0ZWREZWdyZWUpLFwidW5kaXJlY3RlZFwiIT09dGhpcy50eXBlJiYobis9ZS5vdXREZWdyZWUpLG59LGkuZGVncmVlPWZ1bmN0aW9uKHQpe3Q9XCJcIit0O3ZhciBlPXRoaXMuX25vZGVzLmdldCh0KTtpZighZSl0aHJvdyBuZXcgRignR3JhcGguZGVncmVlOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7dmFyIG49MDtyZXR1cm5cImRpcmVjdGVkXCIhPT10aGlzLnR5cGUmJihuKz1lLnVuZGlyZWN0ZWREZWdyZWUpLFwidW5kaXJlY3RlZFwiIT09dGhpcy50eXBlJiYobis9ZS5pbkRlZ3JlZStlLm91dERlZ3JlZSksbn0saS5pbkRlZ3JlZVdpdGhvdXRTZWxmTG9vcHM9ZnVuY3Rpb24odCl7dD1cIlwiK3Q7dmFyIGU9dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFlKXRocm93IG5ldyBGKCdHcmFwaC5pbkRlZ3JlZVdpdGhvdXRTZWxmTG9vcHM6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm5cInVuZGlyZWN0ZWRcIj09PXRoaXMudHlwZT8wOmUuaW5EZWdyZWUtZS5kaXJlY3RlZExvb3BzfSxpLm91dERlZ3JlZVdpdGhvdXRTZWxmTG9vcHM9ZnVuY3Rpb24odCl7dD1cIlwiK3Q7dmFyIGU9dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFlKXRocm93IG5ldyBGKCdHcmFwaC5vdXREZWdyZWVXaXRob3V0U2VsZkxvb3BzOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuXCJ1bmRpcmVjdGVkXCI9PT10aGlzLnR5cGU/MDplLm91dERlZ3JlZS1lLmRpcmVjdGVkTG9vcHN9LGkuZGlyZWN0ZWREZWdyZWVXaXRob3V0U2VsZkxvb3BzPWZ1bmN0aW9uKHQpe3Q9XCJcIit0O3ZhciBlPXRoaXMuX25vZGVzLmdldCh0KTtpZighZSl0aHJvdyBuZXcgRignR3JhcGguZGlyZWN0ZWREZWdyZWVXaXRob3V0U2VsZkxvb3BzOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuXCJ1bmRpcmVjdGVkXCI9PT10aGlzLnR5cGU/MDplLmluRGVncmVlK2Uub3V0RGVncmVlLTIqZS5kaXJlY3RlZExvb3BzfSxpLnVuZGlyZWN0ZWREZWdyZWVXaXRob3V0U2VsZkxvb3BzPWZ1bmN0aW9uKHQpe3Q9XCJcIit0O3ZhciBlPXRoaXMuX25vZGVzLmdldCh0KTtpZighZSl0aHJvdyBuZXcgRignR3JhcGgudW5kaXJlY3RlZERlZ3JlZVdpdGhvdXRTZWxmTG9vcHM6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm5cImRpcmVjdGVkXCI9PT10aGlzLnR5cGU/MDplLnVuZGlyZWN0ZWREZWdyZWUtMiplLnVuZGlyZWN0ZWRMb29wc30saS5pbmJvdW5kRGVncmVlV2l0aG91dFNlbGZMb29wcz1mdW5jdGlvbih0KXt0PVwiXCIrdDt2YXIgZT10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIWUpdGhyb3cgbmV3IEYoJ0dyYXBoLmluYm91bmREZWdyZWVXaXRob3V0U2VsZkxvb3BzOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7dmFyIG49MCxyPTA7cmV0dXJuXCJkaXJlY3RlZFwiIT09dGhpcy50eXBlJiYobis9ZS51bmRpcmVjdGVkRGVncmVlLHIrPTIqZS51bmRpcmVjdGVkTG9vcHMpLFwidW5kaXJlY3RlZFwiIT09dGhpcy50eXBlJiYobis9ZS5pbkRlZ3JlZSxyKz1lLmRpcmVjdGVkTG9vcHMpLG4tcn0saS5vdXRib3VuZERlZ3JlZVdpdGhvdXRTZWxmTG9vcHM9ZnVuY3Rpb24odCl7dD1cIlwiK3Q7dmFyIGU9dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFlKXRocm93IG5ldyBGKCdHcmFwaC5vdXRib3VuZERlZ3JlZVdpdGhvdXRTZWxmTG9vcHM6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTt2YXIgbj0wLHI9MDtyZXR1cm5cImRpcmVjdGVkXCIhPT10aGlzLnR5cGUmJihuKz1lLnVuZGlyZWN0ZWREZWdyZWUscis9MiplLnVuZGlyZWN0ZWRMb29wcyksXCJ1bmRpcmVjdGVkXCIhPT10aGlzLnR5cGUmJihuKz1lLm91dERlZ3JlZSxyKz1lLmRpcmVjdGVkTG9vcHMpLG4tcn0saS5kZWdyZWVXaXRob3V0U2VsZkxvb3BzPWZ1bmN0aW9uKHQpe3Q9XCJcIit0O3ZhciBlPXRoaXMuX25vZGVzLmdldCh0KTtpZighZSl0aHJvdyBuZXcgRignR3JhcGguZGVncmVlV2l0aG91dFNlbGZMb29wczogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3ZhciBuPTAscj0wO3JldHVyblwiZGlyZWN0ZWRcIiE9PXRoaXMudHlwZSYmKG4rPWUudW5kaXJlY3RlZERlZ3JlZSxyKz0yKmUudW5kaXJlY3RlZExvb3BzKSxcInVuZGlyZWN0ZWRcIiE9PXRoaXMudHlwZSYmKG4rPWUuaW5EZWdyZWUrZS5vdXREZWdyZWUscis9MiplLmRpcmVjdGVkTG9vcHMpLG4tcn0saS5zb3VyY2U9ZnVuY3Rpb24odCl7dD1cIlwiK3Q7dmFyIGU9dGhpcy5fZWRnZXMuZ2V0KHQpO2lmKCFlKXRocm93IG5ldyBGKCdHcmFwaC5zb3VyY2U6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIGVkZ2UgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm4gZS5zb3VyY2Uua2V5fSxpLnRhcmdldD1mdW5jdGlvbih0KXt0PVwiXCIrdDt2YXIgZT10aGlzLl9lZGdlcy5nZXQodCk7aWYoIWUpdGhyb3cgbmV3IEYoJ0dyYXBoLnRhcmdldDogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgZWRnZSBpbiB0aGUgZ3JhcGguJykpO3JldHVybiBlLnRhcmdldC5rZXl9LGkuZXh0cmVtaXRpZXM9ZnVuY3Rpb24odCl7dD1cIlwiK3Q7dmFyIGU9dGhpcy5fZWRnZXMuZ2V0KHQpO2lmKCFlKXRocm93IG5ldyBGKCdHcmFwaC5leHRyZW1pdGllczogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgZWRnZSBpbiB0aGUgZ3JhcGguJykpO3JldHVybltlLnNvdXJjZS5rZXksZS50YXJnZXQua2V5XX0saS5vcHBvc2l0ZT1mdW5jdGlvbih0LGUpe3Q9XCJcIit0LGU9XCJcIitlO3ZhciBuPXRoaXMuX2VkZ2VzLmdldChlKTtpZighbil0aHJvdyBuZXcgRignR3JhcGgub3Bwb3NpdGU6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KGUsJ1wiIGVkZ2UgaW4gdGhlIGdyYXBoLicpKTt2YXIgcj1uLnNvdXJjZS5rZXksaT1uLnRhcmdldC5rZXk7aWYodD09PXIpcmV0dXJuIGk7aWYodD09PWkpcmV0dXJuIHI7dGhyb3cgbmV3IEYoJ0dyYXBoLm9wcG9zaXRlOiB0aGUgXCInLmNvbmNhdCh0LCdcIiBub2RlIGlzIG5vdCBhdHRhY2hlZCB0byB0aGUgXCInKS5jb25jYXQoZSwnXCIgZWRnZSAoJykuY29uY2F0KHIsXCIsIFwiKS5jb25jYXQoaSxcIikuXCIpKX0saS5oYXNFeHRyZW1pdHk9ZnVuY3Rpb24odCxlKXt0PVwiXCIrdCxlPVwiXCIrZTt2YXIgbj10aGlzLl9lZGdlcy5nZXQodCk7aWYoIW4pdGhyb3cgbmV3IEYoJ0dyYXBoLmhhc0V4dHJlbWl0eTogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgZWRnZSBpbiB0aGUgZ3JhcGguJykpO3JldHVybiBuLnNvdXJjZS5rZXk9PT1lfHxuLnRhcmdldC5rZXk9PT1lfSxpLmlzVW5kaXJlY3RlZD1mdW5jdGlvbih0KXt0PVwiXCIrdDt2YXIgZT10aGlzLl9lZGdlcy5nZXQodCk7aWYoIWUpdGhyb3cgbmV3IEYoJ0dyYXBoLmlzVW5kaXJlY3RlZDogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgZWRnZSBpbiB0aGUgZ3JhcGguJykpO3JldHVybiBlLnVuZGlyZWN0ZWR9LGkuaXNEaXJlY3RlZD1mdW5jdGlvbih0KXt0PVwiXCIrdDt2YXIgZT10aGlzLl9lZGdlcy5nZXQodCk7aWYoIWUpdGhyb3cgbmV3IEYoJ0dyYXBoLmlzRGlyZWN0ZWQ6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIGVkZ2UgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm4hZS51bmRpcmVjdGVkfSxpLmlzU2VsZkxvb3A9ZnVuY3Rpb24odCl7dD1cIlwiK3Q7dmFyIGU9dGhpcy5fZWRnZXMuZ2V0KHQpO2lmKCFlKXRocm93IG5ldyBGKCdHcmFwaC5pc1NlbGZMb29wOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBlZGdlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuIGUuc291cmNlPT09ZS50YXJnZXR9LGkuYWRkTm9kZT1mdW5jdGlvbih0LGUpe3ZhciBuPWZ1bmN0aW9uKHQsZSxuKXtpZihuJiYhcyhuKSl0aHJvdyBuZXcgQignR3JhcGguYWRkTm9kZTogaW52YWxpZCBhdHRyaWJ1dGVzLiBFeHBlY3RpbmcgYW4gb2JqZWN0IGJ1dCBnb3QgXCInLmNvbmNhdChuLCdcIicpKTtpZihlPVwiXCIrZSxuPW58fHt9LHQuX25vZGVzLmhhcyhlKSl0aHJvdyBuZXcgSSgnR3JhcGguYWRkTm9kZTogdGhlIFwiJy5jb25jYXQoZSwnXCIgbm9kZSBhbHJlYWR5IGV4aXN0IGluIHRoZSBncmFwaC4nKSk7dmFyIHI9bmV3IHQuTm9kZURhdGFDbGFzcyhlLG4pO3JldHVybiB0Ll9ub2Rlcy5zZXQoZSxyKSx0LmVtaXQoXCJub2RlQWRkZWRcIix7a2V5OmUsYXR0cmlidXRlczpufSkscn0odGhpcyx0LGUpO3JldHVybiBuLmtleX0saS5tZXJnZU5vZGU9ZnVuY3Rpb24odCxlKXtpZihlJiYhcyhlKSl0aHJvdyBuZXcgQignR3JhcGgubWVyZ2VOb2RlOiBpbnZhbGlkIGF0dHJpYnV0ZXMuIEV4cGVjdGluZyBhbiBvYmplY3QgYnV0IGdvdCBcIicuY29uY2F0KGUsJ1wiJykpO3Q9XCJcIit0LGU9ZXx8e307dmFyIG49dGhpcy5fbm9kZXMuZ2V0KHQpO3JldHVybiBuPyhlJiYodShuLmF0dHJpYnV0ZXMsZSksdGhpcy5lbWl0KFwibm9kZUF0dHJpYnV0ZXNVcGRhdGVkXCIse3R5cGU6XCJtZXJnZVwiLGtleTp0LGF0dHJpYnV0ZXM6bi5hdHRyaWJ1dGVzLGRhdGE6ZX0pKSxbdCwhMV0pOihuPW5ldyB0aGlzLk5vZGVEYXRhQ2xhc3ModCxlKSx0aGlzLl9ub2Rlcy5zZXQodCxuKSx0aGlzLmVtaXQoXCJub2RlQWRkZWRcIix7a2V5OnQsYXR0cmlidXRlczplfSksW3QsITBdKX0saS51cGRhdGVOb2RlPWZ1bmN0aW9uKHQsZSl7aWYoZSYmXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBuZXcgQignR3JhcGgudXBkYXRlTm9kZTogaW52YWxpZCB1cGRhdGVyIGZ1bmN0aW9uLiBFeHBlY3RpbmcgYSBmdW5jdGlvbiBidXQgZ290IFwiJy5jb25jYXQoZSwnXCInKSk7dD1cIlwiK3Q7dmFyIG49dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKG4pe2lmKGUpe3ZhciByPW4uYXR0cmlidXRlcztuLmF0dHJpYnV0ZXM9ZShyKSx0aGlzLmVtaXQoXCJub2RlQXR0cmlidXRlc1VwZGF0ZWRcIix7dHlwZTpcInJlcGxhY2VcIixrZXk6dCxhdHRyaWJ1dGVzOm4uYXR0cmlidXRlc30pfXJldHVyblt0LCExXX12YXIgaT1lP2Uoe30pOnt9O3JldHVybiBuPW5ldyB0aGlzLk5vZGVEYXRhQ2xhc3ModCxpKSx0aGlzLl9ub2Rlcy5zZXQodCxuKSx0aGlzLmVtaXQoXCJub2RlQWRkZWRcIix7a2V5OnQsYXR0cmlidXRlczppfSksW3QsITBdfSxpLmRyb3BOb2RlPWZ1bmN0aW9uKHQpe3Q9XCJcIit0O3ZhciBlLG49dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFuKXRocm93IG5ldyBGKCdHcmFwaC5kcm9wTm9kZTogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO2lmKFwidW5kaXJlY3RlZFwiIT09dGhpcy50eXBlKXtmb3IodmFyIHIgaW4gbi5vdXQpe2U9bi5vdXRbcl07ZG97TXQodGhpcyxlKSxlPWUubmV4dH13aGlsZShlKX1mb3IodmFyIGkgaW4gbi5pbil7ZT1uLmluW2ldO2Rve010KHRoaXMsZSksZT1lLm5leHR9d2hpbGUoZSl9fWlmKFwiZGlyZWN0ZWRcIiE9PXRoaXMudHlwZSlmb3IodmFyIG8gaW4gbi51bmRpcmVjdGVkKXtlPW4udW5kaXJlY3RlZFtvXTtkb3tNdCh0aGlzLGUpLGU9ZS5uZXh0fXdoaWxlKGUpfXRoaXMuX25vZGVzLmRlbGV0ZSh0KSx0aGlzLmVtaXQoXCJub2RlRHJvcHBlZFwiLHtrZXk6dCxhdHRyaWJ1dGVzOm4uYXR0cmlidXRlc30pfSxpLmRyb3BFZGdlPWZ1bmN0aW9uKHQpe3ZhciBlO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSl7dmFyIG49XCJcIithcmd1bWVudHNbMF0scj1cIlwiK2FyZ3VtZW50c1sxXTtpZighKGU9ZCh0aGlzLG4scix0aGlzLnR5cGUpKSl0aHJvdyBuZXcgRignR3JhcGguZHJvcEVkZ2U6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KG4sJ1wiIC0+IFwiJykuY29uY2F0KHIsJ1wiIGVkZ2UgaW4gdGhlIGdyYXBoLicpKX1lbHNlIGlmKHQ9XCJcIit0LCEoZT10aGlzLl9lZGdlcy5nZXQodCkpKXRocm93IG5ldyBGKCdHcmFwaC5kcm9wRWRnZTogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgZWRnZSBpbiB0aGUgZ3JhcGguJykpO3JldHVybiBNdCh0aGlzLGUpLHRoaXN9LGkuZHJvcERpcmVjdGVkRWRnZT1mdW5jdGlvbih0LGUpe2lmKGFyZ3VtZW50cy5sZW5ndGg8Mil0aHJvdyBuZXcgSShcIkdyYXBoLmRyb3BEaXJlY3RlZEVkZ2U6IGl0IGRvZXMgbm90IG1ha2Ugc2Vuc2UgdG8gdHJ5IGFuZCBkcm9wIGEgZGlyZWN0ZWQgZWRnZSBieSBrZXkuIFdoYXQgaWYgdGhlIGVkZ2Ugd2l0aCB0aGlzIGtleSBpcyB1bmRpcmVjdGVkPyBVc2UgIy5kcm9wRWRnZSBmb3IgdGhpcyBwdXJwb3NlIGluc3RlYWQuXCIpO2lmKHRoaXMubXVsdGkpdGhyb3cgbmV3IEkoXCJHcmFwaC5kcm9wRGlyZWN0ZWRFZGdlOiBjYW5ub3QgdXNlIGEge3NvdXJjZSx0YXJnZXR9IGNvbWJvIHdoZW4gZHJvcHBpbmcgYW4gZWRnZSBpbiBhIE11bHRpR3JhcGggc2luY2Ugd2UgY2Fubm90IGluZmVyIHRoZSBvbmUgeW91IHdhbnQgdG8gZGVsZXRlIGFzIHRoZXJlIGNvdWxkIGJlIG11bHRpcGxlIG9uZXMuXCIpO3ZhciBuPWQodGhpcyx0PVwiXCIrdCxlPVwiXCIrZSxcImRpcmVjdGVkXCIpO2lmKCFuKXRocm93IG5ldyBGKCdHcmFwaC5kcm9wRGlyZWN0ZWRFZGdlOiBjb3VsZCBub3QgZmluZCBhIFwiJy5jb25jYXQodCwnXCIgLT4gXCInKS5jb25jYXQoZSwnXCIgZWRnZSBpbiB0aGUgZ3JhcGguJykpO3JldHVybiBNdCh0aGlzLG4pLHRoaXN9LGkuZHJvcFVuZGlyZWN0ZWRFZGdlPWZ1bmN0aW9uKHQsZSl7aWYoYXJndW1lbnRzLmxlbmd0aDwyKXRocm93IG5ldyBJKFwiR3JhcGguZHJvcFVuZGlyZWN0ZWRFZGdlOiBpdCBkb2VzIG5vdCBtYWtlIHNlbnNlIHRvIGRyb3AgYSBkaXJlY3RlZCBlZGdlIGJ5IGtleS4gV2hhdCBpZiB0aGUgZWRnZSB3aXRoIHRoaXMga2V5IGlzIHVuZGlyZWN0ZWQ/IFVzZSAjLmRyb3BFZGdlIGZvciB0aGlzIHB1cnBvc2UgaW5zdGVhZC5cIik7aWYodGhpcy5tdWx0aSl0aHJvdyBuZXcgSShcIkdyYXBoLmRyb3BVbmRpcmVjdGVkRWRnZTogY2Fubm90IHVzZSBhIHtzb3VyY2UsdGFyZ2V0fSBjb21ibyB3aGVuIGRyb3BwaW5nIGFuIGVkZ2UgaW4gYSBNdWx0aUdyYXBoIHNpbmNlIHdlIGNhbm5vdCBpbmZlciB0aGUgb25lIHlvdSB3YW50IHRvIGRlbGV0ZSBhcyB0aGVyZSBjb3VsZCBiZSBtdWx0aXBsZSBvbmVzLlwiKTt2YXIgbj1kKHRoaXMsdCxlLFwidW5kaXJlY3RlZFwiKTtpZighbil0aHJvdyBuZXcgRignR3JhcGguZHJvcFVuZGlyZWN0ZWRFZGdlOiBjb3VsZCBub3QgZmluZCBhIFwiJy5jb25jYXQodCwnXCIgLT4gXCInKS5jb25jYXQoZSwnXCIgZWRnZSBpbiB0aGUgZ3JhcGguJykpO3JldHVybiBNdCh0aGlzLG4pLHRoaXN9LGkuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLl9lZGdlcy5jbGVhcigpLHRoaXMuX25vZGVzLmNsZWFyKCksdGhpcy5fcmVzZXRJbnN0YW5jZUNvdW50ZXJzKCksdGhpcy5lbWl0KFwiY2xlYXJlZFwiKX0saS5jbGVhckVkZ2VzPWZ1bmN0aW9uKCl7Zm9yKHZhciB0LGU9dGhpcy5fbm9kZXMudmFsdWVzKCk7ITAhPT0odD1lLm5leHQoKSkuZG9uZTspdC52YWx1ZS5jbGVhcigpO3RoaXMuX2VkZ2VzLmNsZWFyKCksdGhpcy5fcmVzZXRJbnN0YW5jZUNvdW50ZXJzKCksdGhpcy5lbWl0KFwiZWRnZXNDbGVhcmVkXCIpfSxpLmdldEF0dHJpYnV0ZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fYXR0cmlidXRlc1t0XX0saS5nZXRBdHRyaWJ1dGVzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2F0dHJpYnV0ZXN9LGkuaGFzQXR0cmlidXRlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9hdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KHQpfSxpLnNldEF0dHJpYnV0ZT1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLl9hdHRyaWJ1dGVzW3RdPWUsdGhpcy5lbWl0KFwiYXR0cmlidXRlc1VwZGF0ZWRcIix7dHlwZTpcInNldFwiLGF0dHJpYnV0ZXM6dGhpcy5fYXR0cmlidXRlcyxuYW1lOnR9KSx0aGlzfSxpLnVwZGF0ZUF0dHJpYnV0ZT1mdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgbmV3IEIoXCJHcmFwaC51cGRhdGVBdHRyaWJ1dGU6IHVwZGF0ZXIgc2hvdWxkIGJlIGEgZnVuY3Rpb24uXCIpO3ZhciBuPXRoaXMuX2F0dHJpYnV0ZXNbdF07cmV0dXJuIHRoaXMuX2F0dHJpYnV0ZXNbdF09ZShuKSx0aGlzLmVtaXQoXCJhdHRyaWJ1dGVzVXBkYXRlZFwiLHt0eXBlOlwic2V0XCIsYXR0cmlidXRlczp0aGlzLl9hdHRyaWJ1dGVzLG5hbWU6dH0pLHRoaXN9LGkucmVtb3ZlQXR0cmlidXRlPWZ1bmN0aW9uKHQpe3JldHVybiBkZWxldGUgdGhpcy5fYXR0cmlidXRlc1t0XSx0aGlzLmVtaXQoXCJhdHRyaWJ1dGVzVXBkYXRlZFwiLHt0eXBlOlwicmVtb3ZlXCIsYXR0cmlidXRlczp0aGlzLl9hdHRyaWJ1dGVzLG5hbWU6dH0pLHRoaXN9LGkucmVwbGFjZUF0dHJpYnV0ZXM9ZnVuY3Rpb24odCl7aWYoIXModCkpdGhyb3cgbmV3IEIoXCJHcmFwaC5yZXBsYWNlQXR0cmlidXRlczogcHJvdmlkZWQgYXR0cmlidXRlcyBhcmUgbm90IGEgcGxhaW4gb2JqZWN0LlwiKTtyZXR1cm4gdGhpcy5fYXR0cmlidXRlcz10LHRoaXMuZW1pdChcImF0dHJpYnV0ZXNVcGRhdGVkXCIse3R5cGU6XCJyZXBsYWNlXCIsYXR0cmlidXRlczp0aGlzLl9hdHRyaWJ1dGVzfSksdGhpc30saS5tZXJnZUF0dHJpYnV0ZXM9ZnVuY3Rpb24odCl7aWYoIXModCkpdGhyb3cgbmV3IEIoXCJHcmFwaC5tZXJnZUF0dHJpYnV0ZXM6IHByb3ZpZGVkIGF0dHJpYnV0ZXMgYXJlIG5vdCBhIHBsYWluIG9iamVjdC5cIik7cmV0dXJuIHUodGhpcy5fYXR0cmlidXRlcyx0KSx0aGlzLmVtaXQoXCJhdHRyaWJ1dGVzVXBkYXRlZFwiLHt0eXBlOlwibWVyZ2VcIixhdHRyaWJ1dGVzOnRoaXMuX2F0dHJpYnV0ZXMsZGF0YTp0fSksdGhpc30saS51cGRhdGVBdHRyaWJ1dGVzPWZ1bmN0aW9uKHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEIoXCJHcmFwaC51cGRhdGVBdHRyaWJ1dGVzOiBwcm92aWRlZCB1cGRhdGVyIGlzIG5vdCBhIGZ1bmN0aW9uLlwiKTtyZXR1cm4gdGhpcy5fYXR0cmlidXRlcz10KHRoaXMuX2F0dHJpYnV0ZXMpLHRoaXMuZW1pdChcImF0dHJpYnV0ZXNVcGRhdGVkXCIse3R5cGU6XCJ1cGRhdGVcIixhdHRyaWJ1dGVzOnRoaXMuX2F0dHJpYnV0ZXN9KSx0aGlzfSxpLnVwZGF0ZUVhY2hOb2RlQXR0cmlidXRlcz1mdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEIoXCJHcmFwaC51cGRhdGVFYWNoTm9kZUF0dHJpYnV0ZXM6IGV4cGVjdGluZyBhbiB1cGRhdGVyIGZ1bmN0aW9uLlwiKTtpZihlJiYhbChlKSl0aHJvdyBuZXcgQihcIkdyYXBoLnVwZGF0ZUVhY2hOb2RlQXR0cmlidXRlczogaW52YWxpZCBoaW50cy4gRXhwZWN0aW5nIGFuIG9iamVjdCBoYXZpbmcgdGhlIGZvbGxvd2luZyBzaGFwZToge2F0dHJpYnV0ZXM/OiBbc3RyaW5nXX1cIik7Zm9yKHZhciBuLHIsaT10aGlzLl9ub2Rlcy52YWx1ZXMoKTshMCE9PShuPWkubmV4dCgpKS5kb25lOykocj1uLnZhbHVlKS5hdHRyaWJ1dGVzPXQoci5rZXksci5hdHRyaWJ1dGVzKTt0aGlzLmVtaXQoXCJlYWNoTm9kZUF0dHJpYnV0ZXNVcGRhdGVkXCIse2hpbnRzOmV8fG51bGx9KX0saS51cGRhdGVFYWNoRWRnZUF0dHJpYnV0ZXM9ZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBCKFwiR3JhcGgudXBkYXRlRWFjaEVkZ2VBdHRyaWJ1dGVzOiBleHBlY3RpbmcgYW4gdXBkYXRlciBmdW5jdGlvbi5cIik7aWYoZSYmIWwoZSkpdGhyb3cgbmV3IEIoXCJHcmFwaC51cGRhdGVFYWNoRWRnZUF0dHJpYnV0ZXM6IGludmFsaWQgaGludHMuIEV4cGVjdGluZyBhbiBvYmplY3QgaGF2aW5nIHRoZSBmb2xsb3dpbmcgc2hhcGU6IHthdHRyaWJ1dGVzPzogW3N0cmluZ119XCIpO2Zvcih2YXIgbixyLGksbyxhPXRoaXMuX2VkZ2VzLnZhbHVlcygpOyEwIT09KG49YS5uZXh0KCkpLmRvbmU7KWk9KHI9bi52YWx1ZSkuc291cmNlLG89ci50YXJnZXQsci5hdHRyaWJ1dGVzPXQoci5rZXksci5hdHRyaWJ1dGVzLGkua2V5LG8ua2V5LGkuYXR0cmlidXRlcyxvLmF0dHJpYnV0ZXMsci51bmRpcmVjdGVkKTt0aGlzLmVtaXQoXCJlYWNoRWRnZUF0dHJpYnV0ZXNVcGRhdGVkXCIse2hpbnRzOmV8fG51bGx9KX0saS5mb3JFYWNoQWRqYWNlbmN5RW50cnk9ZnVuY3Rpb24odCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgQihcIkdyYXBoLmZvckVhY2hBZGphY2VuY3lFbnRyeTogZXhwZWN0aW5nIGEgY2FsbGJhY2suXCIpO3h0KCExLCExLCExLHRoaXMsdCl9LGkuZm9yRWFjaEFkamFjZW5jeUVudHJ5V2l0aE9ycGhhbnM9ZnVuY3Rpb24odCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgQihcIkdyYXBoLmZvckVhY2hBZGphY2VuY3lFbnRyeVdpdGhPcnBoYW5zOiBleHBlY3RpbmcgYSBjYWxsYmFjay5cIik7eHQoITEsITEsITAsdGhpcyx0KX0saS5mb3JFYWNoQXNzeW1ldHJpY0FkamFjZW5jeUVudHJ5PWZ1bmN0aW9uKHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEIoXCJHcmFwaC5mb3JFYWNoQXNzeW1ldHJpY0FkamFjZW5jeUVudHJ5OiBleHBlY3RpbmcgYSBjYWxsYmFjay5cIik7eHQoITEsITAsITEsdGhpcyx0KX0saS5mb3JFYWNoQXNzeW1ldHJpY0FkamFjZW5jeUVudHJ5V2l0aE9ycGhhbnM9ZnVuY3Rpb24odCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgQihcIkdyYXBoLmZvckVhY2hBc3N5bWV0cmljQWRqYWNlbmN5RW50cnlXaXRoT3JwaGFuczogZXhwZWN0aW5nIGEgY2FsbGJhY2suXCIpO3h0KCExLCEwLCEwLHRoaXMsdCl9LGkubm9kZXM9ZnVuY3Rpb24oKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBBcnJheS5mcm9tP0FycmF5LmZyb20odGhpcy5fbm9kZXMua2V5cygpKTpLKHRoaXMuX25vZGVzLmtleXMoKSx0aGlzLl9ub2Rlcy5zaXplKX0saS5mb3JFYWNoTm9kZT1mdW5jdGlvbih0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBCKFwiR3JhcGguZm9yRWFjaE5vZGU6IGV4cGVjdGluZyBhIGNhbGxiYWNrLlwiKTtmb3IodmFyIGUsbixyPXRoaXMuX25vZGVzLnZhbHVlcygpOyEwIT09KGU9ci5uZXh0KCkpLmRvbmU7KXQoKG49ZS52YWx1ZSkua2V5LG4uYXR0cmlidXRlcyl9LGkuZmluZE5vZGU9ZnVuY3Rpb24odCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgQihcIkdyYXBoLmZpbmROb2RlOiBleHBlY3RpbmcgYSBjYWxsYmFjay5cIik7Zm9yKHZhciBlLG4scj10aGlzLl9ub2Rlcy52YWx1ZXMoKTshMCE9PShlPXIubmV4dCgpKS5kb25lOylpZih0KChuPWUudmFsdWUpLmtleSxuLmF0dHJpYnV0ZXMpKXJldHVybiBuLmtleX0saS5tYXBOb2Rlcz1mdW5jdGlvbih0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBCKFwiR3JhcGgubWFwTm9kZTogZXhwZWN0aW5nIGEgY2FsbGJhY2suXCIpO2Zvcih2YXIgZSxuLHI9dGhpcy5fbm9kZXMudmFsdWVzKCksaT1uZXcgQXJyYXkodGhpcy5vcmRlciksbz0wOyEwIT09KGU9ci5uZXh0KCkpLmRvbmU7KW49ZS52YWx1ZSxpW28rK109dChuLmtleSxuLmF0dHJpYnV0ZXMpO3JldHVybiBpfSxpLnNvbWVOb2RlPWZ1bmN0aW9uKHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEIoXCJHcmFwaC5zb21lTm9kZTogZXhwZWN0aW5nIGEgY2FsbGJhY2suXCIpO2Zvcih2YXIgZSxuLHI9dGhpcy5fbm9kZXMudmFsdWVzKCk7ITAhPT0oZT1yLm5leHQoKSkuZG9uZTspaWYodCgobj1lLnZhbHVlKS5rZXksbi5hdHRyaWJ1dGVzKSlyZXR1cm4hMDtyZXR1cm4hMX0saS5ldmVyeU5vZGU9ZnVuY3Rpb24odCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgQihcIkdyYXBoLmV2ZXJ5Tm9kZTogZXhwZWN0aW5nIGEgY2FsbGJhY2suXCIpO2Zvcih2YXIgZSxuLHI9dGhpcy5fbm9kZXMudmFsdWVzKCk7ITAhPT0oZT1yLm5leHQoKSkuZG9uZTspaWYoIXQoKG49ZS52YWx1ZSkua2V5LG4uYXR0cmlidXRlcykpcmV0dXJuITE7cmV0dXJuITB9LGkuZmlsdGVyTm9kZXM9ZnVuY3Rpb24odCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgQihcIkdyYXBoLmZpbHRlck5vZGVzOiBleHBlY3RpbmcgYSBjYWxsYmFjay5cIik7Zm9yKHZhciBlLG4scj10aGlzLl9ub2Rlcy52YWx1ZXMoKSxpPVtdOyEwIT09KGU9ci5uZXh0KCkpLmRvbmU7KXQoKG49ZS52YWx1ZSkua2V5LG4uYXR0cmlidXRlcykmJmkucHVzaChuLmtleSk7cmV0dXJuIGl9LGkucmVkdWNlTm9kZXM9ZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBCKFwiR3JhcGgucmVkdWNlTm9kZXM6IGV4cGVjdGluZyBhIGNhbGxiYWNrLlwiKTtpZihhcmd1bWVudHMubGVuZ3RoPDIpdGhyb3cgbmV3IEIoXCJHcmFwaC5yZWR1Y2VOb2RlczogbWlzc2luZyBpbml0aWFsIHZhbHVlLiBZb3UgbXVzdCBwcm92aWRlIGl0IGJlY2F1c2UgdGhlIGNhbGxiYWNrIHRha2VzIG1vcmUgdGhhbiBvbmUgYXJndW1lbnQgYW5kIHdlIGNhbm5vdCBpbmZlciB0aGUgaW5pdGlhbCB2YWx1ZSBmcm9tIHRoZSBmaXJzdCBpdGVyYXRpb24sIGFzIHlvdSBjb3VsZCB3aXRoIGEgc2ltcGxlIGFycmF5LlwiKTtmb3IodmFyIG4scixpPWUsbz10aGlzLl9ub2Rlcy52YWx1ZXMoKTshMCE9PShuPW8ubmV4dCgpKS5kb25lOylpPXQoaSwocj1uLnZhbHVlKS5rZXksci5hdHRyaWJ1dGVzKTtyZXR1cm4gaX0saS5ub2RlRW50cmllcz1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX25vZGVzLnZhbHVlcygpO3JldHVybiBuZXcgTygoZnVuY3Rpb24oKXt2YXIgZT10Lm5leHQoKTtpZihlLmRvbmUpcmV0dXJuIGU7dmFyIG49ZS52YWx1ZTtyZXR1cm57dmFsdWU6e25vZGU6bi5rZXksYXR0cmlidXRlczpuLmF0dHJpYnV0ZXN9LGRvbmU6ITF9fSkpfSxpLmV4cG9ydD1mdW5jdGlvbigpe3ZhciB0PXRoaXMsZT1uZXcgQXJyYXkodGhpcy5fbm9kZXMuc2l6ZSksbj0wO3RoaXMuX25vZGVzLmZvckVhY2goKGZ1bmN0aW9uKHQscil7ZVtuKytdPWZ1bmN0aW9uKHQsZSl7dmFyIG49e2tleTp0fTtyZXR1cm4gaChlLmF0dHJpYnV0ZXMpfHwobi5hdHRyaWJ1dGVzPXUoe30sZS5hdHRyaWJ1dGVzKSksbn0ocix0KX0pKTt2YXIgcj1uZXcgQXJyYXkodGhpcy5fZWRnZXMuc2l6ZSk7cmV0dXJuIG49MCx0aGlzLl9lZGdlcy5mb3JFYWNoKChmdW5jdGlvbihlLGkpe3JbbisrXT1mdW5jdGlvbih0LGUsbil7dmFyIHI9e2tleTplLHNvdXJjZTpuLnNvdXJjZS5rZXksdGFyZ2V0Om4udGFyZ2V0LmtleX07cmV0dXJuIGgobi5hdHRyaWJ1dGVzKXx8KHIuYXR0cmlidXRlcz11KHt9LG4uYXR0cmlidXRlcykpLFwibWl4ZWRcIj09PXQmJm4udW5kaXJlY3RlZCYmKHIudW5kaXJlY3RlZD0hMCkscn0odC50eXBlLGksZSl9KSkse29wdGlvbnM6e3R5cGU6dGhpcy50eXBlLG11bHRpOnRoaXMubXVsdGksYWxsb3dTZWxmTG9vcHM6dGhpcy5hbGxvd1NlbGZMb29wc30sYXR0cmlidXRlczp0aGlzLmdldEF0dHJpYnV0ZXMoKSxub2RlczplLGVkZ2VzOnJ9fSxpLmltcG9ydD1mdW5jdGlvbih0KXt2YXIgZSxuLGksbyxhLGM9dGhpcyx1PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV07aWYodCBpbnN0YW5jZW9mIHIpcmV0dXJuIHQuZm9yRWFjaE5vZGUoKGZ1bmN0aW9uKHQsZSl7dT9jLm1lcmdlTm9kZSh0LGUpOmMuYWRkTm9kZSh0LGUpfSkpLHQuZm9yRWFjaEVkZ2UoKGZ1bmN0aW9uKHQsZSxuLHIsaSxvLGEpe3U/YT9jLm1lcmdlVW5kaXJlY3RlZEVkZ2VXaXRoS2V5KHQsbixyLGUpOmMubWVyZ2VEaXJlY3RlZEVkZ2VXaXRoS2V5KHQsbixyLGUpOmE/Yy5hZGRVbmRpcmVjdGVkRWRnZVdpdGhLZXkodCxuLHIsZSk6Yy5hZGREaXJlY3RlZEVkZ2VXaXRoS2V5KHQsbixyLGUpfSkpLHRoaXM7aWYoIXModCkpdGhyb3cgbmV3IEIoXCJHcmFwaC5pbXBvcnQ6IGludmFsaWQgYXJndW1lbnQuIEV4cGVjdGluZyBhIHNlcmlhbGl6ZWQgZ3JhcGggb3IsIGFsdGVybmF0aXZlbHksIGEgR3JhcGggaW5zdGFuY2UuXCIpO2lmKHQuYXR0cmlidXRlcyl7aWYoIXModC5hdHRyaWJ1dGVzKSl0aHJvdyBuZXcgQihcIkdyYXBoLmltcG9ydDogaW52YWxpZCBhdHRyaWJ1dGVzLiBFeHBlY3RpbmcgYSBwbGFpbiBvYmplY3QuXCIpO3U/dGhpcy5tZXJnZUF0dHJpYnV0ZXModC5hdHRyaWJ1dGVzKTp0aGlzLnJlcGxhY2VBdHRyaWJ1dGVzKHQuYXR0cmlidXRlcyl9aWYodC5ub2Rlcyl7aWYoaT10Lm5vZGVzLCFBcnJheS5pc0FycmF5KGkpKXRocm93IG5ldyBCKFwiR3JhcGguaW1wb3J0OiBpbnZhbGlkIG5vZGVzLiBFeHBlY3RpbmcgYW4gYXJyYXkuXCIpO2ZvcihlPTAsbj1pLmxlbmd0aDtlPG47ZSsrKXtFdChvPWlbZV0pO3ZhciBkPW8saD1kLmtleSxwPWQuYXR0cmlidXRlczt1P3RoaXMubWVyZ2VOb2RlKGgscCk6dGhpcy5hZGROb2RlKGgscCl9fWlmKHQuZWRnZXMpe3ZhciBmPSExO2lmKFwidW5kaXJlY3RlZFwiPT09dGhpcy50eXBlJiYoZj0hMCksaT10LmVkZ2VzLCFBcnJheS5pc0FycmF5KGkpKXRocm93IG5ldyBCKFwiR3JhcGguaW1wb3J0OiBpbnZhbGlkIGVkZ2VzLiBFeHBlY3RpbmcgYW4gYXJyYXkuXCIpO2ZvcihlPTAsbj1pLmxlbmd0aDtlPG47ZSsrKXtBdChhPWlbZV0pO3ZhciBsPWEsZz1sLnNvdXJjZSx5PWwudGFyZ2V0LHc9bC5hdHRyaWJ1dGVzLHY9bC51bmRpcmVjdGVkLGI9dm9pZCAwPT09dj9mOnY7XCJrZXlcImluIGE/KHU/Yj90aGlzLm1lcmdlVW5kaXJlY3RlZEVkZ2VXaXRoS2V5OnRoaXMubWVyZ2VEaXJlY3RlZEVkZ2VXaXRoS2V5OmI/dGhpcy5hZGRVbmRpcmVjdGVkRWRnZVdpdGhLZXk6dGhpcy5hZGREaXJlY3RlZEVkZ2VXaXRoS2V5KS5jYWxsKHRoaXMsYS5rZXksZyx5LHcpOih1P2I/dGhpcy5tZXJnZVVuZGlyZWN0ZWRFZGdlOnRoaXMubWVyZ2VEaXJlY3RlZEVkZ2U6Yj90aGlzLmFkZFVuZGlyZWN0ZWRFZGdlOnRoaXMuYWRkRGlyZWN0ZWRFZGdlKS5jYWxsKHRoaXMsZyx5LHcpfX1yZXR1cm4gdGhpc30saS5udWxsQ29weT1mdW5jdGlvbih0KXt2YXIgZT1uZXcgcih1KHt9LHRoaXMuX29wdGlvbnMsdCkpO3JldHVybiBlLnJlcGxhY2VBdHRyaWJ1dGVzKHUoe30sdGhpcy5nZXRBdHRyaWJ1dGVzKCkpKSxlfSxpLmVtcHR5Q29weT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLm51bGxDb3B5KHQpO3JldHVybiB0aGlzLl9ub2Rlcy5mb3JFYWNoKChmdW5jdGlvbih0LG4pe3ZhciByPXUoe30sdC5hdHRyaWJ1dGVzKTt0PW5ldyBlLk5vZGVEYXRhQ2xhc3MobixyKSxlLl9ub2Rlcy5zZXQobix0KX0pKSxlfSxpLmNvcHk9ZnVuY3Rpb24odCl7aWYoXCJzdHJpbmdcIj09dHlwZW9mKHQ9dHx8e30pLnR5cGUmJnQudHlwZSE9PXRoaXMudHlwZSYmXCJtaXhlZFwiIT09dC50eXBlKXRocm93IG5ldyBJKCdHcmFwaC5jb3B5OiBjYW5ub3QgY3JlYXRlIGFuIGluY29tcGF0aWJsZSBjb3B5IGZyb20gXCInLmNvbmNhdCh0aGlzLnR5cGUsJ1wiIHR5cGUgdG8gXCInKS5jb25jYXQodC50eXBlLCdcIiBiZWNhdXNlIHRoaXMgd291bGQgbWVhbiBsb3NpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgZ3JhcGguJykpO2lmKFwiYm9vbGVhblwiPT10eXBlb2YgdC5tdWx0aSYmdC5tdWx0aSE9PXRoaXMubXVsdGkmJiEwIT09dC5tdWx0aSl0aHJvdyBuZXcgSShcIkdyYXBoLmNvcHk6IGNhbm5vdCBjcmVhdGUgYW4gaW5jb21wYXRpYmxlIGNvcHkgYnkgZG93bmdyYWRpbmcgYSBtdWx0aSBncmFwaCB0byBhIHNpbXBsZSBvbmUgYmVjYXVzZSB0aGlzIHdvdWxkIG1lYW4gbG9zaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IGdyYXBoLlwiKTtpZihcImJvb2xlYW5cIj09dHlwZW9mIHQuYWxsb3dTZWxmTG9vcHMmJnQuYWxsb3dTZWxmTG9vcHMhPT10aGlzLmFsbG93U2VsZkxvb3BzJiYhMCE9PXQuYWxsb3dTZWxmTG9vcHMpdGhyb3cgbmV3IEkoXCJHcmFwaC5jb3B5OiBjYW5ub3QgY3JlYXRlIGFuIGluY29tcGF0aWJsZSBjb3B5IGZyb20gYSBncmFwaCBhbGxvd2luZyBzZWxmIGxvb3BzIHRvIG9uZSB0aGF0IGRvZXMgbm90IGJlY2F1c2UgdGhpcyB3b3VsZCBtZWFuIGxvc2luZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudCBncmFwaC5cIik7Zm9yKHZhciBlLG4scj10aGlzLmVtcHR5Q29weSh0KSxpPXRoaXMuX2VkZ2VzLnZhbHVlcygpOyEwIT09KGU9aS5uZXh0KCkpLmRvbmU7KWp0KHIsXCJjb3B5XCIsITEsKG49ZS52YWx1ZSkudW5kaXJlY3RlZCxuLmtleSxuLnNvdXJjZS5rZXksbi50YXJnZXQua2V5LHUoe30sbi5hdHRyaWJ1dGVzKSk7cmV0dXJuIHJ9LGkudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXhwb3J0KCl9LGkudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIltvYmplY3QgR3JhcGhdXCJ9LGkuaW5zcGVjdD1mdW5jdGlvbigpe3ZhciBlPXRoaXMsbj17fTt0aGlzLl9ub2Rlcy5mb3JFYWNoKChmdW5jdGlvbih0LGUpe25bZV09dC5hdHRyaWJ1dGVzfSkpO3ZhciByPXt9LGk9e307dGhpcy5fZWRnZXMuZm9yRWFjaCgoZnVuY3Rpb24odCxuKXt2YXIgbyxhPXQudW5kaXJlY3RlZD9cIi0tXCI6XCItPlwiLGM9XCJcIix1PXQuc291cmNlLmtleSxkPXQudGFyZ2V0LmtleTt0LnVuZGlyZWN0ZWQmJnU+ZCYmKG89dSx1PWQsZD1vKTt2YXIgcz1cIihcIi5jb25jYXQodSxcIilcIikuY29uY2F0KGEsXCIoXCIpLmNvbmNhdChkLFwiKVwiKTtuLnN0YXJ0c1dpdGgoXCJnZWlkX1wiKT9lLm11bHRpJiYodm9pZCAwPT09aVtzXT9pW3NdPTA6aVtzXSsrLGMrPVwiXCIuY29uY2F0KGlbc10sXCIuIFwiKSk6Yys9XCJbXCIuY29uY2F0KG4sXCJdOiBcIikscltjKz1zXT10LmF0dHJpYnV0ZXN9KSk7dmFyIG89e307Zm9yKHZhciBhIGluIHRoaXMpdGhpcy5oYXNPd25Qcm9wZXJ0eShhKSYmIVV0LmhhcyhhKSYmXCJmdW5jdGlvblwiIT10eXBlb2YgdGhpc1thXSYmXCJzeW1ib2xcIiE9PXQoYSkmJihvW2FdPXRoaXNbYV0pO3JldHVybiBvLmF0dHJpYnV0ZXM9dGhpcy5fYXR0cmlidXRlcyxvLm5vZGVzPW4sby5lZGdlcz1yLHAobyxcImNvbnN0cnVjdG9yXCIsdGhpcy5jb25zdHJ1Y3Rvciksb30scn0oeS5leHBvcnRzLkV2ZW50RW1pdHRlcik7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmKHp0LnByb3RvdHlwZVtTeW1ib2wuZm9yKFwibm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b21cIildPXp0LnByb3RvdHlwZS5pbnNwZWN0KSxbe25hbWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJcIi5jb25jYXQodCxcIkVkZ2VcIil9LGdlbmVyYXRlS2V5OiEwfSx7bmFtZTpmdW5jdGlvbih0KXtyZXR1cm5cIlwiLmNvbmNhdCh0LFwiRGlyZWN0ZWRFZGdlXCIpfSxnZW5lcmF0ZUtleTohMCx0eXBlOlwiZGlyZWN0ZWRcIn0se25hbWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJcIi5jb25jYXQodCxcIlVuZGlyZWN0ZWRFZGdlXCIpfSxnZW5lcmF0ZUtleTohMCx0eXBlOlwidW5kaXJlY3RlZFwifSx7bmFtZTpmdW5jdGlvbih0KXtyZXR1cm5cIlwiLmNvbmNhdCh0LFwiRWRnZVdpdGhLZXlcIil9fSx7bmFtZTpmdW5jdGlvbih0KXtyZXR1cm5cIlwiLmNvbmNhdCh0LFwiRGlyZWN0ZWRFZGdlV2l0aEtleVwiKX0sdHlwZTpcImRpcmVjdGVkXCJ9LHtuYW1lOmZ1bmN0aW9uKHQpe3JldHVyblwiXCIuY29uY2F0KHQsXCJVbmRpcmVjdGVkRWRnZVdpdGhLZXlcIil9LHR5cGU6XCJ1bmRpcmVjdGVkXCJ9XS5mb3JFYWNoKChmdW5jdGlvbih0KXtbXCJhZGRcIixcIm1lcmdlXCIsXCJ1cGRhdGVcIl0uZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIG49dC5uYW1lKGUpLHI9XCJhZGRcIj09PWU/anQ6Q3Q7dC5nZW5lcmF0ZUtleT96dC5wcm90b3R5cGVbbl09ZnVuY3Rpb24oaSxvLGEpe3JldHVybiByKHRoaXMsbiwhMCxcInVuZGlyZWN0ZWRcIj09PSh0LnR5cGV8fHRoaXMudHlwZSksbnVsbCxpLG8sYSxcInVwZGF0ZVwiPT09ZSl9Onp0LnByb3RvdHlwZVtuXT1mdW5jdGlvbihpLG8sYSxjKXtyZXR1cm4gcih0aGlzLG4sITEsXCJ1bmRpcmVjdGVkXCI9PT0odC50eXBlfHx0aGlzLnR5cGUpLGksbyxhLGMsXCJ1cGRhdGVcIj09PWUpfX0pKX0pKSxmdW5jdGlvbih0KXtRLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciBuPWUubmFtZSxyPWUuYXR0YWNoZXI7cih0LG4oXCJOb2RlXCIpLDApLHIodCxuKFwiU291cmNlXCIpLDEpLHIodCxuKFwiVGFyZ2V0XCIpLDIpLHIodCxuKFwiT3Bwb3NpdGVcIiksMyl9KSl9KHp0KSxmdW5jdGlvbih0KXtYLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciBuPWUubmFtZSxyPWUuYXR0YWNoZXI7cih0LG4oXCJFZGdlXCIpLFwibWl4ZWRcIikscih0LG4oXCJEaXJlY3RlZEVkZ2VcIiksXCJkaXJlY3RlZFwiKSxyKHQsbihcIlVuZGlyZWN0ZWRFZGdlXCIpLFwidW5kaXJlY3RlZFwiKX0pKX0oenQpLGZ1bmN0aW9uKHQpe2V0LmZvckVhY2goKGZ1bmN0aW9uKGUpeyFmdW5jdGlvbih0LGUpe3ZhciBuPWUubmFtZSxyPWUudHlwZSxpPWUuZGlyZWN0aW9uO3QucHJvdG90eXBlW25dPWZ1bmN0aW9uKHQsZSl7aWYoXCJtaXhlZFwiIT09ciYmXCJtaXhlZFwiIT09dGhpcy50eXBlJiZyIT09dGhpcy50eXBlKXJldHVybltdO2lmKCFhcmd1bWVudHMubGVuZ3RoKXJldHVybiB1dCh0aGlzLHIpO2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt0PVwiXCIrdDt2YXIgbz10aGlzLl9ub2Rlcy5nZXQodCk7aWYodm9pZCAwPT09byl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChuLCc6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuIHB0KHRoaXMubXVsdGksXCJtaXhlZFwiPT09cj90aGlzLnR5cGU6cixpLG8pfWlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt0PVwiXCIrdCxlPVwiXCIrZTt2YXIgYT10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIWEpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQobiwnOiAgY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHQsJ1wiIHNvdXJjZSBub2RlIGluIHRoZSBncmFwaC4nKSk7aWYoIXRoaXMuX25vZGVzLmhhcyhlKSl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChuLCc6ICBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQoZSwnXCIgdGFyZ2V0IG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm4gZ3Qocix0aGlzLm11bHRpLGksYSxlKX10aHJvdyBuZXcgQihcIkdyYXBoLlwiLmNvbmNhdChuLFwiOiB0b28gbWFueSBhcmd1bWVudHMgKGV4cGVjdGluZyAwLCAxIG9yIDIgYW5kIGdvdCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGgsXCIpLlwiKSl9fSh0LGUpLGZ1bmN0aW9uKHQsZSl7dmFyIG49ZS5uYW1lLHI9ZS50eXBlLGk9ZS5kaXJlY3Rpb24sbz1cImZvckVhY2hcIituWzBdLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxLC0xKTt0LnByb3RvdHlwZVtvXT1mdW5jdGlvbih0LGUsbil7aWYoXCJtaXhlZFwiPT09cnx8XCJtaXhlZFwiPT09dGhpcy50eXBlfHxyPT09dGhpcy50eXBlKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZHQoITEsdGhpcyxyLG49dCk7aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3Q9XCJcIit0LG49ZTt2YXIgYT10aGlzLl9ub2Rlcy5nZXQodCk7aWYodm9pZCAwPT09YSl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChvLCc6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuIGh0KCExLHRoaXMubXVsdGksXCJtaXhlZFwiPT09cj90aGlzLnR5cGU6cixpLGEsbil9aWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3Q9XCJcIit0LGU9XCJcIitlO3ZhciBjPXRoaXMuX25vZGVzLmdldCh0KTtpZighYyl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChvLCc6ICBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgc291cmNlIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtpZighdGhpcy5fbm9kZXMuaGFzKGUpKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KG8sJzogIGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdChlLCdcIiB0YXJnZXQgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVybiBsdCghMSxyLHRoaXMubXVsdGksaSxjLGUsbil9dGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQobyxcIjogdG9vIG1hbnkgYXJndW1lbnRzIChleHBlY3RpbmcgMSwgMiBvciAzIGFuZCBnb3QgXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoLFwiKS5cIikpfX07dmFyIGE9XCJtYXBcIituWzBdLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKTt0LnByb3RvdHlwZVthXT1mdW5jdGlvbigpe3ZhciB0LGU9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSxuPWUucG9wKCk7aWYoMD09PWUubGVuZ3RoKXt2YXIgaT0wO1wiZGlyZWN0ZWRcIiE9PXImJihpKz10aGlzLnVuZGlyZWN0ZWRTaXplKSxcInVuZGlyZWN0ZWRcIiE9PXImJihpKz10aGlzLmRpcmVjdGVkU2l6ZSksdD1uZXcgQXJyYXkoaSk7dmFyIGE9MDtlLnB1c2goKGZ1bmN0aW9uKGUscixpLG8sYyx1LGQpe3RbYSsrXT1uKGUscixpLG8sYyx1LGQpfSkpfWVsc2UgdD1bXSxlLnB1c2goKGZ1bmN0aW9uKGUscixpLG8sYSxjLHUpe3QucHVzaChuKGUscixpLG8sYSxjLHUpKX0pKTtyZXR1cm4gdGhpc1tvXS5hcHBseSh0aGlzLGUpLHR9O3ZhciBjPVwiZmlsdGVyXCIrblswXS50b1VwcGVyQ2FzZSgpK24uc2xpY2UoMSk7dC5wcm90b3R5cGVbY109ZnVuY3Rpb24oKXt2YXIgdD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLGU9dC5wb3AoKSxuPVtdO3JldHVybiB0LnB1c2goKGZ1bmN0aW9uKHQscixpLG8sYSxjLHUpe2UodCxyLGksbyxhLGMsdSkmJm4ucHVzaCh0KX0pKSx0aGlzW29dLmFwcGx5KHRoaXMsdCksbn07dmFyIHU9XCJyZWR1Y2VcIituWzBdLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKTt0LnByb3RvdHlwZVt1XT1mdW5jdGlvbigpe3ZhciB0LGUsbj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO2lmKG4ubGVuZ3RoPDJ8fG4ubGVuZ3RoPjQpdGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQodSxcIjogaW52YWxpZCBudW1iZXIgb2YgYXJndW1lbnRzIChleHBlY3RpbmcgMiwgMyBvciA0IGFuZCBnb3QgXCIpLmNvbmNhdChuLmxlbmd0aCxcIikuXCIpKTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBuW24ubGVuZ3RoLTFdJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBuW24ubGVuZ3RoLTJdKXRocm93IG5ldyBCKFwiR3JhcGguXCIuY29uY2F0KHUsXCI6IG1pc3NpbmcgaW5pdGlhbCB2YWx1ZS4gWW91IG11c3QgcHJvdmlkZSBpdCBiZWNhdXNlIHRoZSBjYWxsYmFjayB0YWtlcyBtb3JlIHRoYW4gb25lIGFyZ3VtZW50IGFuZCB3ZSBjYW5ub3QgaW5mZXIgdGhlIGluaXRpYWwgdmFsdWUgZnJvbSB0aGUgZmlyc3QgaXRlcmF0aW9uLCBhcyB5b3UgY291bGQgd2l0aCBhIHNpbXBsZSBhcnJheS5cIikpOzI9PT1uLmxlbmd0aD8odD1uWzBdLGU9blsxXSxuPVtdKTozPT09bi5sZW5ndGg/KHQ9blsxXSxlPW5bMl0sbj1bblswXV0pOjQ9PT1uLmxlbmd0aCYmKHQ9blsyXSxlPW5bM10sbj1bblswXSxuWzFdXSk7dmFyIHI9ZTtyZXR1cm4gbi5wdXNoKChmdW5jdGlvbihlLG4saSxvLGEsYyx1KXtyPXQocixlLG4saSxvLGEsYyx1KX0pKSx0aGlzW29dLmFwcGx5KHRoaXMsbikscn19KHQsZSksZnVuY3Rpb24odCxlKXt2YXIgbj1lLm5hbWUscj1lLnR5cGUsaT1lLmRpcmVjdGlvbixvPVwiZmluZFwiK25bMF0udG9VcHBlckNhc2UoKStuLnNsaWNlKDEsLTEpO3QucHJvdG90eXBlW29dPWZ1bmN0aW9uKHQsZSxuKXtpZihcIm1peGVkXCIhPT1yJiZcIm1peGVkXCIhPT10aGlzLnR5cGUmJnIhPT10aGlzLnR5cGUpcmV0dXJuITE7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGR0KCEwLHRoaXMscixuPXQpO2lmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt0PVwiXCIrdCxuPWU7dmFyIGE9dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKHZvaWQgMD09PWEpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQobywnOiBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVybiBodCghMCx0aGlzLm11bHRpLFwibWl4ZWRcIj09PXI/dGhpcy50eXBlOnIsaSxhLG4pfWlmKDM9PT1hcmd1bWVudHMubGVuZ3RoKXt0PVwiXCIrdCxlPVwiXCIrZTt2YXIgYz10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIWMpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQobywnOiAgY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHQsJ1wiIHNvdXJjZSBub2RlIGluIHRoZSBncmFwaC4nKSk7aWYoIXRoaXMuX25vZGVzLmhhcyhlKSl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChvLCc6ICBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQoZSwnXCIgdGFyZ2V0IG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm4gbHQoITAscix0aGlzLm11bHRpLGksYyxlLG4pfXRocm93IG5ldyBCKFwiR3JhcGguXCIuY29uY2F0KG8sXCI6IHRvbyBtYW55IGFyZ3VtZW50cyAoZXhwZWN0aW5nIDEsIDIgb3IgMyBhbmQgZ290IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCxcIikuXCIpKX07dmFyIGE9XCJzb21lXCIrblswXS50b1VwcGVyQ2FzZSgpK24uc2xpY2UoMSwtMSk7dC5wcm90b3R5cGVbYV09ZnVuY3Rpb24oKXt2YXIgdD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLGU9dC5wb3AoKTtyZXR1cm4gdC5wdXNoKChmdW5jdGlvbih0LG4scixpLG8sYSxjKXtyZXR1cm4gZSh0LG4scixpLG8sYSxjKX0pKSwhIXRoaXNbb10uYXBwbHkodGhpcyx0KX07dmFyIGM9XCJldmVyeVwiK25bMF0udG9VcHBlckNhc2UoKStuLnNsaWNlKDEsLTEpO3QucHJvdG90eXBlW2NdPWZ1bmN0aW9uKCl7dmFyIHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSxlPXQucG9wKCk7cmV0dXJuIHQucHVzaCgoZnVuY3Rpb24odCxuLHIsaSxvLGEsYyl7cmV0dXJuIWUodCxuLHIsaSxvLGEsYyl9KSksIXRoaXNbb10uYXBwbHkodGhpcyx0KX19KHQsZSksZnVuY3Rpb24odCxlKXt2YXIgbj1lLm5hbWUscj1lLnR5cGUsaT1lLmRpcmVjdGlvbixvPW4uc2xpY2UoMCwtMSkrXCJFbnRyaWVzXCI7dC5wcm90b3R5cGVbb109ZnVuY3Rpb24odCxlKXtpZihcIm1peGVkXCIhPT1yJiZcIm1peGVkXCIhPT10aGlzLnR5cGUmJnIhPT10aGlzLnR5cGUpcmV0dXJuIE8uZW1wdHkoKTtpZighYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gc3QodGhpcyxyKTtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dD1cIlwiK3Q7dmFyIG49dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFuKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KG8sJzogY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm4gZnQocixpLG4pfWlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt0PVwiXCIrdCxlPVwiXCIrZTt2YXIgYT10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIWEpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQobywnOiAgY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHQsJ1wiIHNvdXJjZSBub2RlIGluIHRoZSBncmFwaC4nKSk7aWYoIXRoaXMuX25vZGVzLmhhcyhlKSl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChvLCc6ICBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQoZSwnXCIgdGFyZ2V0IG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm4geXQocixpLGEsZSl9dGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQobyxcIjogdG9vIG1hbnkgYXJndW1lbnRzIChleHBlY3RpbmcgMCwgMSBvciAyIGFuZCBnb3QgXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoLFwiKS5cIikpfX0odCxlKX0pKX0oenQpLGZ1bmN0aW9uKHQpe3d0LmZvckVhY2goKGZ1bmN0aW9uKGUpe190KHQsZSksZnVuY3Rpb24odCxlKXt2YXIgbj1lLm5hbWUscj1lLnR5cGUsaT1lLmRpcmVjdGlvbixvPVwiZm9yRWFjaFwiK25bMF0udG9VcHBlckNhc2UoKStuLnNsaWNlKDEsLTEpO3QucHJvdG90eXBlW29dPWZ1bmN0aW9uKHQsZSl7aWYoXCJtaXhlZFwiPT09cnx8XCJtaXhlZFwiPT09dGhpcy50eXBlfHxyPT09dGhpcy50eXBlKXt0PVwiXCIrdDt2YXIgbj10aGlzLl9ub2Rlcy5nZXQodCk7aWYodm9pZCAwPT09bil0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChvLCc6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7bXQoITEsXCJtaXhlZFwiPT09cj90aGlzLnR5cGU6cixpLG4sZSl9fTt2YXIgYT1cIm1hcFwiK25bMF0udG9VcHBlckNhc2UoKStuLnNsaWNlKDEpO3QucHJvdG90eXBlW2FdPWZ1bmN0aW9uKHQsZSl7dmFyIG49W107cmV0dXJuIHRoaXNbb10odCwoZnVuY3Rpb24odCxyKXtuLnB1c2goZSh0LHIpKX0pKSxufTt2YXIgYz1cImZpbHRlclwiK25bMF0udG9VcHBlckNhc2UoKStuLnNsaWNlKDEpO3QucHJvdG90eXBlW2NdPWZ1bmN0aW9uKHQsZSl7dmFyIG49W107cmV0dXJuIHRoaXNbb10odCwoZnVuY3Rpb24odCxyKXtlKHQscikmJm4ucHVzaCh0KX0pKSxufTt2YXIgdT1cInJlZHVjZVwiK25bMF0udG9VcHBlckNhc2UoKStuLnNsaWNlKDEpO3QucHJvdG90eXBlW3VdPWZ1bmN0aW9uKHQsZSxuKXtpZihhcmd1bWVudHMubGVuZ3RoPDMpdGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQodSxcIjogbWlzc2luZyBpbml0aWFsIHZhbHVlLiBZb3UgbXVzdCBwcm92aWRlIGl0IGJlY2F1c2UgdGhlIGNhbGxiYWNrIHRha2VzIG1vcmUgdGhhbiBvbmUgYXJndW1lbnQgYW5kIHdlIGNhbm5vdCBpbmZlciB0aGUgaW5pdGlhbCB2YWx1ZSBmcm9tIHRoZSBmaXJzdCBpdGVyYXRpb24sIGFzIHlvdSBjb3VsZCB3aXRoIGEgc2ltcGxlIGFycmF5LlwiKSk7dmFyIHI9bjtyZXR1cm4gdGhpc1tvXSh0LChmdW5jdGlvbih0LG4pe3I9ZShyLHQsbil9KSkscn19KHQsZSksZnVuY3Rpb24odCxlKXt2YXIgbj1lLm5hbWUscj1lLnR5cGUsaT1lLmRpcmVjdGlvbixvPW5bMF0udG9VcHBlckNhc2UoKStuLnNsaWNlKDEsLTEpLGE9XCJmaW5kXCIrbzt0LnByb3RvdHlwZVthXT1mdW5jdGlvbih0LGUpe2lmKFwibWl4ZWRcIj09PXJ8fFwibWl4ZWRcIj09PXRoaXMudHlwZXx8cj09PXRoaXMudHlwZSl7dD1cIlwiK3Q7dmFyIG49dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKHZvaWQgMD09PW4pdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQoYSwnOiBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVybiBtdCghMCxcIm1peGVkXCI9PT1yP3RoaXMudHlwZTpyLGksbixlKX19O3ZhciBjPVwic29tZVwiK287dC5wcm90b3R5cGVbY109ZnVuY3Rpb24odCxlKXtyZXR1cm4hIXRoaXNbYV0odCxlKX07dmFyIHU9XCJldmVyeVwiK287dC5wcm90b3R5cGVbdV09ZnVuY3Rpb24odCxlKXtyZXR1cm4hdGhpc1thXSh0LChmdW5jdGlvbih0LG4pe3JldHVybiFlKHQsbil9KSl9fSh0LGUpLEd0KHQsZSl9KSl9KHp0KTt2YXIgV3Q9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbihlKXt2YXIgbj11KHt0eXBlOlwiZGlyZWN0ZWRcIn0sZSk7aWYoXCJtdWx0aVwiaW4gbiYmITEhPT1uLm11bHRpKXRocm93IG5ldyBCKFwiRGlyZWN0ZWRHcmFwaC5mcm9tOiBpbmNvbnNpc3RlbnQgaW5kaWNhdGlvbiB0aGF0IHRoZSBncmFwaCBzaG91bGQgYmUgbXVsdGkgaW4gZ2l2ZW4gb3B0aW9ucyFcIik7aWYoXCJkaXJlY3RlZFwiIT09bi50eXBlKXRocm93IG5ldyBCKCdEaXJlY3RlZEdyYXBoLmZyb206IGluY29uc2lzdGVudCBcIicrbi50eXBlKydcIiB0eXBlIGluIGdpdmVuIG9wdGlvbnMhJyk7cmV0dXJuIHQuY2FsbCh0aGlzLG4pfHx0aGlzfXJldHVybiBlKG4sdCksbn0oenQpLFB0PWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIG4oZSl7dmFyIG49dSh7dHlwZTpcInVuZGlyZWN0ZWRcIn0sZSk7aWYoXCJtdWx0aVwiaW4gbiYmITEhPT1uLm11bHRpKXRocm93IG5ldyBCKFwiVW5kaXJlY3RlZEdyYXBoLmZyb206IGluY29uc2lzdGVudCBpbmRpY2F0aW9uIHRoYXQgdGhlIGdyYXBoIHNob3VsZCBiZSBtdWx0aSBpbiBnaXZlbiBvcHRpb25zIVwiKTtpZihcInVuZGlyZWN0ZWRcIiE9PW4udHlwZSl0aHJvdyBuZXcgQignVW5kaXJlY3RlZEdyYXBoLmZyb206IGluY29uc2lzdGVudCBcIicrbi50eXBlKydcIiB0eXBlIGluIGdpdmVuIG9wdGlvbnMhJyk7cmV0dXJuIHQuY2FsbCh0aGlzLG4pfHx0aGlzfXJldHVybiBlKG4sdCksbn0oenQpLFJ0PWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIG4oZSl7dmFyIG49dSh7bXVsdGk6ITB9LGUpO2lmKFwibXVsdGlcImluIG4mJiEwIT09bi5tdWx0aSl0aHJvdyBuZXcgQihcIk11bHRpR3JhcGguZnJvbTogaW5jb25zaXN0ZW50IGluZGljYXRpb24gdGhhdCB0aGUgZ3JhcGggc2hvdWxkIGJlIHNpbXBsZSBpbiBnaXZlbiBvcHRpb25zIVwiKTtyZXR1cm4gdC5jYWxsKHRoaXMsbil8fHRoaXN9cmV0dXJuIGUobix0KSxufSh6dCksS3Q9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbihlKXt2YXIgbj11KHt0eXBlOlwiZGlyZWN0ZWRcIixtdWx0aTohMH0sZSk7aWYoXCJtdWx0aVwiaW4gbiYmITAhPT1uLm11bHRpKXRocm93IG5ldyBCKFwiTXVsdGlEaXJlY3RlZEdyYXBoLmZyb206IGluY29uc2lzdGVudCBpbmRpY2F0aW9uIHRoYXQgdGhlIGdyYXBoIHNob3VsZCBiZSBzaW1wbGUgaW4gZ2l2ZW4gb3B0aW9ucyFcIik7aWYoXCJkaXJlY3RlZFwiIT09bi50eXBlKXRocm93IG5ldyBCKCdNdWx0aURpcmVjdGVkR3JhcGguZnJvbTogaW5jb25zaXN0ZW50IFwiJytuLnR5cGUrJ1wiIHR5cGUgaW4gZ2l2ZW4gb3B0aW9ucyEnKTtyZXR1cm4gdC5jYWxsKHRoaXMsbil8fHRoaXN9cmV0dXJuIGUobix0KSxufSh6dCksVHQ9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbihlKXt2YXIgbj11KHt0eXBlOlwidW5kaXJlY3RlZFwiLG11bHRpOiEwfSxlKTtpZihcIm11bHRpXCJpbiBuJiYhMCE9PW4ubXVsdGkpdGhyb3cgbmV3IEIoXCJNdWx0aVVuZGlyZWN0ZWRHcmFwaC5mcm9tOiBpbmNvbnNpc3RlbnQgaW5kaWNhdGlvbiB0aGF0IHRoZSBncmFwaCBzaG91bGQgYmUgc2ltcGxlIGluIGdpdmVuIG9wdGlvbnMhXCIpO2lmKFwidW5kaXJlY3RlZFwiIT09bi50eXBlKXRocm93IG5ldyBCKCdNdWx0aVVuZGlyZWN0ZWRHcmFwaC5mcm9tOiBpbmNvbnNpc3RlbnQgXCInK24udHlwZSsnXCIgdHlwZSBpbiBnaXZlbiBvcHRpb25zIScpO3JldHVybiB0LmNhbGwodGhpcyxuKXx8dGhpc31yZXR1cm4gZShuLHQpLG59KHp0KTtmdW5jdGlvbiBCdCh0KXt0LmZyb209ZnVuY3Rpb24oZSxuKXt2YXIgcj11KHt9LGUub3B0aW9ucyxuKSxpPW5ldyB0KHIpO3JldHVybiBpLmltcG9ydChlKSxpfX1yZXR1cm4gQnQoenQpLEJ0KFd0KSxCdChQdCksQnQoUnQpLEJ0KEt0KSxCdChUdCksenQuR3JhcGg9enQsenQuRGlyZWN0ZWRHcmFwaD1XdCx6dC5VbmRpcmVjdGVkR3JhcGg9UHQsenQuTXVsdGlHcmFwaD1SdCx6dC5NdWx0aURpcmVjdGVkR3JhcGg9S3QsenQuTXVsdGlVbmRpcmVjdGVkR3JhcGg9VHQsenQuSW52YWxpZEFyZ3VtZW50c0dyYXBoRXJyb3I9Qix6dC5Ob3RGb3VuZEdyYXBoRXJyb3I9Rix6dC5Vc2FnZUdyYXBoRXJyb3I9SSx6dH0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdyYXBob2xvZ3kudW1kLm1pbi5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogU2lnbWEuanMgQ2FtZXJhIENsYXNzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09XG4gKlxuICogQ2xhc3MgZGVzaWduZWQgdG8gc3RvcmUgY2FtZXJhIGluZm9ybWF0aW9uICYgdXNlZCB0byB1cGRhdGUgaXQuXG4gKiBAbW9kdWxlXG4gKi9cbnZhciBhbmltYXRlXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvYW5pbWF0ZVwiKTtcbnZhciBlYXNpbmdzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2Vhc2luZ3NcIikpO1xudmFyIHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG52YXIgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi90eXBlc1wiKTtcbi8qKlxuICogRGVmYXVsdHMuXG4gKi9cbnZhciBERUZBVUxUX1pPT01JTkdfUkFUSU8gPSAxLjU7XG4vKipcbiAqIENhbWVyYSBjbGFzc1xuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgQ2FtZXJhID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDYW1lcmEsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ2FtZXJhKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy54ID0gMC41O1xuICAgICAgICBfdGhpcy55ID0gMC41O1xuICAgICAgICBfdGhpcy5hbmdsZSA9IDA7XG4gICAgICAgIF90aGlzLnJhdGlvID0gMTtcbiAgICAgICAgX3RoaXMubWluUmF0aW8gPSBudWxsO1xuICAgICAgICBfdGhpcy5tYXhSYXRpbyA9IG51bGw7XG4gICAgICAgIF90aGlzLm5leHRGcmFtZSA9IG51bGw7XG4gICAgICAgIF90aGlzLnByZXZpb3VzU3RhdGUgPSBudWxsO1xuICAgICAgICBfdGhpcy5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgLy8gU3RhdGVcbiAgICAgICAgX3RoaXMucHJldmlvdXNTdGF0ZSA9IF90aGlzLmdldFN0YXRlKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhdGljIG1ldGhvZCB1c2VkIHRvIGNyZWF0ZSBhIENhbWVyYSBvYmplY3Qgd2l0aCBhIGdpdmVuIHN0YXRlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHN0YXRlXG4gICAgICogQHJldHVybiB7Q2FtZXJhfVxuICAgICAqL1xuICAgIENhbWVyYS5mcm9tID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHZhciBjYW1lcmEgPSBuZXcgQ2FtZXJhKCk7XG4gICAgICAgIHJldHVybiBjYW1lcmEuc2V0U3RhdGUoc3RhdGUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gZW5hYmxlIHRoZSBjYW1lcmEuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtDYW1lcmF9XG4gICAgICovXG4gICAgQ2FtZXJhLnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gZGlzYWJsZSB0aGUgY2FtZXJhLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Q2FtZXJhfVxuICAgICAqL1xuICAgIENhbWVyYS5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5lbmFibGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gcmV0cmlldmUgdGhlIGNhbWVyYSdzIGN1cnJlbnQgc3RhdGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAgICovXG4gICAgQ2FtZXJhLnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHRoaXMueCxcbiAgICAgICAgICAgIHk6IHRoaXMueSxcbiAgICAgICAgICAgIGFuZ2xlOiB0aGlzLmFuZ2xlLFxuICAgICAgICAgICAgcmF0aW86IHRoaXMucmF0aW8sXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdXNlZCB0byBjaGVjayB3aGV0aGVyIHRoZSBjYW1lcmEgaGFzIHRoZSBnaXZlbiBzdGF0ZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge29iamVjdH1cbiAgICAgKi9cbiAgICBDYW1lcmEucHJvdG90eXBlLmhhc1N0YXRlID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnggPT09IHN0YXRlLnggJiYgdGhpcy55ID09PSBzdGF0ZS55ICYmIHRoaXMucmF0aW8gPT09IHN0YXRlLnJhdGlvICYmIHRoaXMuYW5nbGUgPT09IHN0YXRlLmFuZ2xlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gcmV0cmlldmUgdGhlIGNhbWVyYSdzIHByZXZpb3VzIHN0YXRlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7b2JqZWN0fVxuICAgICAqL1xuICAgIENhbWVyYS5wcm90b3R5cGUuZ2V0UHJldmlvdXNTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5wcmV2aW91c1N0YXRlO1xuICAgICAgICBpZiAoIXN0YXRlKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBzdGF0ZS54LFxuICAgICAgICAgICAgeTogc3RhdGUueSxcbiAgICAgICAgICAgIGFuZ2xlOiBzdGF0ZS5hbmdsZSxcbiAgICAgICAgICAgIHJhdGlvOiBzdGF0ZS5yYXRpbyxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvIGNoZWNrIG1pblJhdGlvIGFuZCBtYXhSYXRpbyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmF0aW9cbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAgICovXG4gICAgQ2FtZXJhLnByb3RvdHlwZS5nZXRCb3VuZGVkUmF0aW8gPSBmdW5jdGlvbiAocmF0aW8pIHtcbiAgICAgICAgdmFyIHIgPSByYXRpbztcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm1pblJhdGlvID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgciA9IE1hdGgubWF4KHIsIHRoaXMubWluUmF0aW8pO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMubWF4UmF0aW8gPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICByID0gTWF0aC5taW4ociwgdGhpcy5tYXhSYXRpbyk7XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gY2hlY2sgdmFyaW91cyB0aGluZ3MgdG8gcmV0dXJuIGEgbGVnaXQgc3RhdGUgY2FuZGlkYXRlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHN0YXRlXG4gICAgICogQHJldHVybiB7b2JqZWN0fVxuICAgICAqL1xuICAgIENhbWVyYS5wcm90b3R5cGUudmFsaWRhdGVTdGF0ZSA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgdmFsaWRhdGVkU3RhdGUgPSB7fTtcbiAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZS54ID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgdmFsaWRhdGVkU3RhdGUueCA9IHN0YXRlLng7XG4gICAgICAgIGlmICh0eXBlb2Ygc3RhdGUueSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgIHZhbGlkYXRlZFN0YXRlLnkgPSBzdGF0ZS55O1xuICAgICAgICBpZiAodHlwZW9mIHN0YXRlLmFuZ2xlID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgdmFsaWRhdGVkU3RhdGUuYW5nbGUgPSBzdGF0ZS5hbmdsZTtcbiAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZS5yYXRpbyA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgIHZhbGlkYXRlZFN0YXRlLnJhdGlvID0gdGhpcy5nZXRCb3VuZGVkUmF0aW8oc3RhdGUucmF0aW8pO1xuICAgICAgICByZXR1cm4gdmFsaWRhdGVkU3RhdGU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdXNlZCB0byBjaGVjayB3aGV0aGVyIHRoZSBjYW1lcmEgaXMgY3VycmVudGx5IGJlaW5nIGFuaW1hdGVkLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBDYW1lcmEucHJvdG90eXBlLmlzQW5pbWF0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMubmV4dEZyYW1lO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gc2V0IHRoZSBjYW1lcmEncyBzdGF0ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge29iamVjdH0gc3RhdGUgLSBOZXcgc3RhdGUuXG4gICAgICogQHJldHVybiB7Q2FtZXJhfVxuICAgICAqL1xuICAgIENhbWVyYS5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgLy8gVE9ETzogdXBkYXRlIGJ5IGZ1bmN0aW9uXG4gICAgICAgIC8vIEtlZXBpbmcgdHJhY2sgb2YgbGFzdCBzdGF0ZVxuICAgICAgICB0aGlzLnByZXZpb3VzU3RhdGUgPSB0aGlzLmdldFN0YXRlKCk7XG4gICAgICAgIHZhciB2YWxpZFN0YXRlID0gdGhpcy52YWxpZGF0ZVN0YXRlKHN0YXRlKTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWxpZFN0YXRlLnggPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICB0aGlzLnggPSB2YWxpZFN0YXRlLng7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsaWRTdGF0ZS55ID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgdGhpcy55ID0gdmFsaWRTdGF0ZS55O1xuICAgICAgICBpZiAodHlwZW9mIHZhbGlkU3RhdGUuYW5nbGUgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICB0aGlzLmFuZ2xlID0gdmFsaWRTdGF0ZS5hbmdsZTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWxpZFN0YXRlLnJhdGlvID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgdGhpcy5yYXRpbyA9IHZhbGlkU3RhdGUucmF0aW87XG4gICAgICAgIC8vIEVtaXR0aW5nXG4gICAgICAgIGlmICghdGhpcy5oYXNTdGF0ZSh0aGlzLnByZXZpb3VzU3RhdGUpKVxuICAgICAgICAgICAgdGhpcy5lbWl0KFwidXBkYXRlZFwiLCB0aGlzLmdldFN0YXRlKCkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvIHVwZGF0ZSB0aGUgY2FtZXJhJ3Mgc3RhdGUgdXNpbmcgYSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge2Z1bmN0aW9ufSB1cGRhdGVyIC0gVXBkYXRlZCBmdW5jdGlvbiB0YWtpbmcgY3VycmVudCBzdGF0ZSBhbmRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybmluZyBuZXh0IHN0YXRlLlxuICAgICAqIEByZXR1cm4ge0NhbWVyYX1cbiAgICAgKi9cbiAgICBDYW1lcmEucHJvdG90eXBlLnVwZGF0ZVN0YXRlID0gZnVuY3Rpb24gKHVwZGF0ZXIpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh1cGRhdGVyKHRoaXMuZ2V0U3RhdGUoKSkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvIGFuaW1hdGUgdGhlIGNhbWVyYS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge29iamVjdH0gICAgICAgICAgICAgICAgICAgIHN0YXRlICAgICAgLSBTdGF0ZSB0byByZWFjaCBldmVudHVhbGx5LlxuICAgICAqIEBwYXJhbSAge29iamVjdH0gICAgICAgICAgICAgICAgICAgIG9wdHMgICAgICAgLSBPcHRpb25zOlxuICAgICAqIEBwYXJhbSAge251bWJlcn0gICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gLSBEdXJhdGlvbiBvZiB0aGUgYW5pbWF0aW9uLlxuICAgICAqIEBwYXJhbSAge3N0cmluZyB8IG51bWJlciA9PiBudW1iZXJ9ICAgZWFzaW5nICAgLSBFYXNpbmcgZnVuY3Rpb24gb3IgbmFtZSBvZiBhbiBleGlzdGluZyBvbmVcbiAgICAgKiBAcGFyYW0gIHtmdW5jdGlvbn0gICAgICAgICAgICAgICAgICBjYWxsYmFjayAgIC0gQ2FsbGJhY2tcbiAgICAgKi9cbiAgICBDYW1lcmEucHJvdG90eXBlLmFuaW1hdGUgPSBmdW5jdGlvbiAoc3RhdGUsIG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5lbmFibGVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGFuaW1hdGVfMS5BTklNQVRFX0RFRkFVTFRTLCBvcHRzKTtcbiAgICAgICAgdmFyIHZhbGlkU3RhdGUgPSB0aGlzLnZhbGlkYXRlU3RhdGUoc3RhdGUpO1xuICAgICAgICB2YXIgZWFzaW5nID0gdHlwZW9mIG9wdGlvbnMuZWFzaW5nID09PSBcImZ1bmN0aW9uXCIgPyBvcHRpb25zLmVhc2luZyA6IGVhc2luZ3NfMS5kZWZhdWx0W29wdGlvbnMuZWFzaW5nXTtcbiAgICAgICAgLy8gU3RhdGVcbiAgICAgICAgdmFyIHN0YXJ0ID0gRGF0ZS5ub3coKSwgaW5pdGlhbFN0YXRlID0gdGhpcy5nZXRTdGF0ZSgpO1xuICAgICAgICAvLyBGdW5jdGlvbiBwZXJmb3JtaW5nIHRoZSBhbmltYXRpb25cbiAgICAgICAgdmFyIGZuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHQgPSAoRGF0ZS5ub3coKSAtIHN0YXJ0KSAvIG9wdGlvbnMuZHVyYXRpb247XG4gICAgICAgICAgICAvLyBUaGUgYW5pbWF0aW9uIGlzIG92ZXI6XG4gICAgICAgICAgICBpZiAodCA+PSAxKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMubmV4dEZyYW1lID0gbnVsbDtcbiAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh2YWxpZFN0YXRlKTtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuYW5pbWF0aW9uQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuYW5pbWF0aW9uQ2FsbGJhY2suY2FsbChudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuYW5pbWF0aW9uQ2FsbGJhY2sgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjb2VmZmljaWVudCA9IGVhc2luZyh0KTtcbiAgICAgICAgICAgIHZhciBuZXdTdGF0ZSA9IHt9O1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWxpZFN0YXRlLnggPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgbmV3U3RhdGUueCA9IGluaXRpYWxTdGF0ZS54ICsgKHZhbGlkU3RhdGUueCAtIGluaXRpYWxTdGF0ZS54KSAqIGNvZWZmaWNpZW50O1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWxpZFN0YXRlLnkgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgbmV3U3RhdGUueSA9IGluaXRpYWxTdGF0ZS55ICsgKHZhbGlkU3RhdGUueSAtIGluaXRpYWxTdGF0ZS55KSAqIGNvZWZmaWNpZW50O1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWxpZFN0YXRlLmFuZ2xlID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgIG5ld1N0YXRlLmFuZ2xlID0gaW5pdGlhbFN0YXRlLmFuZ2xlICsgKHZhbGlkU3RhdGUuYW5nbGUgLSBpbml0aWFsU3RhdGUuYW5nbGUpICogY29lZmZpY2llbnQ7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbGlkU3RhdGUucmF0aW8gPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgbmV3U3RhdGUucmF0aW8gPSBpbml0aWFsU3RhdGUucmF0aW8gKyAodmFsaWRTdGF0ZS5yYXRpbyAtIGluaXRpYWxTdGF0ZS5yYXRpbykgKiBjb2VmZmljaWVudDtcbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKG5ld1N0YXRlKTtcbiAgICAgICAgICAgIF90aGlzLm5leHRGcmFtZSA9ICgwLCB1dGlsc18xLnJlcXVlc3RGcmFtZSkoZm4pO1xuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5uZXh0RnJhbWUpIHtcbiAgICAgICAgICAgICgwLCB1dGlsc18xLmNhbmNlbEZyYW1lKSh0aGlzLm5leHRGcmFtZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5hbmltYXRpb25DYWxsYmFjaylcbiAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkNhbGxiYWNrLmNhbGwobnVsbCk7XG4gICAgICAgICAgICB0aGlzLm5leHRGcmFtZSA9ICgwLCB1dGlsc18xLnJlcXVlc3RGcmFtZSkoZm4pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFuaW1hdGlvbkNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdXNlZCB0byB6b29tIHRoZSBjYW1lcmEuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtudW1iZXJ8b2JqZWN0fSBmYWN0b3JPck9wdGlvbnMgLSBGYWN0b3Igb3Igb3B0aW9ucy5cbiAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAgICAgKi9cbiAgICBDYW1lcmEucHJvdG90eXBlLmFuaW1hdGVkWm9vbSA9IGZ1bmN0aW9uIChmYWN0b3JPck9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFmYWN0b3JPck9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0ZSh7IHJhdGlvOiB0aGlzLnJhdGlvIC8gREVGQVVMVF9aT09NSU5HX1JBVElPIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBmYWN0b3JPck9wdGlvbnMgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYW5pbWF0ZSh7IHJhdGlvOiB0aGlzLnJhdGlvIC8gZmFjdG9yT3JPcHRpb25zIH0pO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHJhdGlvOiB0aGlzLnJhdGlvIC8gKGZhY3Rvck9yT3B0aW9ucy5mYWN0b3IgfHwgREVGQVVMVF9aT09NSU5HX1JBVElPKSxcbiAgICAgICAgICAgICAgICB9LCBmYWN0b3JPck9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdXNlZCB0byB1bnpvb20gdGhlIGNhbWVyYS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge251bWJlcnxvYmplY3R9IGZhY3Rvck9yT3B0aW9ucyAtIEZhY3RvciBvciBvcHRpb25zLlxuICAgICAqL1xuICAgIENhbWVyYS5wcm90b3R5cGUuYW5pbWF0ZWRVbnpvb20gPSBmdW5jdGlvbiAoZmFjdG9yT3JPcHRpb25zKSB7XG4gICAgICAgIGlmICghZmFjdG9yT3JPcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGUoeyByYXRpbzogdGhpcy5yYXRpbyAqIERFRkFVTFRfWk9PTUlOR19SQVRJTyB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZmFjdG9yT3JPcHRpb25zID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFuaW1hdGUoeyByYXRpbzogdGhpcy5yYXRpbyAqIGZhY3Rvck9yT3B0aW9ucyB9KTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICByYXRpbzogdGhpcy5yYXRpbyAqIChmYWN0b3JPck9wdGlvbnMuZmFjdG9yIHx8IERFRkFVTFRfWk9PTUlOR19SQVRJTyksXG4gICAgICAgICAgICAgICAgfSwgZmFjdG9yT3JPcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gcmVzZXQgdGhlIGNhbWVyYS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge29iamVjdH0gb3B0aW9ucyAtIE9wdGlvbnMuXG4gICAgICovXG4gICAgQ2FtZXJhLnByb3RvdHlwZS5hbmltYXRlZFJlc2V0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5hbmltYXRlKHtcbiAgICAgICAgICAgIHg6IDAuNSxcbiAgICAgICAgICAgIHk6IDAuNSxcbiAgICAgICAgICAgIHJhdGlvOiAxLFxuICAgICAgICAgICAgYW5nbGU6IDAsXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBDYW1lcmEgaW5zdGFuY2UsIHdpdGggdGhlIHNhbWUgc3RhdGUgYXMgdGhlIGN1cnJlbnQgY2FtZXJhLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Q2FtZXJhfVxuICAgICAqL1xuICAgIENhbWVyYS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIENhbWVyYS5mcm9tKHRoaXMuZ2V0U3RhdGUoKSk7XG4gICAgfTtcbiAgICByZXR1cm4gQ2FtZXJhO1xufSh0eXBlc18xLlR5cGVkRXZlbnRFbWl0dGVyKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBDYW1lcmE7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRXaGVlbERlbHRhID0gZXhwb3J0cy5nZXRUb3VjaENvb3JkcyA9IGV4cG9ydHMuZ2V0VG91Y2hlc0FycmF5ID0gZXhwb3J0cy5nZXRXaGVlbENvb3JkcyA9IGV4cG9ydHMuZ2V0TW91c2VDb29yZHMgPSBleHBvcnRzLmdldFBvc2l0aW9uID0gdm9pZCAwO1xuLyoqXG4gKiBTaWdtYS5qcyBDYXB0b3IgQ2xhc3NcbiAqID09PT09PT09PT09PT09PT09PT09PT1cbiAqIEBtb2R1bGVcbiAqL1xudmFyIHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vLi4vdHlwZXNcIik7XG4vKipcbiAqIENhcHRvciB1dGlscyBmdW5jdGlvbnNcbiAqID09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuLyoqXG4gKiBFeHRyYWN0IHRoZSBsb2NhbCBYIGFuZCBZIGNvb3JkaW5hdGVzIGZyb20gYSBtb3VzZSBldmVudCBvciB0b3VjaCBvYmplY3QuIElmXG4gKiBhIERPTSBlbGVtZW50IGlzIGdpdmVuLCBpdCB1c2VzIHRoaXMgZWxlbWVudCdzIG9mZnNldCB0byBjb21wdXRlIHRoZSBwb3NpdGlvblxuICogKHRoaXMgYWxsb3dzIHVzaW5nIGV2ZW50cyB0aGF0IGFyZSBub3QgYm91bmQgdG8gdGhlIGNvbnRhaW5lciBpdHNlbGYgYW5kXG4gKiBzdGlsbCBoYXZlIGEgcHJvcGVyIHBvc2l0aW9uKS5cbiAqXG4gKiBAcGFyYW0gIHtldmVudH0gICAgICAgZSAtIEEgbW91c2UgZXZlbnQgb3IgdG91Y2ggb2JqZWN0LlxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGRvbSAtIEEgRE9NIGVsZW1lbnQgdG8gY29tcHV0ZSBvZmZzZXQgcmVsYXRpdmVseSB0by5cbiAqIEByZXR1cm4ge251bWJlcn0gICAgICBUaGUgbG9jYWwgWSB2YWx1ZSBvZiB0aGUgbW91c2UuXG4gKi9cbmZ1bmN0aW9uIGdldFBvc2l0aW9uKGUsIGRvbSkge1xuICAgIHZhciBiYm94ID0gZG9tLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IGUuY2xpZW50WCAtIGJib3gubGVmdCxcbiAgICAgICAgeTogZS5jbGllbnRZIC0gYmJveC50b3AsXG4gICAgfTtcbn1cbmV4cG9ydHMuZ2V0UG9zaXRpb24gPSBnZXRQb3NpdGlvbjtcbi8qKlxuICogQ29udmVydCBtb3VzZSBjb29yZHMgdG8gc2lnbWEgY29vcmRzLlxuICpcbiAqIEBwYXJhbSAge2V2ZW50fSAgICAgICBlICAgLSBBIG1vdXNlIGV2ZW50IG9yIHRvdWNoIG9iamVjdC5cbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBkb20gLSBBIERPTSBlbGVtZW50IHRvIGNvbXB1dGUgb2Zmc2V0IHJlbGF0aXZlbHkgdG8uXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldE1vdXNlQ29vcmRzKGUsIGRvbSkge1xuICAgIHZhciByZXMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZ2V0UG9zaXRpb24oZSwgZG9tKSksIHsgc2lnbWFEZWZhdWx0UHJldmVudGVkOiBmYWxzZSwgcHJldmVudFNpZ21hRGVmYXVsdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmVzLnNpZ21hRGVmYXVsdFByZXZlbnRlZCA9IHRydWU7XG4gICAgICAgIH0sIG9yaWdpbmFsOiBlIH0pO1xuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLmdldE1vdXNlQ29vcmRzID0gZ2V0TW91c2VDb29yZHM7XG4vKipcbiAqIENvbnZlcnQgbW91c2Ugd2hlZWwgZXZlbnQgY29vcmRzIHRvIHNpZ21hIGNvb3Jkcy5cbiAqXG4gKiBAcGFyYW0gIHtldmVudH0gICAgICAgZSAgIC0gQSB3aGVlbCBtb3VzZSBldmVudC5cbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBkb20gLSBBIERPTSBlbGVtZW50IHRvIGNvbXB1dGUgb2Zmc2V0IHJlbGF0aXZlbHkgdG8uXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldFdoZWVsQ29vcmRzKGUsIGRvbSkge1xuICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZ2V0TW91c2VDb29yZHMoZSwgZG9tKSksIHsgZGVsdGE6IGdldFdoZWVsRGVsdGEoZSkgfSk7XG59XG5leHBvcnRzLmdldFdoZWVsQ29vcmRzID0gZ2V0V2hlZWxDb29yZHM7XG52YXIgTUFYX1RPVUNIRVMgPSAyO1xuZnVuY3Rpb24gZ2V0VG91Y2hlc0FycmF5KHRvdWNoZXMpIHtcbiAgICB2YXIgYXJyID0gW107XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBNYXRoLm1pbih0b3VjaGVzLmxlbmd0aCwgTUFYX1RPVUNIRVMpOyBpIDwgbDsgaSsrKVxuICAgICAgICBhcnIucHVzaCh0b3VjaGVzW2ldKTtcbiAgICByZXR1cm4gYXJyO1xufVxuZXhwb3J0cy5nZXRUb3VjaGVzQXJyYXkgPSBnZXRUb3VjaGVzQXJyYXk7XG4vKipcbiAqIENvbnZlcnQgdG91Y2ggY29vcmRzIHRvIHNpZ21hIGNvb3Jkcy5cbiAqXG4gKiBAcGFyYW0gIHtldmVudH0gICAgICAgZSAgIC0gQSB0b3VjaCBldmVudC5cbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBkb20gLSBBIERPTSBlbGVtZW50IHRvIGNvbXB1dGUgb2Zmc2V0IHJlbGF0aXZlbHkgdG8uXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldFRvdWNoQ29vcmRzKGUsIGRvbSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHRvdWNoZXM6IGdldFRvdWNoZXNBcnJheShlLnRvdWNoZXMpLm1hcChmdW5jdGlvbiAodG91Y2gpIHsgcmV0dXJuIGdldFBvc2l0aW9uKHRvdWNoLCBkb20pOyB9KSxcbiAgICAgICAgb3JpZ2luYWw6IGUsXG4gICAgfTtcbn1cbmV4cG9ydHMuZ2V0VG91Y2hDb29yZHMgPSBnZXRUb3VjaENvb3Jkcztcbi8qKlxuICogRXh0cmFjdCB0aGUgd2hlZWwgZGVsdGEgZnJvbSBhIG1vdXNlIGV2ZW50IG9yIHRvdWNoIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gIHtldmVudH0gIGUgLSBBIG1vdXNlIGV2ZW50IG9yIHRvdWNoIG9iamVjdC5cbiAqIEByZXR1cm4ge251bWJlcn0gICAgIFRoZSB3aGVlbCBkZWx0YSBvZiB0aGUgbW91c2UuXG4gKi9cbmZ1bmN0aW9uIGdldFdoZWVsRGVsdGEoZSkge1xuICAgIC8vIFRPRE86IGNoZWNrIHRob3NlIHJhdGlvcyBhZ2FpbiB0byBlbnN1cmUgYSBjbGVhbiBDaHJvbWUvRmlyZWZveCBjb21wYXRcbiAgICBpZiAodHlwZW9mIGUuZGVsdGFZICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm4gKGUuZGVsdGFZICogLTMpIC8gMzYwO1xuICAgIGlmICh0eXBlb2YgZS5kZXRhaWwgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBlLmRldGFpbCAvIC05O1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhcHRvcjogY291bGQgbm90IGV4dHJhY3QgZGVsdGEgZnJvbSBldmVudC5cIik7XG59XG5leHBvcnRzLmdldFdoZWVsRGVsdGEgPSBnZXRXaGVlbERlbHRhO1xuLyoqXG4gKiBBYnN0cmFjdCBjbGFzcyByZXByZXNlbnRpbmcgYSBjYXB0b3IgbGlrZSB0aGUgdXNlcidzIG1vdXNlIG9yIHRvdWNoIGNvbnRyb2xzLlxuICovXG52YXIgQ2FwdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDYXB0b3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ2FwdG9yKGNvbnRhaW5lciwgcmVuZGVyZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgLy8gUHJvcGVydGllc1xuICAgICAgICBfdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgIF90aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIENhcHRvcjtcbn0odHlwZXNfMS5UeXBlZEV2ZW50RW1pdHRlcikpO1xuZXhwb3J0cy5kZWZhdWx0ID0gQ2FwdG9yO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgY2FwdG9yXzEgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vY2FwdG9yXCIpKTtcbi8qKlxuICogQ29uc3RhbnRzLlxuICovXG52YXIgRFJBR19USU1FT1VUID0gMTAwO1xudmFyIERSQUdHRURfRVZFTlRTX1RPTEVSQU5DRSA9IDM7XG52YXIgTU9VU0VfSU5FUlRJQV9EVVJBVElPTiA9IDIwMDtcbnZhciBNT1VTRV9JTkVSVElBX1JBVElPID0gMztcbnZhciBNT1VTRV9aT09NX0RVUkFUSU9OID0gMjUwO1xudmFyIFpPT01JTkdfUkFUSU8gPSAxLjc7XG52YXIgRE9VQkxFX0NMSUNLX1RJTUVPVVQgPSAzMDA7XG52YXIgRE9VQkxFX0NMSUNLX1pPT01JTkdfUkFUSU8gPSAyLjI7XG52YXIgRE9VQkxFX0NMSUNLX1pPT01JTkdfRFVSQVRJT04gPSAyMDA7XG4vKipcbiAqIE1vdXNlIGNhcHRvciBjbGFzcy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIE1vdXNlQ2FwdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNb3VzZUNhcHRvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNb3VzZUNhcHRvcihjb250YWluZXIsIHJlbmRlcmVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNvbnRhaW5lciwgcmVuZGVyZXIpIHx8IHRoaXM7XG4gICAgICAgIC8vIFN0YXRlXG4gICAgICAgIF90aGlzLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICBfdGhpcy5kcmFnZ2VkRXZlbnRzID0gMDtcbiAgICAgICAgX3RoaXMuZG93blN0YXJ0VGltZSA9IG51bGw7XG4gICAgICAgIF90aGlzLmxhc3RNb3VzZVggPSBudWxsO1xuICAgICAgICBfdGhpcy5sYXN0TW91c2VZID0gbnVsbDtcbiAgICAgICAgX3RoaXMuaXNNb3VzZURvd24gPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaXNNb3ZpbmcgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMubW92aW5nVGltZW91dCA9IG51bGw7XG4gICAgICAgIF90aGlzLnN0YXJ0Q2FtZXJhU3RhdGUgPSBudWxsO1xuICAgICAgICBfdGhpcy5jbGlja3MgPSAwO1xuICAgICAgICBfdGhpcy5kb3VibGVDbGlja1RpbWVvdXQgPSBudWxsO1xuICAgICAgICBfdGhpcy5jdXJyZW50V2hlZWxEaXJlY3Rpb24gPSAwO1xuICAgICAgICAvLyBCaW5kaW5nIG1ldGhvZHNcbiAgICAgICAgX3RoaXMuaGFuZGxlQ2xpY2sgPSBfdGhpcy5oYW5kbGVDbGljay5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMuaGFuZGxlUmlnaHRDbGljayA9IF90aGlzLmhhbmRsZVJpZ2h0Q2xpY2suYmluZChfdGhpcyk7XG4gICAgICAgIF90aGlzLmhhbmRsZURvd24gPSBfdGhpcy5oYW5kbGVEb3duLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5oYW5kbGVVcCA9IF90aGlzLmhhbmRsZVVwLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5oYW5kbGVNb3ZlID0gX3RoaXMuaGFuZGxlTW92ZS5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMuaGFuZGxlV2hlZWwgPSBfdGhpcy5oYW5kbGVXaGVlbC5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMuaGFuZGxlT3V0ID0gX3RoaXMuaGFuZGxlT3V0LmJpbmQoX3RoaXMpO1xuICAgICAgICAvLyBCaW5kaW5nIGV2ZW50c1xuICAgICAgICBjb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIF90aGlzLmhhbmRsZUNsaWNrLCBmYWxzZSk7XG4gICAgICAgIGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwiY29udGV4dG1lbnVcIiwgX3RoaXMuaGFuZGxlUmlnaHRDbGljaywgZmFsc2UpO1xuICAgICAgICBjb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBfdGhpcy5oYW5kbGVEb3duLCBmYWxzZSk7XG4gICAgICAgIGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwid2hlZWxcIiwgX3RoaXMuaGFuZGxlV2hlZWwsIGZhbHNlKTtcbiAgICAgICAgY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW91dFwiLCBfdGhpcy5oYW5kbGVPdXQsIGZhbHNlKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBfdGhpcy5oYW5kbGVNb3ZlLCBmYWxzZSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIF90aGlzLmhhbmRsZVVwLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgTW91c2VDYXB0b3IucHJvdG90eXBlLmtpbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmhhbmRsZUNsaWNrKTtcbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLCB0aGlzLmhhbmRsZVJpZ2h0Q2xpY2spO1xuICAgICAgICBjb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLmhhbmRsZURvd24pO1xuICAgICAgICBjb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIndoZWVsXCIsIHRoaXMuaGFuZGxlV2hlZWwpO1xuICAgICAgICBjb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3V0XCIsIHRoaXMuaGFuZGxlT3V0KTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLmhhbmRsZU1vdmUpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLmhhbmRsZVVwKTtcbiAgICB9O1xuICAgIE1vdXNlQ2FwdG9yLnByb3RvdHlwZS5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5lbmFibGVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmNsaWNrcysrO1xuICAgICAgICBpZiAodGhpcy5jbGlja3MgPT09IDIpIHtcbiAgICAgICAgICAgIHRoaXMuY2xpY2tzID0gMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5kb3VibGVDbGlja1RpbWVvdXQgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5kb3VibGVDbGlja1RpbWVvdXQpO1xuICAgICAgICAgICAgICAgIHRoaXMuZG91YmxlQ2xpY2tUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZURvdWJsZUNsaWNrKGUpO1xuICAgICAgICB9XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuY2xpY2tzID0gMDtcbiAgICAgICAgICAgIF90aGlzLmRvdWJsZUNsaWNrVGltZW91dCA9IG51bGw7XG4gICAgICAgIH0sIERPVUJMRV9DTElDS19USU1FT1VUKTtcbiAgICAgICAgLy8gTk9URTogdGhpcyBpcyBoZXJlIHRvIHByZXZlbnQgY2xpY2sgZXZlbnRzIG9uIGRyYWdcbiAgICAgICAgaWYgKHRoaXMuZHJhZ2dlZEV2ZW50cyA8IERSQUdHRURfRVZFTlRTX1RPTEVSQU5DRSlcbiAgICAgICAgICAgIHRoaXMuZW1pdChcImNsaWNrXCIsICgwLCBjYXB0b3JfMS5nZXRNb3VzZUNvb3JkcykoZSwgdGhpcy5jb250YWluZXIpKTtcbiAgICB9O1xuICAgIE1vdXNlQ2FwdG9yLnByb3RvdHlwZS5oYW5kbGVSaWdodENsaWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuZW1pdChcInJpZ2h0Q2xpY2tcIiwgKDAsIGNhcHRvcl8xLmdldE1vdXNlQ29vcmRzKShlLCB0aGlzLmNvbnRhaW5lcikpO1xuICAgIH07XG4gICAgTW91c2VDYXB0b3IucHJvdG90eXBlLmhhbmRsZURvdWJsZUNsaWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdmFyIG1vdXNlQ29vcmRzID0gKDAsIGNhcHRvcl8xLmdldE1vdXNlQ29vcmRzKShlLCB0aGlzLmNvbnRhaW5lcik7XG4gICAgICAgIHRoaXMuZW1pdChcImRvdWJsZUNsaWNrXCIsIG1vdXNlQ29vcmRzKTtcbiAgICAgICAgaWYgKG1vdXNlQ29vcmRzLnNpZ21hRGVmYXVsdFByZXZlbnRlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLy8gZGVmYXVsdCBiZWhhdmlvclxuICAgICAgICB2YXIgY2FtZXJhID0gdGhpcy5yZW5kZXJlci5nZXRDYW1lcmEoKTtcbiAgICAgICAgdmFyIG5ld1JhdGlvID0gY2FtZXJhLmdldEJvdW5kZWRSYXRpbyhjYW1lcmEuZ2V0U3RhdGUoKS5yYXRpbyAvIERPVUJMRV9DTElDS19aT09NSU5HX1JBVElPKTtcbiAgICAgICAgY2FtZXJhLmFuaW1hdGUodGhpcy5yZW5kZXJlci5nZXRWaWV3cG9ydFpvb21lZFN0YXRlKCgwLCBjYXB0b3JfMS5nZXRQb3NpdGlvbikoZSwgdGhpcy5jb250YWluZXIpLCBuZXdSYXRpbyksIHtcbiAgICAgICAgICAgIGVhc2luZzogXCJxdWFkcmF0aWNJbk91dFwiLFxuICAgICAgICAgICAgZHVyYXRpb246IERPVUJMRV9DTElDS19aT09NSU5HX0RVUkFUSU9OLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE1vdXNlQ2FwdG9yLnByb3RvdHlwZS5oYW5kbGVEb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIC8vIFdlIG9ubHkgc3RhcnQgZHJhZ2dpbmcgb24gbGVmdCBidXR0b25cbiAgICAgICAgaWYgKGUuYnV0dG9uID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0Q2FtZXJhU3RhdGUgPSB0aGlzLnJlbmRlcmVyLmdldENhbWVyYSgpLmdldFN0YXRlKCk7XG4gICAgICAgICAgICB2YXIgX2EgPSAoMCwgY2FwdG9yXzEuZ2V0UG9zaXRpb24pKGUsIHRoaXMuY29udGFpbmVyKSwgeCA9IF9hLngsIHkgPSBfYS55O1xuICAgICAgICAgICAgdGhpcy5sYXN0TW91c2VYID0geDtcbiAgICAgICAgICAgIHRoaXMubGFzdE1vdXNlWSA9IHk7XG4gICAgICAgICAgICB0aGlzLmRyYWdnZWRFdmVudHMgPSAwO1xuICAgICAgICAgICAgdGhpcy5kb3duU3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIHRoaXMuaXNNb3VzZURvd24gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdChcIm1vdXNlZG93blwiLCAoMCwgY2FwdG9yXzEuZ2V0TW91c2VDb29yZHMpKGUsIHRoaXMuY29udGFpbmVyKSk7XG4gICAgfTtcbiAgICBNb3VzZUNhcHRvci5wcm90b3R5cGUuaGFuZGxlVXAgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuZW5hYmxlZCB8fCAhdGhpcy5pc01vdXNlRG93bilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIGNhbWVyYSA9IHRoaXMucmVuZGVyZXIuZ2V0Q2FtZXJhKCk7XG4gICAgICAgIHRoaXMuaXNNb3VzZURvd24gPSBmYWxzZTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm1vdmluZ1RpbWVvdXQgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLm1vdmluZ1RpbWVvdXQpO1xuICAgICAgICAgICAgdGhpcy5tb3ZpbmdUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2EgPSAoMCwgY2FwdG9yXzEuZ2V0UG9zaXRpb24pKGUsIHRoaXMuY29udGFpbmVyKSwgeCA9IF9hLngsIHkgPSBfYS55O1xuICAgICAgICB2YXIgY2FtZXJhU3RhdGUgPSBjYW1lcmEuZ2V0U3RhdGUoKSwgcHJldmlvdXNDYW1lcmFTdGF0ZSA9IGNhbWVyYS5nZXRQcmV2aW91c1N0YXRlKCkgfHwgeyB4OiAwLCB5OiAwIH07XG4gICAgICAgIGlmICh0aGlzLmlzTW92aW5nKSB7XG4gICAgICAgICAgICBjYW1lcmEuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgeDogY2FtZXJhU3RhdGUueCArIE1PVVNFX0lORVJUSUFfUkFUSU8gKiAoY2FtZXJhU3RhdGUueCAtIHByZXZpb3VzQ2FtZXJhU3RhdGUueCksXG4gICAgICAgICAgICAgICAgeTogY2FtZXJhU3RhdGUueSArIE1PVVNFX0lORVJUSUFfUkFUSU8gKiAoY2FtZXJhU3RhdGUueSAtIHByZXZpb3VzQ2FtZXJhU3RhdGUueSksXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IE1PVVNFX0lORVJUSUFfRFVSQVRJT04sXG4gICAgICAgICAgICAgICAgZWFzaW5nOiBcInF1YWRyYXRpY091dFwiLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5sYXN0TW91c2VYICE9PSB4IHx8IHRoaXMubGFzdE1vdXNlWSAhPT0geSkge1xuICAgICAgICAgICAgY2FtZXJhLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICB4OiBjYW1lcmFTdGF0ZS54LFxuICAgICAgICAgICAgICAgIHk6IGNhbWVyYVN0YXRlLnksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzTW92aW5nID0gZmFsc2U7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuZHJhZ2dlZEV2ZW50cyA9IDA7XG4gICAgICAgICAgICAvLyBOT1RFOiB0aGlzIHJlZnJlc2ggaXMgaGVyZSB0byBtYWtlIHN1cmUgYGhpZGVFZGdlc09uTW92ZWAgY2FuIHdvcmtcbiAgICAgICAgICAgIC8vIHdoZW4gc29tZW9uZSByZWxlYXNlcyBjYW1lcmEgcGFuIGRyYWcgYWZ0ZXIgaGF2aW5nIHN0b3BwZWQgbW92aW5nLlxuICAgICAgICAgICAgLy8gU2VlIGNvbW1pdDogaHR0cHM6Ly9naXRodWIuY29tL2phY29teWFsL3NpZ21hLmpzL2NvbW1pdC9jZmQ5MTk3ZjcwMzE5MTA5ZGI2YjY3NWRkN2M4MmJlNDkzY2E5NWEyXG4gICAgICAgICAgICAvLyBTZWUgYWxzbyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2phY29teWFsL3NpZ21hLmpzL2lzc3Vlcy8xMjkwXG4gICAgICAgICAgICAvLyBJdCBjb3VsZCBiZSBwb3NzaWJsZSB0byByZW5kZXIgaW5zdGVhZCBvZiBzY2hlZHVsaW5nIGEgcmVmcmVzaCBidXQgZm9yXG4gICAgICAgICAgICAvLyBub3cgaXQgc2VlbXMgZ29vZCBlbm91Z2guXG4gICAgICAgICAgICBfdGhpcy5yZW5kZXJlci5yZWZyZXNoKCk7XG4gICAgICAgIH0sIDApO1xuICAgICAgICB0aGlzLmVtaXQoXCJtb3VzZXVwXCIsICgwLCBjYXB0b3JfMS5nZXRNb3VzZUNvb3JkcykoZSwgdGhpcy5jb250YWluZXIpKTtcbiAgICB9O1xuICAgIE1vdXNlQ2FwdG9yLnByb3RvdHlwZS5oYW5kbGVNb3ZlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBtb3VzZUNvb3JkcyA9ICgwLCBjYXB0b3JfMS5nZXRNb3VzZUNvb3JkcykoZSwgdGhpcy5jb250YWluZXIpO1xuICAgICAgICAvLyBBbHdheXMgdHJpZ2dlciBhIFwibW91c2Vtb3ZlYm9keVwiIGV2ZW50LCBzbyB0aGF0IGl0IGlzIHBvc3NpYmxlIHRvIGRldmVsb3BcbiAgICAgICAgLy8gYSBkcmFnLWFuZC1kcm9wIGVmZmVjdCB0aGF0IHdvcmtzIGV2ZW4gd2hlbiB0aGUgbW91c2UgaXMgb3V0IG9mIHRoZVxuICAgICAgICAvLyBjb250YWluZXI6XG4gICAgICAgIHRoaXMuZW1pdChcIm1vdXNlbW92ZWJvZHlcIiwgbW91c2VDb29yZHMpO1xuICAgICAgICAvLyBPbmx5IHRyaWdnZXIgdGhlIFwibW91c2Vtb3ZlXCIgZXZlbnQgd2hlbiB0aGUgbW91c2UgaXMgYWN0dWFsbHkgaG92ZXJpbmdcbiAgICAgICAgLy8gdGhlIGNvbnRhaW5lciwgdG8gYXZvaWQgd2VpcmRseSBob3ZlcmluZyBub2RlcyBhbmQvb3IgZWRnZXMgd2hlbiB0aGVcbiAgICAgICAgLy8gbW91c2UgaXMgbm90IGhvdmVyIHRoZSBjb250YWluZXI6XG4gICAgICAgIGlmIChlLnRhcmdldCA9PT0gdGhpcy5jb250YWluZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcIm1vdXNlbW92ZVwiLCBtb3VzZUNvb3Jkcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vdXNlQ29vcmRzLnNpZ21hRGVmYXVsdFByZXZlbnRlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLy8gSGFuZGxlIHRoZSBjYXNlIHdoZW4gXCJpc01vdXNlRG93blwiIGFsbCB0aGUgdGltZSwgdG8gYWxsb3cgZHJhZ2dpbmcgdGhlXG4gICAgICAgIC8vIHN0YWdlIHdoaWxlIHRoZSBtb3VzZSBpcyBub3QgaG92ZXIgdGhlIGNvbnRhaW5lcjpcbiAgICAgICAgaWYgKHRoaXMuaXNNb3VzZURvd24pIHtcbiAgICAgICAgICAgIHRoaXMuaXNNb3ZpbmcgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5kcmFnZ2VkRXZlbnRzKys7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMubW92aW5nVGltZW91dCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLm1vdmluZ1RpbWVvdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tb3ZpbmdUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLm1vdmluZ1RpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgICAgIF90aGlzLmlzTW92aW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9LCBEUkFHX1RJTUVPVVQpO1xuICAgICAgICAgICAgdmFyIGNhbWVyYSA9IHRoaXMucmVuZGVyZXIuZ2V0Q2FtZXJhKCk7XG4gICAgICAgICAgICB2YXIgX2EgPSAoMCwgY2FwdG9yXzEuZ2V0UG9zaXRpb24pKGUsIHRoaXMuY29udGFpbmVyKSwgZVggPSBfYS54LCBlWSA9IF9hLnk7XG4gICAgICAgICAgICB2YXIgbGFzdE1vdXNlID0gdGhpcy5yZW5kZXJlci52aWV3cG9ydFRvRnJhbWVkR3JhcGgoe1xuICAgICAgICAgICAgICAgIHg6IHRoaXMubGFzdE1vdXNlWCxcbiAgICAgICAgICAgICAgICB5OiB0aGlzLmxhc3RNb3VzZVksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBtb3VzZSA9IHRoaXMucmVuZGVyZXIudmlld3BvcnRUb0ZyYW1lZEdyYXBoKHsgeDogZVgsIHk6IGVZIH0pO1xuICAgICAgICAgICAgdmFyIG9mZnNldFggPSBsYXN0TW91c2UueCAtIG1vdXNlLngsIG9mZnNldFkgPSBsYXN0TW91c2UueSAtIG1vdXNlLnk7XG4gICAgICAgICAgICB2YXIgY2FtZXJhU3RhdGUgPSBjYW1lcmEuZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgIHZhciB4ID0gY2FtZXJhU3RhdGUueCArIG9mZnNldFgsIHkgPSBjYW1lcmFTdGF0ZS55ICsgb2Zmc2V0WTtcbiAgICAgICAgICAgIGNhbWVyYS5zZXRTdGF0ZSh7IHg6IHgsIHk6IHkgfSk7XG4gICAgICAgICAgICB0aGlzLmxhc3RNb3VzZVggPSBlWDtcbiAgICAgICAgICAgIHRoaXMubGFzdE1vdXNlWSA9IGVZO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTW91c2VDYXB0b3IucHJvdG90eXBlLmhhbmRsZVdoZWVsID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdmFyIGRlbHRhID0gKDAsIGNhcHRvcl8xLmdldFdoZWVsRGVsdGEpKGUpO1xuICAgICAgICBpZiAoIWRlbHRhKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgd2hlZWxDb29yZHMgPSAoMCwgY2FwdG9yXzEuZ2V0V2hlZWxDb29yZHMpKGUsIHRoaXMuY29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5lbWl0KFwid2hlZWxcIiwgd2hlZWxDb29yZHMpO1xuICAgICAgICBpZiAod2hlZWxDb29yZHMuc2lnbWFEZWZhdWx0UHJldmVudGVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvLyBEZWZhdWx0IGJlaGF2aW9yXG4gICAgICAgIHZhciByYXRpb0RpZmYgPSBkZWx0YSA+IDAgPyAxIC8gWk9PTUlOR19SQVRJTyA6IFpPT01JTkdfUkFUSU87XG4gICAgICAgIHZhciBjYW1lcmEgPSB0aGlzLnJlbmRlcmVyLmdldENhbWVyYSgpO1xuICAgICAgICB2YXIgbmV3UmF0aW8gPSBjYW1lcmEuZ2V0Qm91bmRlZFJhdGlvKGNhbWVyYS5nZXRTdGF0ZSgpLnJhdGlvICogcmF0aW9EaWZmKTtcbiAgICAgICAgdmFyIHdoZWVsRGlyZWN0aW9uID0gZGVsdGEgPiAwID8gMSA6IC0xO1xuICAgICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgLy8gQ2FuY2VsIGV2ZW50cyB0aGF0IGFyZSB0b28gY2xvc2UgdG9vIGVhY2ggb3RoZXIgYW5kIGluIHRoZSBzYW1lIGRpcmVjdGlvbjpcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFdoZWVsRGlyZWN0aW9uID09PSB3aGVlbERpcmVjdGlvbiAmJlxuICAgICAgICAgICAgdGhpcy5sYXN0V2hlZWxUcmlnZ2VyVGltZSAmJlxuICAgICAgICAgICAgbm93IC0gdGhpcy5sYXN0V2hlZWxUcmlnZ2VyVGltZSA8IE1PVVNFX1pPT01fRFVSQVRJT04gLyA1KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY2FtZXJhLmFuaW1hdGUodGhpcy5yZW5kZXJlci5nZXRWaWV3cG9ydFpvb21lZFN0YXRlKCgwLCBjYXB0b3JfMS5nZXRQb3NpdGlvbikoZSwgdGhpcy5jb250YWluZXIpLCBuZXdSYXRpbyksIHtcbiAgICAgICAgICAgIGVhc2luZzogXCJxdWFkcmF0aWNPdXRcIixcbiAgICAgICAgICAgIGR1cmF0aW9uOiBNT1VTRV9aT09NX0RVUkFUSU9OLFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5jdXJyZW50V2hlZWxEaXJlY3Rpb24gPSAwO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jdXJyZW50V2hlZWxEaXJlY3Rpb24gPSB3aGVlbERpcmVjdGlvbjtcbiAgICAgICAgdGhpcy5sYXN0V2hlZWxUcmlnZ2VyVGltZSA9IG5vdztcbiAgICB9O1xuICAgIE1vdXNlQ2FwdG9yLnByb3RvdHlwZS5oYW5kbGVPdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRPRE86IGRpc3BhdGNoIGV2ZW50XG4gICAgfTtcbiAgICByZXR1cm4gTW91c2VDYXB0b3I7XG59KGNhcHRvcl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IE1vdXNlQ2FwdG9yO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgY2FwdG9yXzEgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vY2FwdG9yXCIpKTtcbnZhciBEUkFHX1RJTUVPVVQgPSAyMDA7XG52YXIgVE9VQ0hfSU5FUlRJQV9SQVRJTyA9IDM7XG52YXIgVE9VQ0hfSU5FUlRJQV9EVVJBVElPTiA9IDIwMDtcbi8qKlxuICogVG91Y2ggY2FwdG9yIGNsYXNzLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgVG91Y2hDYXB0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRvdWNoQ2FwdG9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRvdWNoQ2FwdG9yKGNvbnRhaW5lciwgcmVuZGVyZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29udGFpbmVyLCByZW5kZXJlcikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZW5hYmxlZCA9IHRydWU7XG4gICAgICAgIF90aGlzLmlzTW92aW5nID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmhhc01vdmVkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLnRvdWNoTW9kZSA9IDA7IC8vIG51bWJlciBvZiB0b3VjaGVzIGRvd25cbiAgICAgICAgX3RoaXMuc3RhcnRUb3VjaGVzUG9zaXRpb25zID0gW107XG4gICAgICAgIC8vIEJpbmRpbmcgbWV0aG9kczpcbiAgICAgICAgX3RoaXMuaGFuZGxlU3RhcnQgPSBfdGhpcy5oYW5kbGVTdGFydC5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMuaGFuZGxlTGVhdmUgPSBfdGhpcy5oYW5kbGVMZWF2ZS5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMuaGFuZGxlTW92ZSA9IF90aGlzLmhhbmRsZU1vdmUuYmluZChfdGhpcyk7XG4gICAgICAgIC8vIEJpbmRpbmcgZXZlbnRzXG4gICAgICAgIGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBfdGhpcy5oYW5kbGVTdGFydCwgZmFsc2UpO1xuICAgICAgICBjb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIF90aGlzLmhhbmRsZUxlYXZlLCBmYWxzZSk7XG4gICAgICAgIGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hjYW5jZWxcIiwgX3RoaXMuaGFuZGxlTGVhdmUsIGZhbHNlKTtcbiAgICAgICAgY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgX3RoaXMuaGFuZGxlTW92ZSwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRvdWNoQ2FwdG9yLnByb3RvdHlwZS5raWxsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29udGFpbmVyID0gdGhpcy5jb250YWluZXI7XG4gICAgICAgIGNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCB0aGlzLmhhbmRsZVN0YXJ0KTtcbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCB0aGlzLmhhbmRsZUxlYXZlKTtcbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaGNhbmNlbFwiLCB0aGlzLmhhbmRsZUxlYXZlKTtcbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgdGhpcy5oYW5kbGVNb3ZlKTtcbiAgICB9O1xuICAgIFRvdWNoQ2FwdG9yLnByb3RvdHlwZS5nZXREaW1lbnNpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd2lkdGg6IHRoaXMuY29udGFpbmVyLm9mZnNldFdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmNvbnRhaW5lci5vZmZzZXRIZWlnaHQsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBUb3VjaENhcHRvci5wcm90b3R5cGUuZGlzcGF0Y2hSZWxhdGVkTW91c2VFdmVudCA9IGZ1bmN0aW9uICh0eXBlLCBlLCB0b3VjaCwgZW1pdHRlcikge1xuICAgICAgICB2YXIgbW91c2VQb3NpdGlvbiA9IHRvdWNoIHx8IGUudG91Y2hlc1swXTtcbiAgICAgICAgdmFyIG1vdXNlRXZlbnQgPSBuZXcgTW91c2VFdmVudCh0eXBlLCB7XG4gICAgICAgICAgICBjbGllbnRYOiBtb3VzZVBvc2l0aW9uLmNsaWVudFgsXG4gICAgICAgICAgICBjbGllbnRZOiBtb3VzZVBvc2l0aW9uLmNsaWVudFksXG4gICAgICAgICAgICBhbHRLZXk6IGUuYWx0S2V5LFxuICAgICAgICAgICAgY3RybEtleTogZS5jdHJsS2V5LFxuICAgICAgICB9KTtcbiAgICAgICAgbW91c2VFdmVudC5pc0Zha2VTaWdtYU1vdXNlRXZlbnQgPSB0cnVlO1xuICAgICAgICAoZW1pdHRlciB8fCB0aGlzLmNvbnRhaW5lcikuZGlzcGF0Y2hFdmVudChtb3VzZUV2ZW50KTtcbiAgICB9O1xuICAgIFRvdWNoQ2FwdG9yLnByb3RvdHlwZS5oYW5kbGVTdGFydCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5lbmFibGVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvLyBQcmV2ZW50IGRlZmF1bHQgdG8gYXZvaWQgZGVmYXVsdCBicm93c2VyIGJlaGF2aW9ycy4uLlxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIC8vIC4uLmJ1dCBzaW11bGF0ZSBtb3VzZSBiZWhhdmlvciBhbnl3YXksIHRvIGdldCB0aGUgTW91c2VDYXB0b3Igd29ya2luZyBhcyB3ZWxsOlxuICAgICAgICBpZiAoZS50b3VjaGVzLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hSZWxhdGVkTW91c2VFdmVudChcIm1vdXNlZG93blwiLCBlKTtcbiAgICAgICAgdmFyIHRvdWNoZXMgPSAoMCwgY2FwdG9yXzEuZ2V0VG91Y2hlc0FycmF5KShlLnRvdWNoZXMpO1xuICAgICAgICB0aGlzLnRvdWNoTW9kZSA9IHRvdWNoZXMubGVuZ3RoO1xuICAgICAgICB0aGlzLnN0YXJ0Q2FtZXJhU3RhdGUgPSB0aGlzLnJlbmRlcmVyLmdldENhbWVyYSgpLmdldFN0YXRlKCk7XG4gICAgICAgIHRoaXMuc3RhcnRUb3VjaGVzUG9zaXRpb25zID0gdG91Y2hlcy5tYXAoZnVuY3Rpb24gKHRvdWNoKSB7IHJldHVybiAoMCwgY2FwdG9yXzEuZ2V0UG9zaXRpb24pKHRvdWNoLCBfdGhpcy5jb250YWluZXIpOyB9KTtcbiAgICAgICAgdGhpcy5sYXN0VG91Y2hlcyA9IHRvdWNoZXM7XG4gICAgICAgIHRoaXMubGFzdFRvdWNoZXNQb3NpdGlvbnMgPSB0aGlzLnN0YXJ0VG91Y2hlc1Bvc2l0aW9ucztcbiAgICAgICAgLy8gV2hlbiB0aGVyZSBhcmUgdHdvIHRvdWNoZXMgZG93biwgbGV0J3MgcmVjb3JkIGRpc3RhbmNlIGFuZCBhbmdsZSBhcyB3ZWxsOlxuICAgICAgICBpZiAodGhpcy50b3VjaE1vZGUgPT09IDIpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF9fcmVhZCh0aGlzLnN0YXJ0VG91Y2hlc1Bvc2l0aW9ucywgMiksIF9iID0gX2FbMF0sIHgwID0gX2IueCwgeTAgPSBfYi55LCBfYyA9IF9hWzFdLCB4MSA9IF9jLngsIHkxID0gX2MueTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRUb3VjaGVzQW5nbGUgPSBNYXRoLmF0YW4yKHkxIC0geTAsIHgxIC0geDApO1xuICAgICAgICAgICAgdGhpcy5zdGFydFRvdWNoZXNEaXN0YW5jZSA9IE1hdGguc3FydChNYXRoLnBvdyh4MSAtIHgwLCAyKSArIE1hdGgucG93KHkxIC0geTAsIDIpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVtaXQoXCJ0b3VjaGRvd25cIiwgKDAsIGNhcHRvcl8xLmdldFRvdWNoQ29vcmRzKShlLCB0aGlzLmNvbnRhaW5lcikpO1xuICAgIH07XG4gICAgVG91Y2hDYXB0b3IucHJvdG90eXBlLmhhbmRsZUxlYXZlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIC8vIFByZXZlbnQgZGVmYXVsdCB0byBhdm9pZCBkZWZhdWx0IGJyb3dzZXIgYmVoYXZpb3JzLi4uXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgLy8gLi4uYnV0IHNpbXVsYXRlIG1vdXNlIGJlaGF2aW9yIGFueXdheSwgdG8gZ2V0IHRoZSBNb3VzZUNhcHRvciB3b3JraW5nIGFzIHdlbGw6XG4gICAgICAgIGlmIChlLnRvdWNoZXMubGVuZ3RoID09PSAwICYmIHRoaXMubGFzdFRvdWNoZXMgJiYgdGhpcy5sYXN0VG91Y2hlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hSZWxhdGVkTW91c2VFdmVudChcIm1vdXNldXBcIiwgZSwgdGhpcy5sYXN0VG91Y2hlc1swXSwgZG9jdW1lbnQpO1xuICAgICAgICAgICAgLy8gLi4uIGFuZCBvbmx5IGNsaWNrIGlmIG5vIG1vdmUgd2FzIG1hZGVcbiAgICAgICAgICAgIGlmICghdGhpcy5oYXNNb3ZlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hSZWxhdGVkTW91c2VFdmVudChcImNsaWNrXCIsIGUsIHRoaXMubGFzdFRvdWNoZXNbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm1vdmluZ1RpbWVvdXQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNNb3ZpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLm1vdmluZ1RpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAodGhpcy50b3VjaE1vZGUpIHtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBpZiAoZS50b3VjaGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVN0YXJ0KGUpO1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAvLyBUT0RPXG4gICAgICAgICAgICAgICAgLy8gRGlzcGF0Y2ggZXZlbnRcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc01vdmluZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2FtZXJhID0gdGhpcy5yZW5kZXJlci5nZXRDYW1lcmEoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhbWVyYVN0YXRlID0gY2FtZXJhLmdldFN0YXRlKCksIHByZXZpb3VzQ2FtZXJhU3RhdGUgPSBjYW1lcmEuZ2V0UHJldmlvdXNTdGF0ZSgpIHx8IHsgeDogMCwgeTogMCB9O1xuICAgICAgICAgICAgICAgICAgICBjYW1lcmEuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBjYW1lcmFTdGF0ZS54ICsgVE9VQ0hfSU5FUlRJQV9SQVRJTyAqIChjYW1lcmFTdGF0ZS54IC0gcHJldmlvdXNDYW1lcmFTdGF0ZS54KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IGNhbWVyYVN0YXRlLnkgKyBUT1VDSF9JTkVSVElBX1JBVElPICogKGNhbWVyYVN0YXRlLnkgLSBwcmV2aW91c0NhbWVyYVN0YXRlLnkpLFxuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogVE9VQ0hfSU5FUlRJQV9EVVJBVElPTixcbiAgICAgICAgICAgICAgICAgICAgICAgIGVhc2luZzogXCJxdWFkcmF0aWNPdXRcIixcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuaGFzTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzTW92aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy50b3VjaE1vZGUgPSAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdChcInRvdWNodXBcIiwgKDAsIGNhcHRvcl8xLmdldFRvdWNoQ29vcmRzKShlLCB0aGlzLmNvbnRhaW5lcikpO1xuICAgIH07XG4gICAgVG91Y2hDYXB0b3IucHJvdG90eXBlLmhhbmRsZU1vdmUgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5lbmFibGVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvLyBQcmV2ZW50IGRlZmF1bHQgdG8gYXZvaWQgZGVmYXVsdCBicm93c2VyIGJlaGF2aW9ycy4uLlxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIC8vIC4uLmJ1dCBzaW11bGF0ZSBtb3VzZSBiZWhhdmlvciBhbnl3YXksIHRvIGdldCB0aGUgTW91c2VDYXB0b3Igd29ya2luZyBhcyB3ZWxsOlxuICAgICAgICBpZiAoZS50b3VjaGVzLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hSZWxhdGVkTW91c2VFdmVudChcIm1vdXNlbW92ZVwiLCBlKTtcbiAgICAgICAgdmFyIHRvdWNoZXMgPSAoMCwgY2FwdG9yXzEuZ2V0VG91Y2hlc0FycmF5KShlLnRvdWNoZXMpO1xuICAgICAgICB2YXIgdG91Y2hlc1Bvc2l0aW9ucyA9IHRvdWNoZXMubWFwKGZ1bmN0aW9uICh0b3VjaCkgeyByZXR1cm4gKDAsIGNhcHRvcl8xLmdldFBvc2l0aW9uKSh0b3VjaCwgX3RoaXMuY29udGFpbmVyKTsgfSk7XG4gICAgICAgIHRoaXMubGFzdFRvdWNoZXMgPSB0b3VjaGVzO1xuICAgICAgICB0aGlzLmxhc3RUb3VjaGVzUG9zaXRpb25zID0gdG91Y2hlc1Bvc2l0aW9ucztcbiAgICAgICAgLy8gSWYgYSBtb3ZlIHdhcyBpbml0aWF0ZWQgYXQgc29tZSBwb2ludCBhbmQgd2UgZ2V0IGJhY2sgdG8gc3RhcnRwb2ludCxcbiAgICAgICAgLy8gd2Ugc2hvdWxkIHN0aWxsIGNvbnNpZGVyIHRoYXQgd2UgZGlkIG1vdmUgKHdoaWNoIGFsc28gaGFwcGVucyBhZnRlciBhXG4gICAgICAgIC8vIG11bHRpcGxlIHRvdWNoIHdoZW4gb25seSBvbmUgdG91Y2ggcmVtYWlucyBpbiB3aGljaCBjYXNlIGhhbmRsZVN0YXJ0XG4gICAgICAgIC8vIGlzIHJlY2FsbGVkIHdpdGhpbiBoYW5kbGVMZWF2ZSkuXG4gICAgICAgIC8vIE5vdywgc29tZSBtb2JpbGUgYnJvd3NlcnMgcmVwb3J0IHplcm8tZGlzdGFuY2UgbW92ZXMgc28gd2UgYWxzbyBjaGVjayB0aGF0XG4gICAgICAgIC8vIG9uZSBvZiB0aGUgdG91Y2hlcyBkaWQgYWN0dWFsbHkgbW92ZSBmcm9tIHRoZSBvcmlnaW4gcG9zaXRpb24uXG4gICAgICAgIHRoaXMuaGFzTW92ZWQgfHwgKHRoaXMuaGFzTW92ZWQgPSB0b3VjaGVzUG9zaXRpb25zLnNvbWUoZnVuY3Rpb24gKHBvc2l0aW9uLCBpZHgpIHtcbiAgICAgICAgICAgIHZhciBzdGFydFBvc2l0aW9uID0gX3RoaXMuc3RhcnRUb3VjaGVzUG9zaXRpb25zW2lkeF07XG4gICAgICAgICAgICByZXR1cm4gcG9zaXRpb24ueCAhPT0gc3RhcnRQb3NpdGlvbi54IHx8IHBvc2l0aW9uLnkgIT09IHN0YXJ0UG9zaXRpb24ueTtcbiAgICAgICAgfSkpO1xuICAgICAgICAvLyBJZiB0aGVyZSB3YXMgbm8gbW92ZSwgZG8gbm90IHRyaWdnZXIgdG91Y2ggbW92ZXMgYmVoYXZpb3JcbiAgICAgICAgaWYgKCF0aGlzLmhhc01vdmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc01vdmluZyA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLm1vdmluZ1RpbWVvdXQpXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5tb3ZpbmdUaW1lb3V0KTtcbiAgICAgICAgdGhpcy5tb3ZpbmdUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuaXNNb3ZpbmcgPSBmYWxzZTtcbiAgICAgICAgfSwgRFJBR19USU1FT1VUKTtcbiAgICAgICAgdmFyIGNhbWVyYSA9IHRoaXMucmVuZGVyZXIuZ2V0Q2FtZXJhKCk7XG4gICAgICAgIHZhciBzdGFydENhbWVyYVN0YXRlID0gdGhpcy5zdGFydENhbWVyYVN0YXRlO1xuICAgICAgICBzd2l0Y2ggKHRoaXMudG91Y2hNb2RlKSB7XG4gICAgICAgICAgICBjYXNlIDE6IHtcbiAgICAgICAgICAgICAgICB2YXIgX2IgPSB0aGlzLnJlbmRlcmVyLnZpZXdwb3J0VG9GcmFtZWRHcmFwaCgodGhpcy5zdGFydFRvdWNoZXNQb3NpdGlvbnMgfHwgW10pWzBdKSwgeFN0YXJ0ID0gX2IueCwgeVN0YXJ0ID0gX2IueTtcbiAgICAgICAgICAgICAgICB2YXIgX2MgPSB0aGlzLnJlbmRlcmVyLnZpZXdwb3J0VG9GcmFtZWRHcmFwaCh0b3VjaGVzUG9zaXRpb25zWzBdKSwgeCA9IF9jLngsIHkgPSBfYy55O1xuICAgICAgICAgICAgICAgIGNhbWVyYS5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHg6IHN0YXJ0Q2FtZXJhU3RhdGUueCArIHhTdGFydCAtIHgsXG4gICAgICAgICAgICAgICAgICAgIHk6IHN0YXJ0Q2FtZXJhU3RhdGUueSArIHlTdGFydCAtIHksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDI6IHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBIZXJlIGlzIHRoZSB0aGlua2luZyBoZXJlOlxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogMS4gV2UgY2FuIGZpbmQgdGhlIG5ldyBhbmdsZSBhbmQgcmF0aW8sIGJ5IGNvbXBhcmluZyB0aGUgdmVjdG9yIGZyb20gXCJ0b3VjaCBvbmVcIiB0byBcInRvdWNoIHR3b1wiIGF0IHRoZSBzdGFydFxuICAgICAgICAgICAgICAgICAqICAgIG9mIHRoZSBkJ24nZCBhbmQgbm93XG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiAyLiBXZSBjYW4gdXNlIGBDYW1lcmEjdmlld3BvcnRUb0dyYXBoYCBpbnNpZGUgZm9ybXVsYSB0byByZXRyaWV2ZSB0aGUgbmV3IGNhbWVyYSBwb3NpdGlvbiwgdXNpbmcgdGhlIGdyYXBoXG4gICAgICAgICAgICAgICAgICogICAgcG9zaXRpb24gb2YgYSB0b3VjaCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBkJ24nZCAodXNpbmcgYHN0YXJ0Q2FtZXJhLnZpZXdwb3J0VG9HcmFwaGApIGFuZCB0aGUgdmlld3BvcnRcbiAgICAgICAgICAgICAgICAgKiAgICBwb3NpdGlvbiBvZiB0aGlzIHNhbWUgdG91Y2ggbm93XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdmFyIG5ld0NhbWVyYVN0YXRlID0ge307XG4gICAgICAgICAgICAgICAgdmFyIF9kID0gdG91Y2hlc1Bvc2l0aW9uc1swXSwgeDAgPSBfZC54LCB5MCA9IF9kLnk7XG4gICAgICAgICAgICAgICAgdmFyIF9lID0gdG91Y2hlc1Bvc2l0aW9uc1sxXSwgeDEgPSBfZS54LCB5MSA9IF9lLnk7XG4gICAgICAgICAgICAgICAgdmFyIGFuZ2xlRGlmZiA9IE1hdGguYXRhbjIoeTEgLSB5MCwgeDEgLSB4MCkgLSB0aGlzLnN0YXJ0VG91Y2hlc0FuZ2xlO1xuICAgICAgICAgICAgICAgIHZhciByYXRpb0RpZmYgPSBNYXRoLmh5cG90KHkxIC0geTAsIHgxIC0geDApIC8gdGhpcy5zdGFydFRvdWNoZXNEaXN0YW5jZTtcbiAgICAgICAgICAgICAgICAvLyAxLlxuICAgICAgICAgICAgICAgIHZhciBuZXdSYXRpbyA9IGNhbWVyYS5nZXRCb3VuZGVkUmF0aW8oc3RhcnRDYW1lcmFTdGF0ZS5yYXRpbyAvIHJhdGlvRGlmZik7XG4gICAgICAgICAgICAgICAgbmV3Q2FtZXJhU3RhdGUucmF0aW8gPSBuZXdSYXRpbztcbiAgICAgICAgICAgICAgICBuZXdDYW1lcmFTdGF0ZS5hbmdsZSA9IHN0YXJ0Q2FtZXJhU3RhdGUuYW5nbGUgKyBhbmdsZURpZmY7XG4gICAgICAgICAgICAgICAgLy8gMi5cbiAgICAgICAgICAgICAgICB2YXIgZGltZW5zaW9ucyA9IHRoaXMuZ2V0RGltZW5zaW9ucygpO1xuICAgICAgICAgICAgICAgIHZhciB0b3VjaEdyYXBoUG9zaXRpb24gPSB0aGlzLnJlbmRlcmVyLnZpZXdwb3J0VG9GcmFtZWRHcmFwaCgodGhpcy5zdGFydFRvdWNoZXNQb3NpdGlvbnMgfHwgW10pWzBdLCB7IGNhbWVyYVN0YXRlOiBzdGFydENhbWVyYVN0YXRlIH0pO1xuICAgICAgICAgICAgICAgIHZhciBzbWFsbGVzdERpbWVuc2lvbiA9IE1hdGgubWluKGRpbWVuc2lvbnMud2lkdGgsIGRpbWVuc2lvbnMuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB2YXIgZHggPSBzbWFsbGVzdERpbWVuc2lvbiAvIGRpbWVuc2lvbnMud2lkdGg7XG4gICAgICAgICAgICAgICAgdmFyIGR5ID0gc21hbGxlc3REaW1lbnNpb24gLyBkaW1lbnNpb25zLmhlaWdodDtcbiAgICAgICAgICAgICAgICB2YXIgcmF0aW8gPSBuZXdSYXRpbyAvIHNtYWxsZXN0RGltZW5zaW9uO1xuICAgICAgICAgICAgICAgIC8vIEFsaWduIHdpdGggY2VudGVyIG9mIHRoZSBncmFwaDpcbiAgICAgICAgICAgICAgICB2YXIgeCA9IHgwIC0gc21hbGxlc3REaW1lbnNpb24gLyAyIC8gZHg7XG4gICAgICAgICAgICAgICAgdmFyIHkgPSB5MCAtIHNtYWxsZXN0RGltZW5zaW9uIC8gMiAvIGR5O1xuICAgICAgICAgICAgICAgIC8vIFJvdGF0ZTpcbiAgICAgICAgICAgICAgICBfYSA9IF9fcmVhZChbXG4gICAgICAgICAgICAgICAgICAgIHggKiBNYXRoLmNvcygtbmV3Q2FtZXJhU3RhdGUuYW5nbGUpIC0geSAqIE1hdGguc2luKC1uZXdDYW1lcmFTdGF0ZS5hbmdsZSksXG4gICAgICAgICAgICAgICAgICAgIHkgKiBNYXRoLmNvcygtbmV3Q2FtZXJhU3RhdGUuYW5nbGUpICsgeCAqIE1hdGguc2luKC1uZXdDYW1lcmFTdGF0ZS5hbmdsZSksXG4gICAgICAgICAgICAgICAgXSwgMiksIHggPSBfYVswXSwgeSA9IF9hWzFdO1xuICAgICAgICAgICAgICAgIG5ld0NhbWVyYVN0YXRlLnggPSB0b3VjaEdyYXBoUG9zaXRpb24ueCAtIHggKiByYXRpbztcbiAgICAgICAgICAgICAgICBuZXdDYW1lcmFTdGF0ZS55ID0gdG91Y2hHcmFwaFBvc2l0aW9uLnkgKyB5ICogcmF0aW87XG4gICAgICAgICAgICAgICAgY2FtZXJhLnNldFN0YXRlKG5ld0NhbWVyYVN0YXRlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVtaXQoXCJ0b3VjaG1vdmVcIiwgKDAsIGNhcHRvcl8xLmdldFRvdWNoQ29vcmRzKShlLCB0aGlzLmNvbnRhaW5lcikpO1xuICAgIH07XG4gICAgcmV0dXJuIFRvdWNoQ2FwdG9yO1xufShjYXB0b3JfMS5kZWZhdWx0KSk7XG5leHBvcnRzLmRlZmF1bHQgPSBUb3VjaENhcHRvcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5lZGdlTGFiZWxzVG9EaXNwbGF5RnJvbU5vZGVzID0gZXhwb3J0cy5MYWJlbEdyaWQgPSB2b2lkIDA7XG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIHNpbmdsZSBjYW5kaWRhdGUgZm9yIHRoZSBsYWJlbCBncmlkIHNlbGVjdGlvbi5cbiAqXG4gKiBJdCBhbHNvIGRlc2NyaWJlcyBhIGRldGVybWluaXN0aWMgd2F5IHRvIGNvbXBhcmUgdHdvIGNhbmRpZGF0ZXMgdG8gYXNzZXNzXG4gKiB3aGljaCBvbmUgaXMgYmV0dGVyLlxuICovXG52YXIgTGFiZWxDYW5kaWRhdGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGFiZWxDYW5kaWRhdGUoa2V5LCBzaXplKSB7XG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xuICAgIH1cbiAgICBMYWJlbENhbmRpZGF0ZS5jb21wYXJlID0gZnVuY3Rpb24gKGZpcnN0LCBzZWNvbmQpIHtcbiAgICAgICAgLy8gRmlyc3Qgd2UgY29tcGFyZSBieSBzaXplXG4gICAgICAgIGlmIChmaXJzdC5zaXplID4gc2Vjb25kLnNpemUpXG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIGlmIChmaXJzdC5zaXplIDwgc2Vjb25kLnNpemUpXG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgLy8gVGhlbiBzaW5jZSBubyB0d28gbm9kZXMgY2FuIGhhdmUgdGhlIHNhbWUga2V5LCB3ZSB1c2UgaXQgdG9cbiAgICAgICAgLy8gZGV0ZXJtaW5pc3RpY2FsbHkgdGllLWJyZWFrIGJ5IGtleVxuICAgICAgICBpZiAoZmlyc3Qua2V5ID4gc2Vjb25kLmtleSlcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAvLyBOT1RFOiB0aGlzIGNvbXBhcmF0b3IgY2Fubm90IHJldHVybiAwXG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICAgIHJldHVybiBMYWJlbENhbmRpZGF0ZTtcbn0oKSk7XG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIDJEIHNwYXRpYWwgZ3JpZCBkaXZpZGVkIGludG8gY29uc3RhbnQtc2l6ZSBjZWxscy5cbiAqL1xudmFyIExhYmVsR3JpZCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMYWJlbEdyaWQoKSB7XG4gICAgICAgIHRoaXMud2lkdGggPSAwO1xuICAgICAgICB0aGlzLmhlaWdodCA9IDA7XG4gICAgICAgIHRoaXMuY2VsbFNpemUgPSAwO1xuICAgICAgICB0aGlzLmNvbHVtbnMgPSAwO1xuICAgICAgICB0aGlzLnJvd3MgPSAwO1xuICAgICAgICB0aGlzLmNlbGxzID0ge307XG4gICAgfVxuICAgIExhYmVsR3JpZC5wcm90b3R5cGUucmVzaXplQW5kQ2xlYXIgPSBmdW5jdGlvbiAoZGltZW5zaW9ucywgY2VsbFNpemUpIHtcbiAgICAgICAgdGhpcy53aWR0aCA9IGRpbWVuc2lvbnMud2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gZGltZW5zaW9ucy5oZWlnaHQ7XG4gICAgICAgIHRoaXMuY2VsbFNpemUgPSBjZWxsU2l6ZTtcbiAgICAgICAgdGhpcy5jb2x1bW5zID0gTWF0aC5jZWlsKGRpbWVuc2lvbnMud2lkdGggLyBjZWxsU2l6ZSk7XG4gICAgICAgIHRoaXMucm93cyA9IE1hdGguY2VpbChkaW1lbnNpb25zLmhlaWdodCAvIGNlbGxTaXplKTtcbiAgICAgICAgdGhpcy5jZWxscyA9IHt9O1xuICAgIH07XG4gICAgTGFiZWxHcmlkLnByb3RvdHlwZS5nZXRJbmRleCA9IGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgICAgdmFyIHhJbmRleCA9IE1hdGguZmxvb3IocG9zLnggLyB0aGlzLmNlbGxTaXplKTtcbiAgICAgICAgdmFyIHlJbmRleCA9IE1hdGguZmxvb3IocG9zLnkgLyB0aGlzLmNlbGxTaXplKTtcbiAgICAgICAgcmV0dXJuIHlJbmRleCAqIHRoaXMuY29sdW1ucyArIHhJbmRleDtcbiAgICB9O1xuICAgIExhYmVsR3JpZC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGtleSwgc2l6ZSwgcG9zKSB7XG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSBuZXcgTGFiZWxDYW5kaWRhdGUoa2V5LCBzaXplKTtcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5nZXRJbmRleChwb3MpO1xuICAgICAgICB2YXIgY2VsbCA9IHRoaXMuY2VsbHNbaW5kZXhdO1xuICAgICAgICBpZiAoIWNlbGwpIHtcbiAgICAgICAgICAgIGNlbGwgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuY2VsbHNbaW5kZXhdID0gY2VsbDtcbiAgICAgICAgfVxuICAgICAgICBjZWxsLnB1c2goY2FuZGlkYXRlKTtcbiAgICB9O1xuICAgIExhYmVsR3JpZC5wcm90b3R5cGUub3JnYW5pemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGsgaW4gdGhpcy5jZWxscykge1xuICAgICAgICAgICAgdmFyIGNlbGwgPSB0aGlzLmNlbGxzW2tdO1xuICAgICAgICAgICAgY2VsbC5zb3J0KExhYmVsQ2FuZGlkYXRlLmNvbXBhcmUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBMYWJlbEdyaWQucHJvdG90eXBlLmdldExhYmVsc1RvRGlzcGxheSA9IGZ1bmN0aW9uIChyYXRpbywgZGVuc2l0eSkge1xuICAgICAgICAvLyBUT0RPOiB3b3JrIG9uIHZpc2libGUgbm9kZXMgdG8gb3B0aW1pemU/IF4gLT4gdGhyZXNob2xkIG91dHNpZGUgc28gdGhhdCBtZW1vaXphdGlvbiB3b3Jrcz9cbiAgICAgICAgLy8gVE9ETzogYWRqdXN0IHRocmVzaG9sZCBsb3dlciwgYnV0IGluY3JlYXNlIGNlbGxzIGEgYml0P1xuICAgICAgICAvLyBUT0RPOiBodW50IGZvciBnZW9tIGlzc3VlIGluIGRpc2d1aXNlXG4gICAgICAgIC8vIFRPRE86IG1lbW9pemUgd2hpbGUgcmF0aW8gZG9lcyBub3QgbW92ZS4gbWV0aG9kIHRvIGZvcmNlIHJlY29tcHV0ZVxuICAgICAgICB2YXIgY2VsbEFyZWEgPSB0aGlzLmNlbGxTaXplICogdGhpcy5jZWxsU2l6ZTtcbiAgICAgICAgdmFyIHNjYWxlZENlbGxBcmVhID0gY2VsbEFyZWEgLyByYXRpbyAvIHJhdGlvO1xuICAgICAgICB2YXIgc2NhbGVkRGVuc2l0eSA9IChzY2FsZWRDZWxsQXJlYSAqIGRlbnNpdHkpIC8gY2VsbEFyZWE7XG4gICAgICAgIHZhciBsYWJlbHNUb0Rpc3BsYXlQZXJDZWxsID0gTWF0aC5jZWlsKHNjYWxlZERlbnNpdHkpO1xuICAgICAgICB2YXIgbGFiZWxzID0gW107XG4gICAgICAgIGZvciAodmFyIGsgaW4gdGhpcy5jZWxscykge1xuICAgICAgICAgICAgdmFyIGNlbGwgPSB0aGlzLmNlbGxzW2tdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBNYXRoLm1pbihsYWJlbHNUb0Rpc3BsYXlQZXJDZWxsLCBjZWxsLmxlbmd0aCk7IGkrKykge1xuICAgICAgICAgICAgICAgIGxhYmVscy5wdXNoKGNlbGxbaV0ua2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGFiZWxzO1xuICAgIH07XG4gICAgcmV0dXJuIExhYmVsR3JpZDtcbn0oKSk7XG5leHBvcnRzLkxhYmVsR3JpZCA9IExhYmVsR3JpZDtcbi8qKlxuICogTGFiZWwgaGV1cmlzdGljIHNlbGVjdGluZyBlZGdlIGxhYmVscyB0byBkaXNwbGF5LCBiYXNlZCBvbiBkaXNwbGF5ZWQgbm9kZVxuICogbGFiZWxzXG4gKlxuICogQHBhcmFtICB7b2JqZWN0fSBwYXJhbXMgICAgICAgICAgICAgICAgIC0gUGFyYW1ldGVyczpcbiAqIEBwYXJhbSAge1NldH0gICAgICBkaXNwbGF5ZWROb2RlTGFiZWxzICAtIEN1cnJlbnRseSBkaXNwbGF5ZWQgbm9kZSBsYWJlbHMuXG4gKiBAcGFyYW0gIHtTZXR9ICAgICAgaGlnaGxpZ2h0ZWROb2RlcyAgICAgLSBIaWdobGlnaHRlZCBub2Rlcy5cbiAqIEBwYXJhbSAge0dyYXBofSAgICBncmFwaCAgICAgICAgICAgICAgICAtIFRoZSByZW5kZXJlZCBncmFwaC5cbiAqIEBwYXJhbSAge3N0cmluZ30gICBob3ZlcmVkTm9kZSAgICAgICAgICAtIEhvdmVyZWQgbm9kZSAob3B0aW9uYWwpXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgICAgICAgICAgICAgICAgICAgLSBUaGUgc2VsZWN0ZWQgbGFiZWxzLlxuICovXG5mdW5jdGlvbiBlZGdlTGFiZWxzVG9EaXNwbGF5RnJvbU5vZGVzKHBhcmFtcykge1xuICAgIHZhciBncmFwaCA9IHBhcmFtcy5ncmFwaCwgaG92ZXJlZE5vZGUgPSBwYXJhbXMuaG92ZXJlZE5vZGUsIGhpZ2hsaWdodGVkTm9kZXMgPSBwYXJhbXMuaGlnaGxpZ2h0ZWROb2RlcywgZGlzcGxheWVkTm9kZUxhYmVscyA9IHBhcmFtcy5kaXNwbGF5ZWROb2RlTGFiZWxzO1xuICAgIHZhciB3b3J0aHlFZGdlcyA9IFtdO1xuICAgIC8vIFRPRE86IHRoZSBjb2RlIGJlbG93IGNhbiBiZSBvcHRpbWl6ZWQgdXNpbmcgIy5mb3JFYWNoIGFuZCBiYXRjaGluZyB0aGUgY29kZSBwZXIgYWRqXG4gICAgLy8gV2Ugc2hvdWxkIGRpc3BsYXkgYW4gZWRnZSdzIGxhYmVsIGlmOlxuICAgIC8vICAgLSBBbnkgb2YgaXRzIGV4dHJlbWl0aWVzIGlzIGhpZ2hsaWdodGVkIG9yIGhvdmVyZWRcbiAgICAvLyAgIC0gQm90aCBvZiBpdHMgZXh0cmVtaXRpZXMgaGFzIGl0cyBsYWJlbCBzaG93blxuICAgIGdyYXBoLmZvckVhY2hFZGdlKGZ1bmN0aW9uIChlZGdlLCBfLCBzb3VyY2UsIHRhcmdldCkge1xuICAgICAgICBpZiAoc291cmNlID09PSBob3ZlcmVkTm9kZSB8fFxuICAgICAgICAgICAgdGFyZ2V0ID09PSBob3ZlcmVkTm9kZSB8fFxuICAgICAgICAgICAgaGlnaGxpZ2h0ZWROb2Rlcy5oYXMoc291cmNlKSB8fFxuICAgICAgICAgICAgaGlnaGxpZ2h0ZWROb2Rlcy5oYXModGFyZ2V0KSB8fFxuICAgICAgICAgICAgKGRpc3BsYXllZE5vZGVMYWJlbHMuaGFzKHNvdXJjZSkgJiYgZGlzcGxheWVkTm9kZUxhYmVscy5oYXModGFyZ2V0KSkpIHtcbiAgICAgICAgICAgIHdvcnRoeUVkZ2VzLnB1c2goZWRnZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gd29ydGh5RWRnZXM7XG59XG5leHBvcnRzLmVkZ2VMYWJlbHNUb0Rpc3BsYXlGcm9tTm9kZXMgPSBlZGdlTGFiZWxzVG9EaXNwbGF5RnJvbU5vZGVzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlY3RhbmdsZUNvbGxpZGVzV2l0aFF1YWQgPSBleHBvcnRzLnNxdWFyZUNvbGxpZGVzV2l0aFF1YWQgPSBleHBvcnRzLmdldENpcmN1bXNjcmliZWRBbGlnbmVkUmVjdGFuZ2xlID0gZXhwb3J0cy5pc1JlY3RhbmdsZUFsaWduZWQgPSB2b2lkIDA7XG4vKipcbiAqIFNpZ21hLmpzIFF1YWQgVHJlZSBDbGFzc1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIENsYXNzIGltcGxlbWVudGluZyB0aGUgcXVhZCB0cmVlIGRhdGEgc3RydWN0dXJlIHVzZWQgdG8gc29sdmUgaG92ZXJzIGFuZFxuICogZGV0ZXJtaW5lIHdoaWNoIGVsZW1lbnRzIGFyZSBjdXJyZW50bHkgaW4gdGhlIHNjb3BlIG9mIHRoZSBjYW1lcmEgc28gdGhhdFxuICogd2UgZG9uJ3Qgd2FzdGUgdGltZSByZW5kZXJpbmcgdGhpbmdzIHRoZSB1c2VyIGNhbm5vdCBzZWUgYW55d2F5LlxuICogQG1vZHVsZVxuICovXG4vKiBlc2xpbnQgbm8tbmVzdGVkLXRlcm5hcnk6IDAgKi9cbi8qIGVzbGludCBuby1jb25zdGFudC1jb25kaXRpb246IDAgKi9cbnZhciBleHRlbmRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiQHlvbWd1aXRoZXJlYWwvaGVscGVycy9leHRlbmRcIikpO1xuLyoqXG4gKiBOb3RlczpcbiAqXG4gKiAgIC0gYSBzcXVhcmUgY2FuIGJlIHJlcHJlc2VudGVkIGFzIHRvcGxlZnQgKyB3aWR0aCwgc2F5aW5nIGZvciB0aGUgcXVhZCBibG9ja3MsXG4gKiAgICAgdG8gcmVkdWNlIG92ZXJhbGwgbWVtb3J5IHVzYWdlICh3aGljaCBpcyBhbHJlYWR5IHByZXR0eSBsb3cpLlxuICogICAtIHRoaXMgaW1wbGVtZW50YXRpb24gb2YgYSBxdWFkdHJlZSBpcyBvZnRlbiBjYWxsZWQgYSBNWC1DSUYgcXVhZHRyZWUuXG4gKiAgIC0gd2UgY291bGQgZXhwbG9yZSBzcGF0aWFsIGhhc2hpbmcgKGhpbGJlcnQgcXVhZHRyZWVzLCBub3RhYmx5KS5cbiAqL1xuLyoqXG4gKiBDb25zdGFudHMuXG4gKlxuICogTm90ZSB0aGF0IHNpbmNlIHdlIGFyZSByZXByZXNlbnRpbmcgYSBzdGF0aWMgNC1hcnkgdHJlZSwgdGhlIGluZGljZXMgb2YgdGhlXG4gKiBxdWFkcmFudHMgYXJlIHRoZSBmb2xsb3dpbmc6XG4gKiAgIC0gVE9QX0xFRlQ6ICAgICA0aSArIGJcbiAqICAgLSBUT1BfUklHSFQ6ICAgIDRpICsgMmJcbiAqICAgLSBCT1RUT01fTEVGVDogIDRpICsgM2JcbiAqICAgLSBCT1RUT01fUklHSFQ6IDRpICsgNGJcbiAqL1xudmFyIEJMT0NLUyA9IDQ7XG52YXIgTUFYX0xFVkVMID0gNTtcbi8vIE91dHNpZGUgYmxvY2sgaXMgbWF4IGJsb2NrIGluZGV4ICsgMSwgaS5lLjpcbi8vIEJMT0NLUyAqICgoNCAqICg0ICoqIE1BWF9MRVZFTCkgLSAxKSAvIDMpXG52YXIgT1VUU0lERV9CTE9DSyA9IDU0NjA7XG52YXIgWF9PRkZTRVQgPSAwO1xudmFyIFlfT0ZGU0VUID0gMTtcbnZhciBXSURUSF9PRkZTRVQgPSAyO1xudmFyIEhFSUdIVF9PRkZTRVQgPSAzO1xudmFyIFRPUF9MRUZUID0gMTtcbnZhciBUT1BfUklHSFQgPSAyO1xudmFyIEJPVFRPTV9MRUZUID0gMztcbnZhciBCT1RUT01fUklHSFQgPSA0O1xudmFyIGhhc1dhcm5lZFRvb011Y2hPdXRzaWRlID0gZmFsc2U7XG4vKipcbiAqIEdlb21ldHJ5IGhlbHBlcnMuXG4gKi9cbi8qKlxuICogRnVuY3Rpb24gcmV0dXJuaW5nIHdoZXRoZXIgdGhlIGdpdmVuIHJlY3RhbmdsZSBpcyBheGlzLWFsaWduZWQuXG4gKlxuICogQHBhcmFtICB7UmVjdGFuZ2xlfSByZWN0XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1JlY3RhbmdsZUFsaWduZWQocmVjdCkge1xuICAgIHJldHVybiByZWN0LngxID09PSByZWN0LngyIHx8IHJlY3QueTEgPT09IHJlY3QueTI7XG59XG5leHBvcnRzLmlzUmVjdGFuZ2xlQWxpZ25lZCA9IGlzUmVjdGFuZ2xlQWxpZ25lZDtcbi8qKlxuICogRnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBzbWFsbGVzdCByZWN0YW5nbGUgdGhhdCBjb250YWlucyB0aGUgZ2l2ZW4gcmVjdGFuZ2xlLCBhbmQgdGhhdCBpcyBhbGlnbmVkIHdpdGggdGhlIGF4aXMuXG4gKlxuICogQHBhcmFtIHtSZWN0YW5nbGV9IHJlY3RcbiAqIEByZXR1cm4ge1JlY3RhbmdsZX1cbiAqL1xuZnVuY3Rpb24gZ2V0Q2lyY3Vtc2NyaWJlZEFsaWduZWRSZWN0YW5nbGUocmVjdCkge1xuICAgIHZhciB3aWR0aCA9IE1hdGguc3FydChNYXRoLnBvdyhyZWN0LngyIC0gcmVjdC54MSwgMikgKyBNYXRoLnBvdyhyZWN0LnkyIC0gcmVjdC55MSwgMikpO1xuICAgIHZhciBoZWlnaHRWZWN0b3IgPSB7XG4gICAgICAgIHg6ICgocmVjdC55MSAtIHJlY3QueTIpICogcmVjdC5oZWlnaHQpIC8gd2lkdGgsXG4gICAgICAgIHk6ICgocmVjdC54MiAtIHJlY3QueDEpICogcmVjdC5oZWlnaHQpIC8gd2lkdGgsXG4gICAgfTtcbiAgICAvLyBDb21wdXRlIGFsbCBjb3JuZXJzOlxuICAgIHZhciB0bCA9IHsgeDogcmVjdC54MSwgeTogcmVjdC55MSB9O1xuICAgIHZhciB0ciA9IHsgeDogcmVjdC54MiwgeTogcmVjdC55MiB9O1xuICAgIHZhciBibCA9IHtcbiAgICAgICAgeDogcmVjdC54MSArIGhlaWdodFZlY3Rvci54LFxuICAgICAgICB5OiByZWN0LnkxICsgaGVpZ2h0VmVjdG9yLnksXG4gICAgfTtcbiAgICB2YXIgYnIgPSB7XG4gICAgICAgIHg6IHJlY3QueDIgKyBoZWlnaHRWZWN0b3IueCxcbiAgICAgICAgeTogcmVjdC55MiArIGhlaWdodFZlY3Rvci55LFxuICAgIH07XG4gICAgdmFyIHhMID0gTWF0aC5taW4odGwueCwgdHIueCwgYmwueCwgYnIueCk7XG4gICAgdmFyIHhSID0gTWF0aC5tYXgodGwueCwgdHIueCwgYmwueCwgYnIueCk7XG4gICAgdmFyIHlUID0gTWF0aC5taW4odGwueSwgdHIueSwgYmwueSwgYnIueSk7XG4gICAgdmFyIHlCID0gTWF0aC5tYXgodGwueSwgdHIueSwgYmwueSwgYnIueSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDE6IHhMLFxuICAgICAgICB5MTogeVQsXG4gICAgICAgIHgyOiB4UixcbiAgICAgICAgeTI6IHlULFxuICAgICAgICBoZWlnaHQ6IHlCIC0geVQsXG4gICAgfTtcbn1cbmV4cG9ydHMuZ2V0Q2lyY3Vtc2NyaWJlZEFsaWduZWRSZWN0YW5nbGUgPSBnZXRDaXJjdW1zY3JpYmVkQWxpZ25lZFJlY3RhbmdsZTtcbi8qKlxuICpcbiAqIEBwYXJhbSB4MVxuICogQHBhcmFtIHkxXG4gKiBAcGFyYW0gd1xuICogQHBhcmFtIHF4XG4gKiBAcGFyYW0gcXlcbiAqIEBwYXJhbSBxd1xuICogQHBhcmFtIHFoXG4gKi9cbmZ1bmN0aW9uIHNxdWFyZUNvbGxpZGVzV2l0aFF1YWQoeDEsIHkxLCB3LCBxeCwgcXksIHF3LCBxaCkge1xuICAgIHJldHVybiB4MSA8IHF4ICsgcXcgJiYgeDEgKyB3ID4gcXggJiYgeTEgPCBxeSArIHFoICYmIHkxICsgdyA+IHF5O1xufVxuZXhwb3J0cy5zcXVhcmVDb2xsaWRlc1dpdGhRdWFkID0gc3F1YXJlQ29sbGlkZXNXaXRoUXVhZDtcbmZ1bmN0aW9uIHJlY3RhbmdsZUNvbGxpZGVzV2l0aFF1YWQoeDEsIHkxLCB3LCBoLCBxeCwgcXksIHF3LCBxaCkge1xuICAgIHJldHVybiB4MSA8IHF4ICsgcXcgJiYgeDEgKyB3ID4gcXggJiYgeTEgPCBxeSArIHFoICYmIHkxICsgaCA+IHF5O1xufVxuZXhwb3J0cy5yZWN0YW5nbGVDb2xsaWRlc1dpdGhRdWFkID0gcmVjdGFuZ2xlQ29sbGlkZXNXaXRoUXVhZDtcbmZ1bmN0aW9uIHBvaW50SXNJblF1YWQoeCwgeSwgcXgsIHF5LCBxdywgcWgpIHtcbiAgICB2YXIgeG1wID0gcXggKyBxdyAvIDIsIHltcCA9IHF5ICsgcWggLyAyLCB0b3AgPSB5IDwgeW1wLCBsZWZ0ID0geCA8IHhtcDtcbiAgICByZXR1cm4gdG9wID8gKGxlZnQgPyBUT1BfTEVGVCA6IFRPUF9SSUdIVCkgOiBsZWZ0ID8gQk9UVE9NX0xFRlQgOiBCT1RUT01fUklHSFQ7XG59XG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbnMgdGhhdCBhcmUgbm90IGJvdW5kIHRvIHRoZSBjbGFzcyBzbyBhbiBleHRlcm5hbCB1c2VyXG4gKiBjYW5ub3QgbWVzcyB3aXRoIHRoZW0uXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkUXVhZHJhbnRzKG1heExldmVsLCBkYXRhKSB7XG4gICAgLy8gW2Jsb2NrLCBsZXZlbF1cbiAgICB2YXIgc3RhY2sgPSBbMCwgMF07XG4gICAgd2hpbGUgKHN0YWNrLmxlbmd0aCkge1xuICAgICAgICB2YXIgbGV2ZWwgPSBzdGFjay5wb3AoKSwgYmxvY2sgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgdmFyIHRvcExlZnRCbG9jayA9IDQgKiBibG9jayArIEJMT0NLUywgdG9wUmlnaHRCbG9jayA9IDQgKiBibG9jayArIDIgKiBCTE9DS1MsIGJvdHRvbUxlZnRCbG9jayA9IDQgKiBibG9jayArIDMgKiBCTE9DS1MsIGJvdHRvbVJpZ2h0QmxvY2sgPSA0ICogYmxvY2sgKyA0ICogQkxPQ0tTO1xuICAgICAgICB2YXIgeCA9IGRhdGFbYmxvY2sgKyBYX09GRlNFVF0sIHkgPSBkYXRhW2Jsb2NrICsgWV9PRkZTRVRdLCB3aWR0aCA9IGRhdGFbYmxvY2sgKyBXSURUSF9PRkZTRVRdLCBoZWlnaHQgPSBkYXRhW2Jsb2NrICsgSEVJR0hUX09GRlNFVF0sIGh3ID0gd2lkdGggLyAyLCBoaCA9IGhlaWdodCAvIDI7XG4gICAgICAgIGRhdGFbdG9wTGVmdEJsb2NrICsgWF9PRkZTRVRdID0geDtcbiAgICAgICAgZGF0YVt0b3BMZWZ0QmxvY2sgKyBZX09GRlNFVF0gPSB5O1xuICAgICAgICBkYXRhW3RvcExlZnRCbG9jayArIFdJRFRIX09GRlNFVF0gPSBodztcbiAgICAgICAgZGF0YVt0b3BMZWZ0QmxvY2sgKyBIRUlHSFRfT0ZGU0VUXSA9IGhoO1xuICAgICAgICBkYXRhW3RvcFJpZ2h0QmxvY2sgKyBYX09GRlNFVF0gPSB4ICsgaHc7XG4gICAgICAgIGRhdGFbdG9wUmlnaHRCbG9jayArIFlfT0ZGU0VUXSA9IHk7XG4gICAgICAgIGRhdGFbdG9wUmlnaHRCbG9jayArIFdJRFRIX09GRlNFVF0gPSBodztcbiAgICAgICAgZGF0YVt0b3BSaWdodEJsb2NrICsgSEVJR0hUX09GRlNFVF0gPSBoaDtcbiAgICAgICAgZGF0YVtib3R0b21MZWZ0QmxvY2sgKyBYX09GRlNFVF0gPSB4O1xuICAgICAgICBkYXRhW2JvdHRvbUxlZnRCbG9jayArIFlfT0ZGU0VUXSA9IHkgKyBoaDtcbiAgICAgICAgZGF0YVtib3R0b21MZWZ0QmxvY2sgKyBXSURUSF9PRkZTRVRdID0gaHc7XG4gICAgICAgIGRhdGFbYm90dG9tTGVmdEJsb2NrICsgSEVJR0hUX09GRlNFVF0gPSBoaDtcbiAgICAgICAgZGF0YVtib3R0b21SaWdodEJsb2NrICsgWF9PRkZTRVRdID0geCArIGh3O1xuICAgICAgICBkYXRhW2JvdHRvbVJpZ2h0QmxvY2sgKyBZX09GRlNFVF0gPSB5ICsgaGg7XG4gICAgICAgIGRhdGFbYm90dG9tUmlnaHRCbG9jayArIFdJRFRIX09GRlNFVF0gPSBodztcbiAgICAgICAgZGF0YVtib3R0b21SaWdodEJsb2NrICsgSEVJR0hUX09GRlNFVF0gPSBoaDtcbiAgICAgICAgaWYgKGxldmVsIDwgbWF4TGV2ZWwgLSAxKSB7XG4gICAgICAgICAgICBzdGFjay5wdXNoKGJvdHRvbVJpZ2h0QmxvY2ssIGxldmVsICsgMSk7XG4gICAgICAgICAgICBzdGFjay5wdXNoKGJvdHRvbUxlZnRCbG9jaywgbGV2ZWwgKyAxKTtcbiAgICAgICAgICAgIHN0YWNrLnB1c2godG9wUmlnaHRCbG9jaywgbGV2ZWwgKyAxKTtcbiAgICAgICAgICAgIHN0YWNrLnB1c2godG9wTGVmdEJsb2NrLCBsZXZlbCArIDEpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gaW5zZXJ0Tm9kZShtYXhMZXZlbCwgZGF0YSwgY29udGFpbmVycywga2V5LCB4LCB5LCBzaXplKSB7XG4gICAgdmFyIHgxID0geCAtIHNpemUsIHkxID0geSAtIHNpemUsIHcgPSBzaXplICogMjtcbiAgICB2YXIgbGV2ZWwgPSAwLCBibG9jayA9IDA7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgLy8gSWYgd2UgcmVhY2hlZCBtYXggbGV2ZWxcbiAgICAgICAgaWYgKGxldmVsID49IG1heExldmVsKSB7XG4gICAgICAgICAgICBjb250YWluZXJzW2Jsb2NrXSA9IGNvbnRhaW5lcnNbYmxvY2tdIHx8IFtdO1xuICAgICAgICAgICAgY29udGFpbmVyc1tibG9ja10ucHVzaChrZXkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0b3BMZWZ0QmxvY2sgPSA0ICogYmxvY2sgKyBCTE9DS1MsIHRvcFJpZ2h0QmxvY2sgPSA0ICogYmxvY2sgKyAyICogQkxPQ0tTLCBib3R0b21MZWZ0QmxvY2sgPSA0ICogYmxvY2sgKyAzICogQkxPQ0tTLCBib3R0b21SaWdodEJsb2NrID0gNCAqIGJsb2NrICsgNCAqIEJMT0NLUztcbiAgICAgICAgdmFyIGNvbGxpZGluZ1dpdGhUb3BMZWZ0ID0gc3F1YXJlQ29sbGlkZXNXaXRoUXVhZCh4MSwgeTEsIHcsIGRhdGFbdG9wTGVmdEJsb2NrICsgWF9PRkZTRVRdLCBkYXRhW3RvcExlZnRCbG9jayArIFlfT0ZGU0VUXSwgZGF0YVt0b3BMZWZ0QmxvY2sgKyBXSURUSF9PRkZTRVRdLCBkYXRhW3RvcExlZnRCbG9jayArIEhFSUdIVF9PRkZTRVRdKTtcbiAgICAgICAgdmFyIGNvbGxpZGluZ1dpdGhUb3BSaWdodCA9IHNxdWFyZUNvbGxpZGVzV2l0aFF1YWQoeDEsIHkxLCB3LCBkYXRhW3RvcFJpZ2h0QmxvY2sgKyBYX09GRlNFVF0sIGRhdGFbdG9wUmlnaHRCbG9jayArIFlfT0ZGU0VUXSwgZGF0YVt0b3BSaWdodEJsb2NrICsgV0lEVEhfT0ZGU0VUXSwgZGF0YVt0b3BSaWdodEJsb2NrICsgSEVJR0hUX09GRlNFVF0pO1xuICAgICAgICB2YXIgY29sbGlkaW5nV2l0aEJvdHRvbUxlZnQgPSBzcXVhcmVDb2xsaWRlc1dpdGhRdWFkKHgxLCB5MSwgdywgZGF0YVtib3R0b21MZWZ0QmxvY2sgKyBYX09GRlNFVF0sIGRhdGFbYm90dG9tTGVmdEJsb2NrICsgWV9PRkZTRVRdLCBkYXRhW2JvdHRvbUxlZnRCbG9jayArIFdJRFRIX09GRlNFVF0sIGRhdGFbYm90dG9tTGVmdEJsb2NrICsgSEVJR0hUX09GRlNFVF0pO1xuICAgICAgICB2YXIgY29sbGlkaW5nV2l0aEJvdHRvbVJpZ2h0ID0gc3F1YXJlQ29sbGlkZXNXaXRoUXVhZCh4MSwgeTEsIHcsIGRhdGFbYm90dG9tUmlnaHRCbG9jayArIFhfT0ZGU0VUXSwgZGF0YVtib3R0b21SaWdodEJsb2NrICsgWV9PRkZTRVRdLCBkYXRhW2JvdHRvbVJpZ2h0QmxvY2sgKyBXSURUSF9PRkZTRVRdLCBkYXRhW2JvdHRvbVJpZ2h0QmxvY2sgKyBIRUlHSFRfT0ZGU0VUXSk7XG4gICAgICAgIHZhciBjb2xsaXNpb25zID0gW1xuICAgICAgICAgICAgY29sbGlkaW5nV2l0aFRvcExlZnQsXG4gICAgICAgICAgICBjb2xsaWRpbmdXaXRoVG9wUmlnaHQsXG4gICAgICAgICAgICBjb2xsaWRpbmdXaXRoQm90dG9tTGVmdCxcbiAgICAgICAgICAgIGNvbGxpZGluZ1dpdGhCb3R0b21SaWdodCxcbiAgICAgICAgXS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY3VycmVudCkge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYyArIDE7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfSwgMCk7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgbm8gY29sbGlzaW9uIGF0IHJvb3QgbGV2ZWwsIGluamVjdCBub2RlIGluIHRoZSBvdXRzaWRlIGJsb2NrXG4gICAgICAgIGlmIChjb2xsaXNpb25zID09PSAwICYmIGxldmVsID09PSAwKSB7XG4gICAgICAgICAgICBjb250YWluZXJzW09VVFNJREVfQkxPQ0tdLnB1c2goa2V5KTtcbiAgICAgICAgICAgIGlmICghaGFzV2FybmVkVG9vTXVjaE91dHNpZGUgJiYgY29udGFpbmVyc1tPVVRTSURFX0JMT0NLXS5sZW5ndGggPj0gNSkge1xuICAgICAgICAgICAgICAgIGhhc1dhcm5lZFRvb011Y2hPdXRzaWRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJzaWdtYS9xdWFkdHJlZS5pbnNlcnROb2RlOiBBdCBsZWFzdCA1IG5vZGVzIGFyZSBvdXRzaWRlIHRoZSBnbG9iYWwgcXVhZHRyZWUgem9uZS4gXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIllvdSBtaWdodCBoYXZlIGEgcHJvYmxlbSB3aXRoIHRoZSBub3JtYWxpemF0aW9uIGZ1bmN0aW9uIG9yIHRoZSBjdXN0b20gYm91bmRpbmcgYm94LlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGF0IGxlYXN0IGEgY29sbGlzaW9uIGJ1dCBkZWVwZXIsIHRoZXJlIGlzIGFuIGlzc3VlXG4gICAgICAgIGlmIChjb2xsaXNpb25zID09PSAwKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwic2lnbWEvcXVhZHRyZWUuaW5zZXJ0Tm9kZTogbm8gY29sbGlzaW9uIChsZXZlbDogXCIuY29uY2F0KGxldmVsLCBcIiwga2V5OiBcIikuY29uY2F0KGtleSwgXCIsIHg6IFwiKS5jb25jYXQoeCwgXCIsIHk6IFwiKS5jb25jYXQoeSwgXCIsIHNpemU6IFwiKS5jb25jYXQoc2l6ZSwgXCIpLlwiKSk7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgMyBjb2xsaXNpb25zLCB3ZSBoYXZlIGEgZ2VvbWV0cnkgcHJvYmxlbSBvYnZpb3VzbHlcbiAgICAgICAgaWYgKGNvbGxpc2lvbnMgPT09IDMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzaWdtYS9xdWFkdHJlZS5pbnNlcnROb2RlOiAzIGltcG9zc2libGUgY29sbGlzaW9ucyAobGV2ZWw6IFwiLmNvbmNhdChsZXZlbCwgXCIsIGtleTogXCIpLmNvbmNhdChrZXksIFwiLCB4OiBcIikuY29uY2F0KHgsIFwiLCB5OiBcIikuY29uY2F0KHksIFwiLCBzaXplOiBcIikuY29uY2F0KHNpemUsIFwiKS5cIikpO1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIG1vcmUgdGhhdCBvbmUgY29sbGlzaW9uLCB3ZSBzdG9wIGhlcmUgYW5kIHN0b3JlIHRoZSBub2RlXG4gICAgICAgIC8vIGluIHRoZSByZWxldmFudCBjb250YWluZXJzXG4gICAgICAgIGlmIChjb2xsaXNpb25zID4gMSkge1xuICAgICAgICAgICAgY29udGFpbmVyc1tibG9ja10gPSBjb250YWluZXJzW2Jsb2NrXSB8fCBbXTtcbiAgICAgICAgICAgIGNvbnRhaW5lcnNbYmxvY2tdLnB1c2goa2V5KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldmVsKys7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRWxzZSB3ZSByZWN1cnNlIGludG8gdGhlIGNvcnJlY3QgcXVhZHNcbiAgICAgICAgaWYgKGNvbGxpZGluZ1dpdGhUb3BMZWZ0KVxuICAgICAgICAgICAgYmxvY2sgPSB0b3BMZWZ0QmxvY2s7XG4gICAgICAgIGlmIChjb2xsaWRpbmdXaXRoVG9wUmlnaHQpXG4gICAgICAgICAgICBibG9jayA9IHRvcFJpZ2h0QmxvY2s7XG4gICAgICAgIGlmIChjb2xsaWRpbmdXaXRoQm90dG9tTGVmdClcbiAgICAgICAgICAgIGJsb2NrID0gYm90dG9tTGVmdEJsb2NrO1xuICAgICAgICBpZiAoY29sbGlkaW5nV2l0aEJvdHRvbVJpZ2h0KVxuICAgICAgICAgICAgYmxvY2sgPSBib3R0b21SaWdodEJsb2NrO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldE5vZGVzSW5BeGlzQWxpZ25lZFJlY3RhbmdsZUFyZWEobWF4TGV2ZWwsIGRhdGEsIGNvbnRhaW5lcnMsIHgxLCB5MSwgdywgaCkge1xuICAgIC8vIFtibG9jaywgbGV2ZWxdXG4gICAgdmFyIHN0YWNrID0gWzAsIDBdO1xuICAgIHZhciBjb2xsZWN0ZWROb2RlcyA9IFtdO1xuICAgIHZhciBjb250YWluZXI7XG4gICAgd2hpbGUgKHN0YWNrLmxlbmd0aCkge1xuICAgICAgICB2YXIgbGV2ZWwgPSBzdGFjay5wb3AoKSwgYmxvY2sgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgLy8gQ29sbGVjdGluZyBub2Rlc1xuICAgICAgICBjb250YWluZXIgPSBjb250YWluZXJzW2Jsb2NrXTtcbiAgICAgICAgaWYgKGNvbnRhaW5lcilcbiAgICAgICAgICAgICgwLCBleHRlbmRfMS5kZWZhdWx0KShjb2xsZWN0ZWROb2RlcywgY29udGFpbmVyKTtcbiAgICAgICAgLy8gSWYgd2UgcmVhY2hlZCBtYXggbGV2ZWxcbiAgICAgICAgaWYgKGxldmVsID49IG1heExldmVsKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIHZhciB0b3BMZWZ0QmxvY2sgPSA0ICogYmxvY2sgKyBCTE9DS1MsIHRvcFJpZ2h0QmxvY2sgPSA0ICogYmxvY2sgKyAyICogQkxPQ0tTLCBib3R0b21MZWZ0QmxvY2sgPSA0ICogYmxvY2sgKyAzICogQkxPQ0tTLCBib3R0b21SaWdodEJsb2NrID0gNCAqIGJsb2NrICsgNCAqIEJMT0NLUztcbiAgICAgICAgdmFyIGNvbGxpZGluZ1dpdGhUb3BMZWZ0ID0gcmVjdGFuZ2xlQ29sbGlkZXNXaXRoUXVhZCh4MSwgeTEsIHcsIGgsIGRhdGFbdG9wTGVmdEJsb2NrICsgWF9PRkZTRVRdLCBkYXRhW3RvcExlZnRCbG9jayArIFlfT0ZGU0VUXSwgZGF0YVt0b3BMZWZ0QmxvY2sgKyBXSURUSF9PRkZTRVRdLCBkYXRhW3RvcExlZnRCbG9jayArIEhFSUdIVF9PRkZTRVRdKTtcbiAgICAgICAgdmFyIGNvbGxpZGluZ1dpdGhUb3BSaWdodCA9IHJlY3RhbmdsZUNvbGxpZGVzV2l0aFF1YWQoeDEsIHkxLCB3LCBoLCBkYXRhW3RvcFJpZ2h0QmxvY2sgKyBYX09GRlNFVF0sIGRhdGFbdG9wUmlnaHRCbG9jayArIFlfT0ZGU0VUXSwgZGF0YVt0b3BSaWdodEJsb2NrICsgV0lEVEhfT0ZGU0VUXSwgZGF0YVt0b3BSaWdodEJsb2NrICsgSEVJR0hUX09GRlNFVF0pO1xuICAgICAgICB2YXIgY29sbGlkaW5nV2l0aEJvdHRvbUxlZnQgPSByZWN0YW5nbGVDb2xsaWRlc1dpdGhRdWFkKHgxLCB5MSwgdywgaCwgZGF0YVtib3R0b21MZWZ0QmxvY2sgKyBYX09GRlNFVF0sIGRhdGFbYm90dG9tTGVmdEJsb2NrICsgWV9PRkZTRVRdLCBkYXRhW2JvdHRvbUxlZnRCbG9jayArIFdJRFRIX09GRlNFVF0sIGRhdGFbYm90dG9tTGVmdEJsb2NrICsgSEVJR0hUX09GRlNFVF0pO1xuICAgICAgICB2YXIgY29sbGlkaW5nV2l0aEJvdHRvbVJpZ2h0ID0gcmVjdGFuZ2xlQ29sbGlkZXNXaXRoUXVhZCh4MSwgeTEsIHcsIGgsIGRhdGFbYm90dG9tUmlnaHRCbG9jayArIFhfT0ZGU0VUXSwgZGF0YVtib3R0b21SaWdodEJsb2NrICsgWV9PRkZTRVRdLCBkYXRhW2JvdHRvbVJpZ2h0QmxvY2sgKyBXSURUSF9PRkZTRVRdLCBkYXRhW2JvdHRvbVJpZ2h0QmxvY2sgKyBIRUlHSFRfT0ZGU0VUXSk7XG4gICAgICAgIGlmIChjb2xsaWRpbmdXaXRoVG9wTGVmdClcbiAgICAgICAgICAgIHN0YWNrLnB1c2godG9wTGVmdEJsb2NrLCBsZXZlbCArIDEpO1xuICAgICAgICBpZiAoY29sbGlkaW5nV2l0aFRvcFJpZ2h0KVxuICAgICAgICAgICAgc3RhY2sucHVzaCh0b3BSaWdodEJsb2NrLCBsZXZlbCArIDEpO1xuICAgICAgICBpZiAoY29sbGlkaW5nV2l0aEJvdHRvbUxlZnQpXG4gICAgICAgICAgICBzdGFjay5wdXNoKGJvdHRvbUxlZnRCbG9jaywgbGV2ZWwgKyAxKTtcbiAgICAgICAgaWYgKGNvbGxpZGluZ1dpdGhCb3R0b21SaWdodClcbiAgICAgICAgICAgIHN0YWNrLnB1c2goYm90dG9tUmlnaHRCbG9jaywgbGV2ZWwgKyAxKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbGxlY3RlZE5vZGVzO1xufVxuLyoqXG4gKiBRdWFkVHJlZSBjbGFzcy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7b2JqZWN0fSBib3VuZGFyaWVzIC0gVGhlIGdyYXBoIGJvdW5kYXJpZXMuXG4gKi9cbnZhciBRdWFkVHJlZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBRdWFkVHJlZShwYXJhbXMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAocGFyYW1zID09PSB2b2lkIDApIHsgcGFyYW1zID0ge307IH1cbiAgICAgICAgdGhpcy5jb250YWluZXJzID0gKF9hID0ge30sIF9hW09VVFNJREVfQkxPQ0tdID0gW10sIF9hKTtcbiAgICAgICAgdGhpcy5jYWNoZSA9IG51bGw7XG4gICAgICAgIHRoaXMubGFzdFJlY3RhbmdsZSA9IG51bGw7XG4gICAgICAgIC8vIEFsbG9jYXRpbmcgdGhlIHVuZGVybHlpbmcgYnl0ZSBhcnJheVxuICAgICAgICB2YXIgTCA9IE1hdGgucG93KDQsIE1BWF9MRVZFTCk7XG4gICAgICAgIHRoaXMuZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoQkxPQ0tTICogKCg0ICogTCAtIDEpIC8gMykpO1xuICAgICAgICBpZiAocGFyYW1zLmJvdW5kYXJpZXMpXG4gICAgICAgICAgICB0aGlzLnJlc2l6ZShwYXJhbXMuYm91bmRhcmllcyk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMucmVzaXplKHtcbiAgICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxLFxuICAgICAgICAgICAgfSk7XG4gICAgfVxuICAgIFF1YWRUcmVlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoa2V5LCB4LCB5LCBzaXplKSB7XG4gICAgICAgIGluc2VydE5vZGUoTUFYX0xFVkVMLCB0aGlzLmRhdGEsIHRoaXMuY29udGFpbmVycywga2V5LCB4LCB5LCBzaXplKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBRdWFkVHJlZS5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gKGJvdW5kYXJpZXMpIHtcbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICAvLyBCdWlsZGluZyB0aGUgcXVhZHJhbnRzXG4gICAgICAgIHRoaXMuZGF0YVtYX09GRlNFVF0gPSBib3VuZGFyaWVzLng7XG4gICAgICAgIHRoaXMuZGF0YVtZX09GRlNFVF0gPSBib3VuZGFyaWVzLnk7XG4gICAgICAgIHRoaXMuZGF0YVtXSURUSF9PRkZTRVRdID0gYm91bmRhcmllcy53aWR0aDtcbiAgICAgICAgdGhpcy5kYXRhW0hFSUdIVF9PRkZTRVRdID0gYm91bmRhcmllcy5oZWlnaHQ7XG4gICAgICAgIGJ1aWxkUXVhZHJhbnRzKE1BWF9MRVZFTCwgdGhpcy5kYXRhKTtcbiAgICB9O1xuICAgIFF1YWRUcmVlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLmNvbnRhaW5lcnMgPSAoX2EgPSB7fSwgX2FbT1VUU0lERV9CTE9DS10gPSBbXSwgX2EpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFF1YWRUcmVlLnByb3RvdHlwZS5wb2ludCA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAgIHZhciBub2RlcyA9IHRoaXMuY29udGFpbmVyc1tPVVRTSURFX0JMT0NLXS5zbGljZSgpO1xuICAgICAgICB2YXIgYmxvY2sgPSAwLCBsZXZlbCA9IDA7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRhaW5lcnNbYmxvY2tdKVxuICAgICAgICAgICAgICAgICgwLCBleHRlbmRfMS5kZWZhdWx0KShub2RlcywgdGhpcy5jb250YWluZXJzW2Jsb2NrXSk7XG4gICAgICAgICAgICB2YXIgcXVhZCA9IHBvaW50SXNJblF1YWQoeCwgeSwgdGhpcy5kYXRhW2Jsb2NrICsgWF9PRkZTRVRdLCB0aGlzLmRhdGFbYmxvY2sgKyBZX09GRlNFVF0sIHRoaXMuZGF0YVtibG9jayArIFdJRFRIX09GRlNFVF0sIHRoaXMuZGF0YVtibG9jayArIEhFSUdIVF9PRkZTRVRdKTtcbiAgICAgICAgICAgIGJsb2NrID0gNCAqIGJsb2NrICsgcXVhZCAqIEJMT0NLUztcbiAgICAgICAgICAgIGxldmVsKys7XG4gICAgICAgIH0gd2hpbGUgKGxldmVsIDw9IE1BWF9MRVZFTCk7XG4gICAgICAgIHJldHVybiBub2RlcztcbiAgICB9O1xuICAgIFF1YWRUcmVlLnByb3RvdHlwZS5yZWN0YW5nbGUgPSBmdW5jdGlvbiAoeDEsIHkxLCB4MiwgeTIsIGhlaWdodCkge1xuICAgICAgICB2YXIgbHIgPSB0aGlzLmxhc3RSZWN0YW5nbGU7XG4gICAgICAgIGlmIChsciAmJiB4MSA9PT0gbHIueDEgJiYgeDIgPT09IGxyLngyICYmIHkxID09PSBsci55MSAmJiB5MiA9PT0gbHIueTIgJiYgaGVpZ2h0ID09PSBsci5oZWlnaHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhY2hlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGFzdFJlY3RhbmdsZSA9IHtcbiAgICAgICAgICAgIHgxOiB4MSxcbiAgICAgICAgICAgIHkxOiB5MSxcbiAgICAgICAgICAgIHgyOiB4MixcbiAgICAgICAgICAgIHkyOiB5MixcbiAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICB9O1xuICAgICAgICAvLyBJZiB0aGUgcmVjdGFuZ2xlIGlzIHNoaWZ0ZWQsIHdlIHVzZSB0aGUgc21hbGxlc3QgYWxpZ25lZCByZWN0YW5nbGUgdGhhdCBjb250YWlucyB0aGUgc2hpZnRlZCBvbmU6XG4gICAgICAgIGlmICghaXNSZWN0YW5nbGVBbGlnbmVkKHRoaXMubGFzdFJlY3RhbmdsZSkpXG4gICAgICAgICAgICB0aGlzLmxhc3RSZWN0YW5nbGUgPSBnZXRDaXJjdW1zY3JpYmVkQWxpZ25lZFJlY3RhbmdsZSh0aGlzLmxhc3RSZWN0YW5nbGUpO1xuICAgICAgICB0aGlzLmNhY2hlID0gZ2V0Tm9kZXNJbkF4aXNBbGlnbmVkUmVjdGFuZ2xlQXJlYShNQVhfTEVWRUwsIHRoaXMuZGF0YSwgdGhpcy5jb250YWluZXJzLCB4MSwgeTEsIE1hdGguYWJzKHgxIC0geDIpIHx8IE1hdGguYWJzKHkxIC0geTIpLCBoZWlnaHQpO1xuICAgICAgICAvLyBBZGQgYWxsIHRoZSBub2RlcyBpbiB0aGUgb3V0c2lkZSBibG9jaywgc2luY2UgdGhleSBtaWdodCBiZSByZWxldmFudCwgYW5kIHNpbmNlIHRoZXkgc2hvdWxkIGJlIHZlcnkgZmV3OlxuICAgICAgICAoMCwgZXh0ZW5kXzEuZGVmYXVsdCkodGhpcy5jYWNoZSwgdGhpcy5jb250YWluZXJzW09VVFNJREVfQkxPQ0tdKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGU7XG4gICAgfTtcbiAgICByZXR1cm4gUXVhZFRyZWU7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gUXVhZFRyZWU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2lnbWEgPSBleHBvcnRzLk1vdXNlQ2FwdG9yID0gZXhwb3J0cy5RdWFkVHJlZSA9IGV4cG9ydHMuQ2FtZXJhID0gdm9pZCAwO1xuLyoqXG4gKiBTaWdtYS5qcyBMaWJyYXJ5IEVuZHBvaW50XG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09XG4gKlxuICogVGhlIGxpYnJhcnkgZW5kcG9pbnQuXG4gKiBAbW9kdWxlXG4gKi9cbnZhciBzaWdtYV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3NpZ21hXCIpKTtcbmV4cG9ydHMuU2lnbWEgPSBzaWdtYV8xLmRlZmF1bHQ7XG52YXIgY2FtZXJhXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vY29yZS9jYW1lcmFcIikpO1xuZXhwb3J0cy5DYW1lcmEgPSBjYW1lcmFfMS5kZWZhdWx0O1xudmFyIHF1YWR0cmVlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vY29yZS9xdWFkdHJlZVwiKSk7XG5leHBvcnRzLlF1YWRUcmVlID0gcXVhZHRyZWVfMS5kZWZhdWx0O1xudmFyIG1vdXNlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vY29yZS9jYXB0b3JzL21vdXNlXCIpKTtcbmV4cG9ydHMuTW91c2VDYXB0b3IgPSBtb3VzZV8xLmRlZmF1bHQ7XG5leHBvcnRzLmRlZmF1bHQgPSBzaWdtYV8xLmRlZmF1bHQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGRyYXdFZGdlTGFiZWwoY29udGV4dCwgZWRnZURhdGEsIHNvdXJjZURhdGEsIHRhcmdldERhdGEsIHNldHRpbmdzKSB7XG4gICAgdmFyIHNpemUgPSBzZXR0aW5ncy5lZGdlTGFiZWxTaXplLCBmb250ID0gc2V0dGluZ3MuZWRnZUxhYmVsRm9udCwgd2VpZ2h0ID0gc2V0dGluZ3MuZWRnZUxhYmVsV2VpZ2h0LCBjb2xvciA9IHNldHRpbmdzLmVkZ2VMYWJlbENvbG9yLmF0dHJpYnV0ZVxuICAgICAgICA/IGVkZ2VEYXRhW3NldHRpbmdzLmVkZ2VMYWJlbENvbG9yLmF0dHJpYnV0ZV0gfHwgc2V0dGluZ3MuZWRnZUxhYmVsQ29sb3IuY29sb3IgfHwgXCIjMDAwXCJcbiAgICAgICAgOiBzZXR0aW5ncy5lZGdlTGFiZWxDb2xvci5jb2xvcjtcbiAgICB2YXIgbGFiZWwgPSBlZGdlRGF0YS5sYWJlbDtcbiAgICBpZiAoIWxhYmVsKVxuICAgICAgICByZXR1cm47XG4gICAgY29udGV4dC5maWxsU3R5bGUgPSBjb2xvcjtcbiAgICBjb250ZXh0LmZvbnQgPSBcIlwiLmNvbmNhdCh3ZWlnaHQsIFwiIFwiKS5jb25jYXQoc2l6ZSwgXCJweCBcIikuY29uY2F0KGZvbnQpO1xuICAgIC8vIENvbXB1dGluZyBwb3NpdGlvbnMgd2l0aG91dCBjb25zaWRlcmluZyBub2RlcyBzaXplczpcbiAgICB2YXIgc1NpemUgPSBzb3VyY2VEYXRhLnNpemU7XG4gICAgdmFyIHRTaXplID0gdGFyZ2V0RGF0YS5zaXplO1xuICAgIHZhciBzeCA9IHNvdXJjZURhdGEueDtcbiAgICB2YXIgc3kgPSBzb3VyY2VEYXRhLnk7XG4gICAgdmFyIHR4ID0gdGFyZ2V0RGF0YS54O1xuICAgIHZhciB0eSA9IHRhcmdldERhdGEueTtcbiAgICB2YXIgY3ggPSAoc3ggKyB0eCkgLyAyO1xuICAgIHZhciBjeSA9IChzeSArIHR5KSAvIDI7XG4gICAgdmFyIGR4ID0gdHggLSBzeDtcbiAgICB2YXIgZHkgPSB0eSAtIHN5O1xuICAgIHZhciBkID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbiAgICBpZiAoZCA8IHNTaXplICsgdFNpemUpXG4gICAgICAgIHJldHVybjtcbiAgICAvLyBBZGRpbmcgbm9kZXMgc2l6ZXM6XG4gICAgc3ggKz0gKGR4ICogc1NpemUpIC8gZDtcbiAgICBzeSArPSAoZHkgKiBzU2l6ZSkgLyBkO1xuICAgIHR4IC09IChkeCAqIHRTaXplKSAvIGQ7XG4gICAgdHkgLT0gKGR5ICogdFNpemUpIC8gZDtcbiAgICBjeCA9IChzeCArIHR4KSAvIDI7XG4gICAgY3kgPSAoc3kgKyB0eSkgLyAyO1xuICAgIGR4ID0gdHggLSBzeDtcbiAgICBkeSA9IHR5IC0gc3k7XG4gICAgZCA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gICAgLy8gSGFuZGxpbmcgZWxsaXBzaXNcbiAgICB2YXIgdGV4dExlbmd0aCA9IGNvbnRleHQubWVhc3VyZVRleHQobGFiZWwpLndpZHRoO1xuICAgIGlmICh0ZXh0TGVuZ3RoID4gZCkge1xuICAgICAgICB2YXIgZWxsaXBzaXMgPSBcIuKAplwiO1xuICAgICAgICBsYWJlbCA9IGxhYmVsICsgZWxsaXBzaXM7XG4gICAgICAgIHRleHRMZW5ndGggPSBjb250ZXh0Lm1lYXN1cmVUZXh0KGxhYmVsKS53aWR0aDtcbiAgICAgICAgd2hpbGUgKHRleHRMZW5ndGggPiBkICYmIGxhYmVsLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGxhYmVsID0gbGFiZWwuc2xpY2UoMCwgLTIpICsgZWxsaXBzaXM7XG4gICAgICAgICAgICB0ZXh0TGVuZ3RoID0gY29udGV4dC5tZWFzdXJlVGV4dChsYWJlbCkud2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhYmVsLmxlbmd0aCA8IDQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBhbmdsZTtcbiAgICBpZiAoZHggPiAwKSB7XG4gICAgICAgIGlmIChkeSA+IDApXG4gICAgICAgICAgICBhbmdsZSA9IE1hdGguYWNvcyhkeCAvIGQpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBhbmdsZSA9IE1hdGguYXNpbihkeSAvIGQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKGR5ID4gMClcbiAgICAgICAgICAgIGFuZ2xlID0gTWF0aC5hY29zKGR4IC8gZCkgKyBNYXRoLlBJO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBhbmdsZSA9IE1hdGguYXNpbihkeCAvIGQpICsgTWF0aC5QSSAvIDI7XG4gICAgfVxuICAgIGNvbnRleHQuc2F2ZSgpO1xuICAgIGNvbnRleHQudHJhbnNsYXRlKGN4LCBjeSk7XG4gICAgY29udGV4dC5yb3RhdGUoYW5nbGUpO1xuICAgIGNvbnRleHQuZmlsbFRleHQobGFiZWwsIC10ZXh0TGVuZ3RoIC8gMiwgZWRnZURhdGEuc2l6ZSAvIDIgKyBzaXplKTtcbiAgICBjb250ZXh0LnJlc3RvcmUoKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGRyYXdFZGdlTGFiZWw7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBsYWJlbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2xhYmVsXCIpKTtcbi8qKlxuICogRHJhdyBhbiBob3ZlcmVkIG5vZGUuXG4gKiAtIGlmIHRoZXJlIGlzIG5vIGxhYmVsID0+IGRpc3BsYXkgYSBzaGFkb3cgb24gdGhlIG5vZGVcbiAqIC0gaWYgdGhlIGxhYmVsIGJveCBpcyBiaWdnZXIgdGhhbiBub2RlIHNpemUgPT4gZGlzcGxheSBhIGxhYmVsIGJveCB0aGF0IGNvbnRhaW5zIHRoZSBub2RlIHdpdGggYSBzaGFkb3dcbiAqIC0gZWxzZSBub2RlIHdpdGggc2hhZG93IGFuZCB0aGUgbGFiZWwgYm94XG4gKi9cbmZ1bmN0aW9uIGRyYXdIb3Zlcihjb250ZXh0LCBkYXRhLCBzZXR0aW5ncykge1xuICAgIHZhciBzaXplID0gc2V0dGluZ3MubGFiZWxTaXplLCBmb250ID0gc2V0dGluZ3MubGFiZWxGb250LCB3ZWlnaHQgPSBzZXR0aW5ncy5sYWJlbFdlaWdodDtcbiAgICBjb250ZXh0LmZvbnQgPSBcIlwiLmNvbmNhdCh3ZWlnaHQsIFwiIFwiKS5jb25jYXQoc2l6ZSwgXCJweCBcIikuY29uY2F0KGZvbnQpO1xuICAgIC8vIFRoZW4gd2UgZHJhdyB0aGUgbGFiZWwgYmFja2dyb3VuZFxuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gXCIjRkZGXCI7XG4gICAgY29udGV4dC5zaGFkb3dPZmZzZXRYID0gMDtcbiAgICBjb250ZXh0LnNoYWRvd09mZnNldFkgPSAwO1xuICAgIGNvbnRleHQuc2hhZG93Qmx1ciA9IDg7XG4gICAgY29udGV4dC5zaGFkb3dDb2xvciA9IFwiIzAwMFwiO1xuICAgIHZhciBQQURESU5HID0gMjtcbiAgICBpZiAodHlwZW9mIGRhdGEubGFiZWwgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdmFyIHRleHRXaWR0aCA9IGNvbnRleHQubWVhc3VyZVRleHQoZGF0YS5sYWJlbCkud2lkdGgsIGJveFdpZHRoID0gTWF0aC5yb3VuZCh0ZXh0V2lkdGggKyA1KSwgYm94SGVpZ2h0ID0gTWF0aC5yb3VuZChzaXplICsgMiAqIFBBRERJTkcpLCByYWRpdXMgPSBNYXRoLm1heChkYXRhLnNpemUsIHNpemUgLyAyKSArIFBBRERJTkc7XG4gICAgICAgIHZhciBhbmdsZVJhZGlhbiA9IE1hdGguYXNpbihib3hIZWlnaHQgLyAyIC8gcmFkaXVzKTtcbiAgICAgICAgdmFyIHhEZWx0YUNvb3JkID0gTWF0aC5zcXJ0KE1hdGguYWJzKE1hdGgucG93KHJhZGl1cywgMikgLSBNYXRoLnBvdyhib3hIZWlnaHQgLyAyLCAyKSkpO1xuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICBjb250ZXh0Lm1vdmVUbyhkYXRhLnggKyB4RGVsdGFDb29yZCwgZGF0YS55ICsgYm94SGVpZ2h0IC8gMik7XG4gICAgICAgIGNvbnRleHQubGluZVRvKGRhdGEueCArIHJhZGl1cyArIGJveFdpZHRoLCBkYXRhLnkgKyBib3hIZWlnaHQgLyAyKTtcbiAgICAgICAgY29udGV4dC5saW5lVG8oZGF0YS54ICsgcmFkaXVzICsgYm94V2lkdGgsIGRhdGEueSAtIGJveEhlaWdodCAvIDIpO1xuICAgICAgICBjb250ZXh0LmxpbmVUbyhkYXRhLnggKyB4RGVsdGFDb29yZCwgZGF0YS55IC0gYm94SGVpZ2h0IC8gMik7XG4gICAgICAgIGNvbnRleHQuYXJjKGRhdGEueCwgZGF0YS55LCByYWRpdXMsIGFuZ2xlUmFkaWFuLCAtYW5nbGVSYWRpYW4pO1xuICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBjb250ZXh0LmZpbGwoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgIGNvbnRleHQuYXJjKGRhdGEueCwgZGF0YS55LCBkYXRhLnNpemUgKyBQQURESU5HLCAwLCBNYXRoLlBJICogMik7XG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGNvbnRleHQuZmlsbCgpO1xuICAgIH1cbiAgICBjb250ZXh0LnNoYWRvd09mZnNldFggPSAwO1xuICAgIGNvbnRleHQuc2hhZG93T2Zmc2V0WSA9IDA7XG4gICAgY29udGV4dC5zaGFkb3dCbHVyID0gMDtcbiAgICAvLyBBbmQgZmluYWxseSB3ZSBkcmF3IHRoZSBsYWJlbFxuICAgICgwLCBsYWJlbF8xLmRlZmF1bHQpKGNvbnRleHQsIGRhdGEsIHNldHRpbmdzKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGRyYXdIb3ZlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gZHJhd0xhYmVsKGNvbnRleHQsIGRhdGEsIHNldHRpbmdzKSB7XG4gICAgaWYgKCFkYXRhLmxhYmVsKVxuICAgICAgICByZXR1cm47XG4gICAgdmFyIHNpemUgPSBzZXR0aW5ncy5sYWJlbFNpemUsIGZvbnQgPSBzZXR0aW5ncy5sYWJlbEZvbnQsIHdlaWdodCA9IHNldHRpbmdzLmxhYmVsV2VpZ2h0LCBjb2xvciA9IHNldHRpbmdzLmxhYmVsQ29sb3IuYXR0cmlidXRlXG4gICAgICAgID8gZGF0YVtzZXR0aW5ncy5sYWJlbENvbG9yLmF0dHJpYnV0ZV0gfHwgc2V0dGluZ3MubGFiZWxDb2xvci5jb2xvciB8fCBcIiMwMDBcIlxuICAgICAgICA6IHNldHRpbmdzLmxhYmVsQ29sb3IuY29sb3I7XG4gICAgY29udGV4dC5maWxsU3R5bGUgPSBjb2xvcjtcbiAgICBjb250ZXh0LmZvbnQgPSBcIlwiLmNvbmNhdCh3ZWlnaHQsIFwiIFwiKS5jb25jYXQoc2l6ZSwgXCJweCBcIikuY29uY2F0KGZvbnQpO1xuICAgIGNvbnRleHQuZmlsbFRleHQoZGF0YS5sYWJlbCwgZGF0YS54ICsgZGF0YS5zaXplICsgMywgZGF0YS55ICsgc2l6ZSAvIDMpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gZHJhd0xhYmVsO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVFZGdlQ29tcG91bmRQcm9ncmFtID0gZXhwb3J0cy5BYnN0cmFjdEVkZ2VQcm9ncmFtID0gdm9pZCAwO1xuLyoqXG4gKiBTaWdtYS5qcyBXZWJHTCBBYnN0cmFjdCBFZGdlIFByb2dyYW1cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBAbW9kdWxlXG4gKi9cbnZhciBwcm9ncmFtXzEgPSByZXF1aXJlKFwiLi9wcm9ncmFtXCIpO1xuLyoqXG4gKiBFZGdlIFByb2dyYW0gY2xhc3MuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBBYnN0cmFjdEVkZ2VQcm9ncmFtID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBYnN0cmFjdEVkZ2VQcm9ncmFtLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFic3RyYWN0RWRnZVByb2dyYW0oZ2wsIHZlcnRleFNoYWRlclNvdXJjZSwgZnJhZ21lbnRTaGFkZXJTb3VyY2UsIHBvaW50cywgYXR0cmlidXRlcykge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgZ2wsIHZlcnRleFNoYWRlclNvdXJjZSwgZnJhZ21lbnRTaGFkZXJTb3VyY2UsIHBvaW50cywgYXR0cmlidXRlcykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIEFic3RyYWN0RWRnZVByb2dyYW07XG59KHByb2dyYW1fMS5BYnN0cmFjdFByb2dyYW0pKTtcbmV4cG9ydHMuQWJzdHJhY3RFZGdlUHJvZ3JhbSA9IEFic3RyYWN0RWRnZVByb2dyYW07XG5mdW5jdGlvbiBjcmVhdGVFZGdlQ29tcG91bmRQcm9ncmFtKHByb2dyYW1DbGFzc2VzKSB7XG4gICAgcmV0dXJuIC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gRWRnZUNvbXBvdW5kUHJvZ3JhbShnbCwgcmVuZGVyZXIpIHtcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbXMgPSBwcm9ncmFtQ2xhc3Nlcy5tYXAoZnVuY3Rpb24gKFByb2dyYW1DbGFzcykgeyByZXR1cm4gbmV3IFByb2dyYW1DbGFzcyhnbCwgcmVuZGVyZXIpOyB9KTtcbiAgICAgICAgfVxuICAgICAgICBFZGdlQ29tcG91bmRQcm9ncmFtLnByb3RvdHlwZS5idWZmZXJEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9ncmFtKSB7IHJldHVybiBwcm9ncmFtLmJ1ZmZlckRhdGEoKTsgfSk7XG4gICAgICAgIH07XG4gICAgICAgIEVkZ2VDb21wb3VuZFByb2dyYW0ucHJvdG90eXBlLmFsbG9jYXRlID0gZnVuY3Rpb24gKGNhcGFjaXR5KSB7XG4gICAgICAgICAgICB0aGlzLnByb2dyYW1zLmZvckVhY2goZnVuY3Rpb24gKHByb2dyYW0pIHsgcmV0dXJuIHByb2dyYW0uYWxsb2NhdGUoY2FwYWNpdHkpOyB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgRWRnZUNvbXBvdW5kUHJvZ3JhbS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIG5vdGhpbmcgdG9kbywgaXQncyBhbHJlYWR5IGRvbmUgaW4gZWFjaCBwcm9ncmFtIGNvbnN0cnVjdG9yXG4gICAgICAgIH07XG4gICAgICAgIEVkZ2VDb21wb3VuZFByb2dyYW0ucHJvdG90eXBlLmNvbXB1dGVJbmRpY2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9ncmFtKSB7IHJldHVybiBwcm9ncmFtLmNvbXB1dGVJbmRpY2VzKCk7IH0pO1xuICAgICAgICB9O1xuICAgICAgICBFZGdlQ29tcG91bmRQcm9ncmFtLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgICAgICB0aGlzLnByb2dyYW1zLmZvckVhY2goZnVuY3Rpb24gKHByb2dyYW0pIHtcbiAgICAgICAgICAgICAgICBwcm9ncmFtLmJpbmQoKTtcbiAgICAgICAgICAgICAgICBwcm9ncmFtLmJ1ZmZlckRhdGEoKTtcbiAgICAgICAgICAgICAgICBwcm9ncmFtLnJlbmRlcihwYXJhbXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIEVkZ2VDb21wb3VuZFByb2dyYW0ucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbiAoc291cmNlRGF0YSwgdGFyZ2V0RGF0YSwgZGF0YSwgaGlkZGVuLCBvZmZzZXQpIHtcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbXMuZm9yRWFjaChmdW5jdGlvbiAocHJvZ3JhbSkgeyByZXR1cm4gcHJvZ3JhbS5wcm9jZXNzKHNvdXJjZURhdGEsIHRhcmdldERhdGEsIGRhdGEsIGhpZGRlbiwgb2Zmc2V0KTsgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBFZGdlQ29tcG91bmRQcm9ncmFtO1xuICAgIH0oKSk7XG59XG5leHBvcnRzLmNyZWF0ZUVkZ2VDb21wb3VuZFByb2dyYW0gPSBjcmVhdGVFZGdlQ29tcG91bmRQcm9ncmFtO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVOb2RlQ29tcG91bmRQcm9ncmFtID0gZXhwb3J0cy5BYnN0cmFjdE5vZGVQcm9ncmFtID0gdm9pZCAwO1xuLyoqXG4gKiBTaWdtYS5qcyBXZWJHTCBBYnN0cmFjdCBOb2RlIFByb2dyYW1cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBAbW9kdWxlXG4gKi9cbnZhciBwcm9ncmFtXzEgPSByZXF1aXJlKFwiLi9wcm9ncmFtXCIpO1xuLyoqXG4gKiBOb2RlIFByb2dyYW0gY2xhc3MuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBBYnN0cmFjdE5vZGVQcm9ncmFtID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBYnN0cmFjdE5vZGVQcm9ncmFtLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFic3RyYWN0Tm9kZVByb2dyYW0oZ2wsIHZlcnRleFNoYWRlclNvdXJjZSwgZnJhZ21lbnRTaGFkZXJTb3VyY2UsIHBvaW50cywgYXR0cmlidXRlcykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBnbCwgdmVydGV4U2hhZGVyU291cmNlLCBmcmFnbWVudFNoYWRlclNvdXJjZSwgcG9pbnRzLCBhdHRyaWJ1dGVzKSB8fCB0aGlzO1xuICAgICAgICAvLyBMb2NhdGlvbnNcbiAgICAgICAgX3RoaXMucG9zaXRpb25Mb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKF90aGlzLnByb2dyYW0sIFwiYV9wb3NpdGlvblwiKTtcbiAgICAgICAgX3RoaXMuc2l6ZUxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oX3RoaXMucHJvZ3JhbSwgXCJhX3NpemVcIik7XG4gICAgICAgIF90aGlzLmNvbG9yTG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihfdGhpcy5wcm9ncmFtLCBcImFfY29sb3JcIik7XG4gICAgICAgIC8vIFVuaWZvcm0gTG9jYXRpb25cbiAgICAgICAgdmFyIG1hdHJpeExvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKF90aGlzLnByb2dyYW0sIFwidV9tYXRyaXhcIik7XG4gICAgICAgIGlmIChtYXRyaXhMb2NhdGlvbiA9PT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkFic3RyYWN0Tm9kZVByb2dyYW06IGVycm9yIHdoaWxlIGdldHRpbmcgbWF0cml4TG9jYXRpb25cIik7XG4gICAgICAgIF90aGlzLm1hdHJpeExvY2F0aW9uID0gbWF0cml4TG9jYXRpb247XG4gICAgICAgIHZhciByYXRpb0xvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKF90aGlzLnByb2dyYW0sIFwidV9yYXRpb1wiKTtcbiAgICAgICAgaWYgKHJhdGlvTG9jYXRpb24gPT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBYnN0cmFjdE5vZGVQcm9ncmFtOiBlcnJvciB3aGlsZSBnZXR0aW5nIHJhdGlvTG9jYXRpb25cIik7XG4gICAgICAgIF90aGlzLnJhdGlvTG9jYXRpb24gPSByYXRpb0xvY2F0aW9uO1xuICAgICAgICB2YXIgc2NhbGVMb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihfdGhpcy5wcm9ncmFtLCBcInVfc2NhbGVcIik7XG4gICAgICAgIGlmIChzY2FsZUxvY2F0aW9uID09PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQWJzdHJhY3ROb2RlUHJvZ3JhbTogZXJyb3Igd2hpbGUgZ2V0dGluZyBzY2FsZUxvY2F0aW9uXCIpO1xuICAgICAgICBfdGhpcy5zY2FsZUxvY2F0aW9uID0gc2NhbGVMb2NhdGlvbjtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBYnN0cmFjdE5vZGVQcm9ncmFtLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLnBvc2l0aW9uTG9jYXRpb24pO1xuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLnNpemVMb2NhdGlvbik7XG4gICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMuY29sb3JMb2NhdGlvbik7XG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5wb3NpdGlvbkxvY2F0aW9uLCAyLCBnbC5GTE9BVCwgZmFsc2UsIHRoaXMuYXR0cmlidXRlcyAqIEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCwgMCk7XG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5zaXplTG9jYXRpb24sIDEsIGdsLkZMT0FULCBmYWxzZSwgdGhpcy5hdHRyaWJ1dGVzICogRmxvYXQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5ULCA4KTtcbiAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLmNvbG9yTG9jYXRpb24sIDQsIGdsLlVOU0lHTkVEX0JZVEUsIHRydWUsIHRoaXMuYXR0cmlidXRlcyAqIEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCwgMTIpO1xuICAgIH07XG4gICAgcmV0dXJuIEFic3RyYWN0Tm9kZVByb2dyYW07XG59KHByb2dyYW1fMS5BYnN0cmFjdFByb2dyYW0pKTtcbmV4cG9ydHMuQWJzdHJhY3ROb2RlUHJvZ3JhbSA9IEFic3RyYWN0Tm9kZVByb2dyYW07XG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiBjb21iaW5pbmcgdHdvIG9yIG1vcmUgcHJvZ3JhbXMgaW50byBhIHNpbmdsZSBjb21wb3VuZCBvbmUuXG4gKiBOb3RlIHRoYXQgdGhpcyBpcyBtb3JlIGEgcXVpY2sgJiBlYXN5IHdheSB0byBjb21iaW5lIHByb2dyYW0gdGhhbiBhIHJlYWxseVxuICogcGVyZm9ybWFudCBvcHRpb24uIE1vcmUgcGVyZm9ybWFudCBwcm9ncmFtcyBjYW4gYmUgd3JpdHRlbiBlbnRpcmVseS5cbiAqXG4gKiBAcGFyYW0gIHthcnJheX0gICAgcHJvZ3JhbUNsYXNzZXMgLSBQcm9ncmFtIGNsYXNzZXMgdG8gY29tYmluZS5cbiAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBjcmVhdGVOb2RlQ29tcG91bmRQcm9ncmFtKHByb2dyYW1DbGFzc2VzKSB7XG4gICAgcmV0dXJuIC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gTm9kZUNvbXBvdW5kUHJvZ3JhbShnbCwgcmVuZGVyZXIpIHtcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbXMgPSBwcm9ncmFtQ2xhc3Nlcy5tYXAoZnVuY3Rpb24gKFByb2dyYW1DbGFzcykgeyByZXR1cm4gbmV3IFByb2dyYW1DbGFzcyhnbCwgcmVuZGVyZXIpOyB9KTtcbiAgICAgICAgfVxuICAgICAgICBOb2RlQ29tcG91bmRQcm9ncmFtLnByb3RvdHlwZS5idWZmZXJEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9ncmFtKSB7IHJldHVybiBwcm9ncmFtLmJ1ZmZlckRhdGEoKTsgfSk7XG4gICAgICAgIH07XG4gICAgICAgIE5vZGVDb21wb3VuZFByb2dyYW0ucHJvdG90eXBlLmFsbG9jYXRlID0gZnVuY3Rpb24gKGNhcGFjaXR5KSB7XG4gICAgICAgICAgICB0aGlzLnByb2dyYW1zLmZvckVhY2goZnVuY3Rpb24gKHByb2dyYW0pIHsgcmV0dXJuIHByb2dyYW0uYWxsb2NhdGUoY2FwYWNpdHkpOyB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgTm9kZUNvbXBvdW5kUHJvZ3JhbS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIG5vdGhpbmcgdG9kbywgaXQncyBhbHJlYWR5IGRvbmUgaW4gZWFjaCBwcm9ncmFtIGNvbnN0cnVjdG9yXG4gICAgICAgIH07XG4gICAgICAgIE5vZGVDb21wb3VuZFByb2dyYW0ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbXMuZm9yRWFjaChmdW5jdGlvbiAocHJvZ3JhbSkge1xuICAgICAgICAgICAgICAgIHByb2dyYW0uYmluZCgpO1xuICAgICAgICAgICAgICAgIHByb2dyYW0uYnVmZmVyRGF0YSgpO1xuICAgICAgICAgICAgICAgIHByb2dyYW0ucmVuZGVyKHBhcmFtcyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgTm9kZUNvbXBvdW5kUHJvZ3JhbS5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uIChkYXRhLCBoaWRkZW4sIG9mZnNldCkge1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9ncmFtKSB7IHJldHVybiBwcm9ncmFtLnByb2Nlc3MoZGF0YSwgaGlkZGVuLCBvZmZzZXQpOyB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIE5vZGVDb21wb3VuZFByb2dyYW07XG4gICAgfSgpKTtcbn1cbmV4cG9ydHMuY3JlYXRlTm9kZUNvbXBvdW5kUHJvZ3JhbSA9IGNyZWF0ZU5vZGVDb21wb3VuZFByb2dyYW07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQWJzdHJhY3RQcm9ncmFtID0gdm9pZCAwO1xuLyoqXG4gKiBTaWdtYS5qcyBXZWJHTCBSZW5kZXJlciBQcm9ncmFtXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIHNpbmdsZSBXZWJHTCBwcm9ncmFtIHVzZWQgYnkgc2lnbWEncyBXZWJHTCByZW5kZXJlci5cbiAqIEBtb2R1bGVcbiAqL1xudmFyIHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vc2hhZGVycy91dGlsc1wiKTtcbi8qKlxuICogQWJzdHJhY3QgUHJvZ3JhbSBjbGFzcy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIEFic3RyYWN0UHJvZ3JhbSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBYnN0cmFjdFByb2dyYW0oZ2wsIHZlcnRleFNoYWRlclNvdXJjZSwgZnJhZ21lbnRTaGFkZXJTb3VyY2UsIHBvaW50cywgYXR0cmlidXRlcykge1xuICAgICAgICB0aGlzLmFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSgpO1xuICAgICAgICB0aGlzLnBvaW50cyA9IHBvaW50cztcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcbiAgICAgICAgdGhpcy5nbCA9IGdsO1xuICAgICAgICB0aGlzLnZlcnRleFNoYWRlclNvdXJjZSA9IHZlcnRleFNoYWRlclNvdXJjZTtcbiAgICAgICAgdGhpcy5mcmFnbWVudFNoYWRlclNvdXJjZSA9IGZyYWdtZW50U2hhZGVyU291cmNlO1xuICAgICAgICB2YXIgYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICAgIGlmIChidWZmZXIgPT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBYnN0cmFjdFByb2dyYW06IGVycm9yIHdoaWxlIGNyZWF0aW5nIHRoZSBidWZmZXJcIik7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5idWZmZXIpO1xuICAgICAgICB0aGlzLnZlcnRleFNoYWRlciA9ICgwLCB1dGlsc18xLmxvYWRWZXJ0ZXhTaGFkZXIpKGdsLCB0aGlzLnZlcnRleFNoYWRlclNvdXJjZSk7XG4gICAgICAgIHRoaXMuZnJhZ21lbnRTaGFkZXIgPSAoMCwgdXRpbHNfMS5sb2FkRnJhZ21lbnRTaGFkZXIpKGdsLCB0aGlzLmZyYWdtZW50U2hhZGVyU291cmNlKTtcbiAgICAgICAgdGhpcy5wcm9ncmFtID0gKDAsIHV0aWxzXzEubG9hZFByb2dyYW0pKGdsLCBbdGhpcy52ZXJ0ZXhTaGFkZXIsIHRoaXMuZnJhZ21lbnRTaGFkZXJdKTtcbiAgICB9XG4gICAgQWJzdHJhY3RQcm9ncmFtLnByb3RvdHlwZS5idWZmZXJEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5hcnJheSwgZ2wuRFlOQU1JQ19EUkFXKTtcbiAgICB9O1xuICAgIEFic3RyYWN0UHJvZ3JhbS5wcm90b3R5cGUuYWxsb2NhdGUgPSBmdW5jdGlvbiAoY2FwYWNpdHkpIHtcbiAgICAgICAgdGhpcy5hcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5wb2ludHMgKiB0aGlzLmF0dHJpYnV0ZXMgKiBjYXBhY2l0eSk7XG4gICAgfTtcbiAgICBBYnN0cmFjdFByb2dyYW0ucHJvdG90eXBlLmhhc05vdGhpbmdUb1JlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXJyYXkubGVuZ3RoID09PSAwO1xuICAgIH07XG4gICAgcmV0dXJuIEFic3RyYWN0UHJvZ3JhbTtcbn0oKSk7XG5leHBvcnRzLkFic3RyYWN0UHJvZ3JhbSA9IEFic3RyYWN0UHJvZ3JhbTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBTaWdtYS5qcyBXZWJHTCBSZW5kZXJlciBFZGdlIEFycm93IFByb2dyYW1cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBDb21wb3VuZCBwcm9ncmFtIHJlbmRlcmluZyBlZGdlcyBhcyBhbiBhcnJvdyBmcm9tIHRoZSBzb3VyY2UgdG8gdGhlIHRhcmdldC5cbiAqIEBtb2R1bGVcbiAqL1xudmFyIGVkZ2VfMSA9IHJlcXVpcmUoXCIuL2NvbW1vbi9lZGdlXCIpO1xudmFyIGVkZ2VfYXJyb3dIZWFkXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vZWRnZS5hcnJvd0hlYWRcIikpO1xudmFyIGVkZ2VfY2xhbXBlZF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2VkZ2UuY2xhbXBlZFwiKSk7XG52YXIgRWRnZUFycm93UHJvZ3JhbSA9ICgwLCBlZGdlXzEuY3JlYXRlRWRnZUNvbXBvdW5kUHJvZ3JhbSkoW2VkZ2VfY2xhbXBlZF8xLmRlZmF1bHQsIGVkZ2VfYXJyb3dIZWFkXzEuZGVmYXVsdF0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gRWRnZUFycm93UHJvZ3JhbTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL3V0aWxzXCIpO1xudmFyIGVkZ2VfYXJyb3dIZWFkX3ZlcnRfZ2xzbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFkZXJzL2VkZ2UuYXJyb3dIZWFkLnZlcnQuZ2xzbC5qc1wiKSk7XG52YXIgZWRnZV9hcnJvd0hlYWRfZnJhZ19nbHNsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL3NoYWRlcnMvZWRnZS5hcnJvd0hlYWQuZnJhZy5nbHNsLmpzXCIpKTtcbnZhciBlZGdlXzEgPSByZXF1aXJlKFwiLi9jb21tb24vZWRnZVwiKTtcbnZhciBQT0lOVFMgPSAzLCBBVFRSSUJVVEVTID0gOSwgU1RSSURFID0gUE9JTlRTICogQVRUUklCVVRFUztcbnZhciBFZGdlQXJyb3dIZWFkUHJvZ3JhbSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRWRnZUFycm93SGVhZFByb2dyYW0sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRWRnZUFycm93SGVhZFByb2dyYW0oZ2wpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZ2wsIGVkZ2VfYXJyb3dIZWFkX3ZlcnRfZ2xzbF8xLmRlZmF1bHQsIGVkZ2VfYXJyb3dIZWFkX2ZyYWdfZ2xzbF8xLmRlZmF1bHQsIFBPSU5UUywgQVRUUklCVVRFUykgfHwgdGhpcztcbiAgICAgICAgLy8gTG9jYXRpb25zXG4gICAgICAgIF90aGlzLnBvc2l0aW9uTG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihfdGhpcy5wcm9ncmFtLCBcImFfcG9zaXRpb25cIik7XG4gICAgICAgIF90aGlzLmNvbG9yTG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihfdGhpcy5wcm9ncmFtLCBcImFfY29sb3JcIik7XG4gICAgICAgIF90aGlzLm5vcm1hbExvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oX3RoaXMucHJvZ3JhbSwgXCJhX25vcm1hbFwiKTtcbiAgICAgICAgX3RoaXMucmFkaXVzTG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihfdGhpcy5wcm9ncmFtLCBcImFfcmFkaXVzXCIpO1xuICAgICAgICBfdGhpcy5iYXJ5Y2VudHJpY0xvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oX3RoaXMucHJvZ3JhbSwgXCJhX2JhcnljZW50cmljXCIpO1xuICAgICAgICAvLyBVbmlmb3JtIGxvY2F0aW9uc1xuICAgICAgICB2YXIgbWF0cml4TG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oX3RoaXMucHJvZ3JhbSwgXCJ1X21hdHJpeFwiKTtcbiAgICAgICAgaWYgKG1hdHJpeExvY2F0aW9uID09PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRWRnZUFycm93SGVhZFByb2dyYW06IGVycm9yIHdoaWxlIGdldHRpbmcgbWF0cml4TG9jYXRpb25cIik7XG4gICAgICAgIF90aGlzLm1hdHJpeExvY2F0aW9uID0gbWF0cml4TG9jYXRpb247XG4gICAgICAgIHZhciBzcXJ0Wm9vbVJhdGlvTG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oX3RoaXMucHJvZ3JhbSwgXCJ1X3NxcnRab29tUmF0aW9cIik7XG4gICAgICAgIGlmIChzcXJ0Wm9vbVJhdGlvTG9jYXRpb24gPT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFZGdlQXJyb3dIZWFkUHJvZ3JhbTogZXJyb3Igd2hpbGUgZ2V0dGluZyBzcXJ0Wm9vbVJhdGlvTG9jYXRpb25cIik7XG4gICAgICAgIF90aGlzLnNxcnRab29tUmF0aW9Mb2NhdGlvbiA9IHNxcnRab29tUmF0aW9Mb2NhdGlvbjtcbiAgICAgICAgdmFyIGNvcnJlY3Rpb25SYXRpb0xvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKF90aGlzLnByb2dyYW0sIFwidV9jb3JyZWN0aW9uUmF0aW9cIik7XG4gICAgICAgIGlmIChjb3JyZWN0aW9uUmF0aW9Mb2NhdGlvbiA9PT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVkZ2VBcnJvd0hlYWRQcm9ncmFtOiBlcnJvciB3aGlsZSBnZXR0aW5nIGNvcnJlY3Rpb25SYXRpb0xvY2F0aW9uXCIpO1xuICAgICAgICBfdGhpcy5jb3JyZWN0aW9uUmF0aW9Mb2NhdGlvbiA9IGNvcnJlY3Rpb25SYXRpb0xvY2F0aW9uO1xuICAgICAgICBfdGhpcy5iaW5kKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRWRnZUFycm93SGVhZFByb2dyYW0ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIC8vIEJpbmRpbmdzXG4gICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMucG9zaXRpb25Mb2NhdGlvbik7XG4gICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMubm9ybWFsTG9jYXRpb24pO1xuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLnJhZGl1c0xvY2F0aW9uKTtcbiAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5jb2xvckxvY2F0aW9uKTtcbiAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5iYXJ5Y2VudHJpY0xvY2F0aW9uKTtcbiAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLnBvc2l0aW9uTG9jYXRpb24sIDIsIGdsLkZMT0FULCBmYWxzZSwgQVRUUklCVVRFUyAqIEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCwgMCk7XG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5ub3JtYWxMb2NhdGlvbiwgMiwgZ2wuRkxPQVQsIGZhbHNlLCBBVFRSSUJVVEVTICogRmxvYXQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5ULCA4KTtcbiAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLnJhZGl1c0xvY2F0aW9uLCAxLCBnbC5GTE9BVCwgZmFsc2UsIEFUVFJJQlVURVMgKiBGbG9hdDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQsIDE2KTtcbiAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLmNvbG9yTG9jYXRpb24sIDQsIGdsLlVOU0lHTkVEX0JZVEUsIHRydWUsIEFUVFJJQlVURVMgKiBGbG9hdDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQsIDIwKTtcbiAgICAgICAgLy8gVE9ETzogbWF5YmUgd2UgY2FuIG9wdGltaXplIGhlcmUgYnkgcGFja2luZyB0aGlzIGluIGEgYml0IG1hc2tcbiAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLmJhcnljZW50cmljTG9jYXRpb24sIDMsIGdsLkZMT0FULCBmYWxzZSwgQVRUUklCVVRFUyAqIEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCwgMjQpO1xuICAgIH07XG4gICAgRWRnZUFycm93SGVhZFByb2dyYW0ucHJvdG90eXBlLmNvbXB1dGVJbmRpY2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBub3RoaW5nIHRvIGRvXG4gICAgfTtcbiAgICBFZGdlQXJyb3dIZWFkUHJvZ3JhbS5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uIChzb3VyY2VEYXRhLCB0YXJnZXREYXRhLCBkYXRhLCBoaWRkZW4sIG9mZnNldCkge1xuICAgICAgICBpZiAoaGlkZGVuKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpXzEgPSBvZmZzZXQgKiBTVFJJREUsIGwgPSBpXzEgKyBTVFJJREU7IGlfMSA8IGw7IGlfMSsrKVxuICAgICAgICAgICAgICAgIHRoaXMuYXJyYXlbaV8xXSA9IDA7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaWNrbmVzcyA9IGRhdGEuc2l6ZSB8fCAxLCByYWRpdXMgPSB0YXJnZXREYXRhLnNpemUgfHwgMSwgeDEgPSBzb3VyY2VEYXRhLngsIHkxID0gc291cmNlRGF0YS55LCB4MiA9IHRhcmdldERhdGEueCwgeTIgPSB0YXJnZXREYXRhLnksIGNvbG9yID0gKDAsIHV0aWxzXzEuZmxvYXRDb2xvcikoZGF0YS5jb2xvcik7XG4gICAgICAgIC8vIENvbXB1dGluZyBub3JtYWxzXG4gICAgICAgIHZhciBkeCA9IHgyIC0geDEsIGR5ID0geTIgLSB5MTtcbiAgICAgICAgdmFyIGxlbiA9IGR4ICogZHggKyBkeSAqIGR5LCBuMSA9IDAsIG4yID0gMDtcbiAgICAgICAgaWYgKGxlbikge1xuICAgICAgICAgICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICAgICAgICAgICAgbjEgPSAtZHkgKiBsZW4gKiB0aGlja25lc3M7XG4gICAgICAgICAgICBuMiA9IGR4ICogbGVuICogdGhpY2tuZXNzO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpID0gUE9JTlRTICogQVRUUklCVVRFUyAqIG9mZnNldDtcbiAgICAgICAgdmFyIGFycmF5ID0gdGhpcy5hcnJheTtcbiAgICAgICAgLy8gRmlyc3QgcG9pbnRcbiAgICAgICAgYXJyYXlbaSsrXSA9IHgyO1xuICAgICAgICBhcnJheVtpKytdID0geTI7XG4gICAgICAgIGFycmF5W2krK10gPSAtbjE7XG4gICAgICAgIGFycmF5W2krK10gPSAtbjI7XG4gICAgICAgIGFycmF5W2krK10gPSByYWRpdXM7XG4gICAgICAgIGFycmF5W2krK10gPSBjb2xvcjtcbiAgICAgICAgYXJyYXlbaSsrXSA9IDE7XG4gICAgICAgIGFycmF5W2krK10gPSAwO1xuICAgICAgICBhcnJheVtpKytdID0gMDtcbiAgICAgICAgLy8gU2Vjb25kIHBvaW50XG4gICAgICAgIGFycmF5W2krK10gPSB4MjtcbiAgICAgICAgYXJyYXlbaSsrXSA9IHkyO1xuICAgICAgICBhcnJheVtpKytdID0gLW4xO1xuICAgICAgICBhcnJheVtpKytdID0gLW4yO1xuICAgICAgICBhcnJheVtpKytdID0gcmFkaXVzO1xuICAgICAgICBhcnJheVtpKytdID0gY29sb3I7XG4gICAgICAgIGFycmF5W2krK10gPSAwO1xuICAgICAgICBhcnJheVtpKytdID0gMTtcbiAgICAgICAgYXJyYXlbaSsrXSA9IDA7XG4gICAgICAgIC8vIFRoaXJkIHBvaW50XG4gICAgICAgIGFycmF5W2krK10gPSB4MjtcbiAgICAgICAgYXJyYXlbaSsrXSA9IHkyO1xuICAgICAgICBhcnJheVtpKytdID0gLW4xO1xuICAgICAgICBhcnJheVtpKytdID0gLW4yO1xuICAgICAgICBhcnJheVtpKytdID0gcmFkaXVzO1xuICAgICAgICBhcnJheVtpKytdID0gY29sb3I7XG4gICAgICAgIGFycmF5W2krK10gPSAwO1xuICAgICAgICBhcnJheVtpKytdID0gMDtcbiAgICAgICAgYXJyYXlbaV0gPSAxO1xuICAgIH07XG4gICAgRWRnZUFycm93SGVhZFByb2dyYW0ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzTm90aGluZ1RvUmVuZGVyKCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIHZhciBwcm9ncmFtID0gdGhpcy5wcm9ncmFtO1xuICAgICAgICBnbC51c2VQcm9ncmFtKHByb2dyYW0pO1xuICAgICAgICAvLyBCaW5kaW5nIHVuaWZvcm1zXG4gICAgICAgIGdsLnVuaWZvcm1NYXRyaXgzZnYodGhpcy5tYXRyaXhMb2NhdGlvbiwgZmFsc2UsIHBhcmFtcy5tYXRyaXgpO1xuICAgICAgICBnbC51bmlmb3JtMWYodGhpcy5zcXJ0Wm9vbVJhdGlvTG9jYXRpb24sIE1hdGguc3FydChwYXJhbXMucmF0aW8pKTtcbiAgICAgICAgZ2wudW5pZm9ybTFmKHRoaXMuY29ycmVjdGlvblJhdGlvTG9jYXRpb24sIHBhcmFtcy5jb3JyZWN0aW9uUmF0aW8pO1xuICAgICAgICAvLyBEcmF3aW5nOlxuICAgICAgICBnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFUywgMCwgdGhpcy5hcnJheS5sZW5ndGggLyBBVFRSSUJVVEVTKTtcbiAgICB9O1xuICAgIHJldHVybiBFZGdlQXJyb3dIZWFkUHJvZ3JhbTtcbn0oZWRnZV8xLkFic3RyYWN0RWRnZVByb2dyYW0pKTtcbmV4cG9ydHMuZGVmYXVsdCA9IEVkZ2VBcnJvd0hlYWRQcm9ncmFtO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGVkZ2VfMSA9IHJlcXVpcmUoXCIuL2NvbW1vbi9lZGdlXCIpO1xudmFyIHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vdXRpbHNcIik7XG52YXIgZWRnZV9jbGFtcGVkX3ZlcnRfZ2xzbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFkZXJzL2VkZ2UuY2xhbXBlZC52ZXJ0Lmdsc2wuanNcIikpO1xudmFyIGVkZ2VfZnJhZ19nbHNsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL3NoYWRlcnMvZWRnZS5mcmFnLmdsc2wuanNcIikpO1xudmFyIFBPSU5UUyA9IDQsIEFUVFJJQlVURVMgPSA2LCBTVFJJREUgPSBQT0lOVFMgKiBBVFRSSUJVVEVTO1xudmFyIEVkZ2VDbGFtcGVkUHJvZ3JhbSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRWRnZUNsYW1wZWRQcm9ncmFtLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEVkZ2VDbGFtcGVkUHJvZ3JhbShnbCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBnbCwgZWRnZV9jbGFtcGVkX3ZlcnRfZ2xzbF8xLmRlZmF1bHQsIGVkZ2VfZnJhZ19nbHNsXzEuZGVmYXVsdCwgUE9JTlRTLCBBVFRSSUJVVEVTKSB8fCB0aGlzO1xuICAgICAgICAvLyBJbml0aWFsaXppbmcgaW5kaWNlcyBidWZmZXJcbiAgICAgICAgdmFyIGluZGljZXNCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgICAgaWYgKGluZGljZXNCdWZmZXIgPT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFZGdlQ2xhbXBlZFByb2dyYW06IGVycm9yIHdoaWxlIGdldHRpbmcgcmVzb2x1dGlvbkxvY2F0aW9uXCIpO1xuICAgICAgICBfdGhpcy5pbmRpY2VzQnVmZmVyID0gaW5kaWNlc0J1ZmZlcjtcbiAgICAgICAgLy8gTG9jYXRpb25zOlxuICAgICAgICBfdGhpcy5wb3NpdGlvbkxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oX3RoaXMucHJvZ3JhbSwgXCJhX3Bvc2l0aW9uXCIpO1xuICAgICAgICBfdGhpcy5jb2xvckxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oX3RoaXMucHJvZ3JhbSwgXCJhX2NvbG9yXCIpO1xuICAgICAgICBfdGhpcy5ub3JtYWxMb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKF90aGlzLnByb2dyYW0sIFwiYV9ub3JtYWxcIik7XG4gICAgICAgIF90aGlzLnJhZGl1c0xvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oX3RoaXMucHJvZ3JhbSwgXCJhX3JhZGl1c1wiKTtcbiAgICAgICAgLy8gVW5pZm9ybSBsb2NhdGlvbnNcbiAgICAgICAgdmFyIG1hdHJpeExvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKF90aGlzLnByb2dyYW0sIFwidV9tYXRyaXhcIik7XG4gICAgICAgIGlmIChtYXRyaXhMb2NhdGlvbiA9PT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVkZ2VDbGFtcGVkUHJvZ3JhbTogZXJyb3Igd2hpbGUgZ2V0dGluZyBtYXRyaXhMb2NhdGlvblwiKTtcbiAgICAgICAgX3RoaXMubWF0cml4TG9jYXRpb24gPSBtYXRyaXhMb2NhdGlvbjtcbiAgICAgICAgdmFyIHNxcnRab29tUmF0aW9Mb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihfdGhpcy5wcm9ncmFtLCBcInVfc3FydFpvb21SYXRpb1wiKTtcbiAgICAgICAgaWYgKHNxcnRab29tUmF0aW9Mb2NhdGlvbiA9PT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVkZ2VDbGFtcGVkUHJvZ3JhbTogZXJyb3Igd2hpbGUgZ2V0dGluZyBjYW1lcmFSYXRpb0xvY2F0aW9uXCIpO1xuICAgICAgICBfdGhpcy5zcXJ0Wm9vbVJhdGlvTG9jYXRpb24gPSBzcXJ0Wm9vbVJhdGlvTG9jYXRpb247XG4gICAgICAgIHZhciBjb3JyZWN0aW9uUmF0aW9Mb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihfdGhpcy5wcm9ncmFtLCBcInVfY29ycmVjdGlvblJhdGlvXCIpO1xuICAgICAgICBpZiAoY29ycmVjdGlvblJhdGlvTG9jYXRpb24gPT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFZGdlQ2xhbXBlZFByb2dyYW06IGVycm9yIHdoaWxlIGdldHRpbmcgdmlld3BvcnRSYXRpb0xvY2F0aW9uXCIpO1xuICAgICAgICBfdGhpcy5jb3JyZWN0aW9uUmF0aW9Mb2NhdGlvbiA9IGNvcnJlY3Rpb25SYXRpb0xvY2F0aW9uO1xuICAgICAgICAvLyBFbmFibGluZyB0aGUgT0VTX2VsZW1lbnRfaW5kZXhfdWludCBleHRlbnNpb25cbiAgICAgICAgLy8gTk9URTogb24gb2xkZXIgR1BVcywgdGhpcyBtZWFucyB0aGF0IHJlYWxseSBsYXJnZSBncmFwaHMgd29uJ3RcbiAgICAgICAgLy8gaGF2ZSBhbGwgdGhlaXIgZWRnZXMgcmVuZGVyZWQuIEJ1dCBpdCBzZWVtcyB0aGF0IHRoZVxuICAgICAgICAvLyBgT0VTX2VsZW1lbnRfaW5kZXhfdWludGAgaXMgcXVpdGUgZXZlcnl3aGVyZSBzbyB3ZSdsbCBoYW5kbGVcbiAgICAgICAgLy8gdGhlIHBvdGVudGlhbCBpc3N1ZSBpZiBpdCByZWFsbHkgYXJpc2VzLlxuICAgICAgICAvLyBOT1RFOiB3aGVuIHVzaW5nIHdlYmdsMiwgdGhlIGV4dGVuc2lvbiBpcyBlbmFibGVkIGJ5IGRlZmF1bHRcbiAgICAgICAgX3RoaXMuY2FuVXNlMzJCaXRzSW5kaWNlcyA9ICgwLCB1dGlsc18xLmNhblVzZTMyQml0c0luZGljZXMpKGdsKTtcbiAgICAgICAgX3RoaXMuSW5kaWNlc0FycmF5ID0gX3RoaXMuY2FuVXNlMzJCaXRzSW5kaWNlcyA/IFVpbnQzMkFycmF5IDogVWludDE2QXJyYXk7XG4gICAgICAgIF90aGlzLmluZGljZXNBcnJheSA9IG5ldyBfdGhpcy5JbmRpY2VzQXJyYXkoKTtcbiAgICAgICAgX3RoaXMuaW5kaWNlc1R5cGUgPSBfdGhpcy5jYW5Vc2UzMkJpdHNJbmRpY2VzID8gZ2wuVU5TSUdORURfSU5UIDogZ2wuVU5TSUdORURfU0hPUlQ7XG4gICAgICAgIF90aGlzLmJpbmQoKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBFZGdlQ2xhbXBlZFByb2dyYW0ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuaW5kaWNlc0J1ZmZlcik7XG4gICAgICAgIC8vIEJpbmRpbmdzXG4gICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMucG9zaXRpb25Mb2NhdGlvbik7XG4gICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMubm9ybWFsTG9jYXRpb24pO1xuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLmNvbG9yTG9jYXRpb24pO1xuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLnJhZGl1c0xvY2F0aW9uKTtcbiAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLnBvc2l0aW9uTG9jYXRpb24sIDIsIGdsLkZMT0FULCBmYWxzZSwgQVRUUklCVVRFUyAqIEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCwgMCk7XG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5ub3JtYWxMb2NhdGlvbiwgMiwgZ2wuRkxPQVQsIGZhbHNlLCBBVFRSSUJVVEVTICogRmxvYXQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5ULCA4KTtcbiAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLmNvbG9yTG9jYXRpb24sIDQsIGdsLlVOU0lHTkVEX0JZVEUsIHRydWUsIEFUVFJJQlVURVMgKiBGbG9hdDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQsIDE2KTtcbiAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLnJhZGl1c0xvY2F0aW9uLCAxLCBnbC5GTE9BVCwgZmFsc2UsIEFUVFJJQlVURVMgKiBGbG9hdDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQsIDIwKTtcbiAgICB9O1xuICAgIEVkZ2VDbGFtcGVkUHJvZ3JhbS5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uIChzb3VyY2VEYXRhLCB0YXJnZXREYXRhLCBkYXRhLCBoaWRkZW4sIG9mZnNldCkge1xuICAgICAgICBpZiAoaGlkZGVuKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpXzEgPSBvZmZzZXQgKiBTVFJJREUsIGwgPSBpXzEgKyBTVFJJREU7IGlfMSA8IGw7IGlfMSsrKVxuICAgICAgICAgICAgICAgIHRoaXMuYXJyYXlbaV8xXSA9IDA7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaWNrbmVzcyA9IGRhdGEuc2l6ZSB8fCAxLCB4MSA9IHNvdXJjZURhdGEueCwgeTEgPSBzb3VyY2VEYXRhLnksIHgyID0gdGFyZ2V0RGF0YS54LCB5MiA9IHRhcmdldERhdGEueSwgcmFkaXVzID0gdGFyZ2V0RGF0YS5zaXplIHx8IDEsIGNvbG9yID0gKDAsIHV0aWxzXzEuZmxvYXRDb2xvcikoZGF0YS5jb2xvcik7XG4gICAgICAgIC8vIENvbXB1dGluZyBub3JtYWxzXG4gICAgICAgIHZhciBkeCA9IHgyIC0geDEsIGR5ID0geTIgLSB5MTtcbiAgICAgICAgdmFyIGxlbiA9IGR4ICogZHggKyBkeSAqIGR5LCBuMSA9IDAsIG4yID0gMDtcbiAgICAgICAgaWYgKGxlbikge1xuICAgICAgICAgICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICAgICAgICAgICAgbjEgPSAtZHkgKiBsZW4gKiB0aGlja25lc3M7XG4gICAgICAgICAgICBuMiA9IGR4ICogbGVuICogdGhpY2tuZXNzO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpID0gUE9JTlRTICogQVRUUklCVVRFUyAqIG9mZnNldDtcbiAgICAgICAgdmFyIGFycmF5ID0gdGhpcy5hcnJheTtcbiAgICAgICAgLy8gRmlyc3QgcG9pbnRcbiAgICAgICAgYXJyYXlbaSsrXSA9IHgxO1xuICAgICAgICBhcnJheVtpKytdID0geTE7XG4gICAgICAgIGFycmF5W2krK10gPSBuMTtcbiAgICAgICAgYXJyYXlbaSsrXSA9IG4yO1xuICAgICAgICBhcnJheVtpKytdID0gY29sb3I7XG4gICAgICAgIGFycmF5W2krK10gPSAwO1xuICAgICAgICAvLyBGaXJzdCBwb2ludCBmbGlwcGVkXG4gICAgICAgIGFycmF5W2krK10gPSB4MTtcbiAgICAgICAgYXJyYXlbaSsrXSA9IHkxO1xuICAgICAgICBhcnJheVtpKytdID0gLW4xO1xuICAgICAgICBhcnJheVtpKytdID0gLW4yO1xuICAgICAgICBhcnJheVtpKytdID0gY29sb3I7XG4gICAgICAgIGFycmF5W2krK10gPSAwO1xuICAgICAgICAvLyBTZWNvbmQgcG9pbnRcbiAgICAgICAgYXJyYXlbaSsrXSA9IHgyO1xuICAgICAgICBhcnJheVtpKytdID0geTI7XG4gICAgICAgIGFycmF5W2krK10gPSBuMTtcbiAgICAgICAgYXJyYXlbaSsrXSA9IG4yO1xuICAgICAgICBhcnJheVtpKytdID0gY29sb3I7XG4gICAgICAgIGFycmF5W2krK10gPSByYWRpdXM7XG4gICAgICAgIC8vIFNlY29uZCBwb2ludCBmbGlwcGVkXG4gICAgICAgIGFycmF5W2krK10gPSB4MjtcbiAgICAgICAgYXJyYXlbaSsrXSA9IHkyO1xuICAgICAgICBhcnJheVtpKytdID0gLW4xO1xuICAgICAgICBhcnJheVtpKytdID0gLW4yO1xuICAgICAgICBhcnJheVtpKytdID0gY29sb3I7XG4gICAgICAgIGFycmF5W2ldID0gLXJhZGl1cztcbiAgICB9O1xuICAgIEVkZ2VDbGFtcGVkUHJvZ3JhbS5wcm90b3R5cGUuY29tcHV0ZUluZGljZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBsID0gdGhpcy5hcnJheS5sZW5ndGggLyBBVFRSSUJVVEVTO1xuICAgICAgICB2YXIgc2l6ZSA9IGwgKyBsIC8gMjtcbiAgICAgICAgdmFyIGluZGljZXMgPSBuZXcgdGhpcy5JbmRpY2VzQXJyYXkoc2l6ZSk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBjID0gMDsgaSA8IGw7IGkgKz0gNCkge1xuICAgICAgICAgICAgaW5kaWNlc1tjKytdID0gaTtcbiAgICAgICAgICAgIGluZGljZXNbYysrXSA9IGkgKyAxO1xuICAgICAgICAgICAgaW5kaWNlc1tjKytdID0gaSArIDI7XG4gICAgICAgICAgICBpbmRpY2VzW2MrK10gPSBpICsgMjtcbiAgICAgICAgICAgIGluZGljZXNbYysrXSA9IGkgKyAxO1xuICAgICAgICAgICAgaW5kaWNlc1tjKytdID0gaSArIDM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbmRpY2VzQXJyYXkgPSBpbmRpY2VzO1xuICAgIH07XG4gICAgRWRnZUNsYW1wZWRQcm9ncmFtLnByb3RvdHlwZS5idWZmZXJEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmJ1ZmZlckRhdGEuY2FsbCh0aGlzKTtcbiAgICAgICAgLy8gSW5kaWNlcyBkYXRhXG4gICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuaW5kaWNlc0FycmF5LCBnbC5TVEFUSUNfRFJBVyk7XG4gICAgfTtcbiAgICBFZGdlQ2xhbXBlZFByb2dyYW0ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzTm90aGluZ1RvUmVuZGVyKCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIHZhciBwcm9ncmFtID0gdGhpcy5wcm9ncmFtO1xuICAgICAgICBnbC51c2VQcm9ncmFtKHByb2dyYW0pO1xuICAgICAgICAvLyBCaW5kaW5nIHVuaWZvcm1zXG4gICAgICAgIGdsLnVuaWZvcm1NYXRyaXgzZnYodGhpcy5tYXRyaXhMb2NhdGlvbiwgZmFsc2UsIHBhcmFtcy5tYXRyaXgpO1xuICAgICAgICBnbC51bmlmb3JtMWYodGhpcy5zcXJ0Wm9vbVJhdGlvTG9jYXRpb24sIE1hdGguc3FydChwYXJhbXMucmF0aW8pKTtcbiAgICAgICAgZ2wudW5pZm9ybTFmKHRoaXMuY29ycmVjdGlvblJhdGlvTG9jYXRpb24sIHBhcmFtcy5jb3JyZWN0aW9uUmF0aW8pO1xuICAgICAgICAvLyBEcmF3aW5nOlxuICAgICAgICBnbC5kcmF3RWxlbWVudHMoZ2wuVFJJQU5HTEVTLCB0aGlzLmluZGljZXNBcnJheS5sZW5ndGgsIHRoaXMuaW5kaWNlc1R5cGUsIDApO1xuICAgIH07XG4gICAgcmV0dXJuIEVkZ2VDbGFtcGVkUHJvZ3JhbTtcbn0oZWRnZV8xLkFic3RyYWN0RWRnZVByb2dyYW0pKTtcbmV4cG9ydHMuZGVmYXVsdCA9IEVkZ2VDbGFtcGVkUHJvZ3JhbTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogU2lnbWEuanMgV2ViR0wgUmVuZGVyZXIgRWRnZSBQcm9ncmFtXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKlxuICogUHJvZ3JhbSByZW5kZXJpbmcgZWRnZXMgYXMgdGhpY2sgbGluZXMgdXNpbmcgZm91ciBwb2ludHMgdHJhbnNsYXRlZFxuICogb3J0aG9nb25hbGx5IGZyb20gdGhlIHNvdXJjZSAmIHRhcmdldCdzIGNlbnRlcnMgYnkgaGFsZiB0aGlja25lc3MuXG4gKlxuICogUmVuZGVyaW5nIHR3byB0cmlhbmdsZXMgYnkgdXNpbmcgb25seSBmb3VyIHBvaW50cyBpcyBtYWRlIHBvc3NpYmxlIHRocm91Z2hcbiAqIHRoZSB1c2Ugb2YgaW5kaWNlcy5cbiAqXG4gKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgZmFzdGVyIHRoYW4gdGhlIDYgcG9pbnRzIC8gMiB0cmlhbmdsZXMgYXBwcm9hY2ggYW5kXG4gKiBzaG91bGQgaGFuZGxlIHRoaWNrbmVzcyBiZXR0ZXIgdGhhbiB3aXRoIGdsLkxJTkVTLlxuICpcbiAqIFRoaXMgdmVyc2lvbiBvZiB0aGUgc2hhZGVyIGJhbGFuY2VzIGdlb21ldHJ5IGNvbXB1dGF0aW9uIGV2ZW5seSBiZXR3ZWVuXG4gKiB0aGUgQ1BVICYgR1BVIChub3JtYWxzIGFyZSBjb21wdXRlZCBvbiB0aGUgQ1BVIHNpZGUpLlxuICogQG1vZHVsZVxuICovXG52YXIgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi91dGlsc1wiKTtcbnZhciBlZGdlX3ZlcnRfZ2xzbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFkZXJzL2VkZ2UudmVydC5nbHNsLmpzXCIpKTtcbnZhciBlZGdlX2ZyYWdfZ2xzbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFkZXJzL2VkZ2UuZnJhZy5nbHNsLmpzXCIpKTtcbnZhciBlZGdlXzEgPSByZXF1aXJlKFwiLi9jb21tb24vZWRnZVwiKTtcbnZhciBQT0lOVFMgPSA0LCBBVFRSSUJVVEVTID0gNSwgU1RSSURFID0gUE9JTlRTICogQVRUUklCVVRFUztcbnZhciBFZGdlUHJvZ3JhbSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRWRnZVByb2dyYW0sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRWRnZVByb2dyYW0oZ2wpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZ2wsIGVkZ2VfdmVydF9nbHNsXzEuZGVmYXVsdCwgZWRnZV9mcmFnX2dsc2xfMS5kZWZhdWx0LCBQT0lOVFMsIEFUVFJJQlVURVMpIHx8IHRoaXM7XG4gICAgICAgIC8vIEluaXRpYWxpemluZyBpbmRpY2VzIGJ1ZmZlclxuICAgICAgICB2YXIgaW5kaWNlc0J1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgICBpZiAoaW5kaWNlc0J1ZmZlciA9PT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVkZ2VQcm9ncmFtOiBlcnJvciB3aGlsZSBjcmVhdGluZyBpbmRpY2VzQnVmZmVyXCIpO1xuICAgICAgICBfdGhpcy5pbmRpY2VzQnVmZmVyID0gaW5kaWNlc0J1ZmZlcjtcbiAgICAgICAgLy8gTG9jYXRpb25zXG4gICAgICAgIF90aGlzLnBvc2l0aW9uTG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihfdGhpcy5wcm9ncmFtLCBcImFfcG9zaXRpb25cIik7XG4gICAgICAgIF90aGlzLmNvbG9yTG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihfdGhpcy5wcm9ncmFtLCBcImFfY29sb3JcIik7XG4gICAgICAgIF90aGlzLm5vcm1hbExvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oX3RoaXMucHJvZ3JhbSwgXCJhX25vcm1hbFwiKTtcbiAgICAgICAgdmFyIG1hdHJpeExvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKF90aGlzLnByb2dyYW0sIFwidV9tYXRyaXhcIik7XG4gICAgICAgIGlmIChtYXRyaXhMb2NhdGlvbiA9PT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVkZ2VQcm9ncmFtOiBlcnJvciB3aGlsZSBnZXR0aW5nIG1hdHJpeExvY2F0aW9uXCIpO1xuICAgICAgICBfdGhpcy5tYXRyaXhMb2NhdGlvbiA9IG1hdHJpeExvY2F0aW9uO1xuICAgICAgICB2YXIgY29ycmVjdGlvblJhdGlvTG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oX3RoaXMucHJvZ3JhbSwgXCJ1X2NvcnJlY3Rpb25SYXRpb1wiKTtcbiAgICAgICAgaWYgKGNvcnJlY3Rpb25SYXRpb0xvY2F0aW9uID09PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRWRnZVByb2dyYW06IGVycm9yIHdoaWxlIGdldHRpbmcgY29ycmVjdGlvblJhdGlvTG9jYXRpb25cIik7XG4gICAgICAgIF90aGlzLmNvcnJlY3Rpb25SYXRpb0xvY2F0aW9uID0gY29ycmVjdGlvblJhdGlvTG9jYXRpb247XG4gICAgICAgIHZhciBzcXJ0Wm9vbVJhdGlvTG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oX3RoaXMucHJvZ3JhbSwgXCJ1X3NxcnRab29tUmF0aW9cIik7XG4gICAgICAgIGlmIChzcXJ0Wm9vbVJhdGlvTG9jYXRpb24gPT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFZGdlUHJvZ3JhbTogZXJyb3Igd2hpbGUgZ2V0dGluZyBzcXJ0Wm9vbVJhdGlvTG9jYXRpb25cIik7XG4gICAgICAgIF90aGlzLnNxcnRab29tUmF0aW9Mb2NhdGlvbiA9IHNxcnRab29tUmF0aW9Mb2NhdGlvbjtcbiAgICAgICAgLy8gRW5hYmxpbmcgdGhlIE9FU19lbGVtZW50X2luZGV4X3VpbnQgZXh0ZW5zaW9uXG4gICAgICAgIC8vIE5PVEU6IG9uIG9sZGVyIEdQVXMsIHRoaXMgbWVhbnMgdGhhdCByZWFsbHkgbGFyZ2UgZ3JhcGhzIHdvbid0XG4gICAgICAgIC8vIGhhdmUgYWxsIHRoZWlyIGVkZ2VzIHJlbmRlcmVkLiBCdXQgaXQgc2VlbXMgdGhhdCB0aGVcbiAgICAgICAgLy8gYE9FU19lbGVtZW50X2luZGV4X3VpbnRgIGlzIHF1aXRlIGV2ZXJ5d2hlcmUgc28gd2UnbGwgaGFuZGxlXG4gICAgICAgIC8vIHRoZSBwb3RlbnRpYWwgaXNzdWUgaWYgaXQgcmVhbGx5IGFyaXNlcy5cbiAgICAgICAgLy8gTk9URTogd2hlbiB1c2luZyB3ZWJnbDIsIHRoZSBleHRlbnNpb24gaXMgZW5hYmxlZCBieSBkZWZhdWx0XG4gICAgICAgIF90aGlzLmNhblVzZTMyQml0c0luZGljZXMgPSAoMCwgdXRpbHNfMS5jYW5Vc2UzMkJpdHNJbmRpY2VzKShnbCk7XG4gICAgICAgIF90aGlzLkluZGljZXNBcnJheSA9IF90aGlzLmNhblVzZTMyQml0c0luZGljZXMgPyBVaW50MzJBcnJheSA6IFVpbnQxNkFycmF5O1xuICAgICAgICBfdGhpcy5pbmRpY2VzQXJyYXkgPSBuZXcgX3RoaXMuSW5kaWNlc0FycmF5KCk7XG4gICAgICAgIF90aGlzLmluZGljZXNUeXBlID0gX3RoaXMuY2FuVXNlMzJCaXRzSW5kaWNlcyA/IGdsLlVOU0lHTkVEX0lOVCA6IGdsLlVOU0lHTkVEX1NIT1JUO1xuICAgICAgICBfdGhpcy5iaW5kKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRWRnZVByb2dyYW0ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuaW5kaWNlc0J1ZmZlcik7XG4gICAgICAgIC8vIEJpbmRpbmdzXG4gICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMucG9zaXRpb25Mb2NhdGlvbik7XG4gICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMubm9ybWFsTG9jYXRpb24pO1xuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLmNvbG9yTG9jYXRpb24pO1xuICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHRoaXMucG9zaXRpb25Mb2NhdGlvbiwgMiwgZ2wuRkxPQVQsIGZhbHNlLCBBVFRSSUJVVEVTICogRmxvYXQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5ULCAwKTtcbiAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLm5vcm1hbExvY2F0aW9uLCAyLCBnbC5GTE9BVCwgZmFsc2UsIEFUVFJJQlVURVMgKiBGbG9hdDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQsIDgpO1xuICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHRoaXMuY29sb3JMb2NhdGlvbiwgNCwgZ2wuVU5TSUdORURfQllURSwgdHJ1ZSwgQVRUUklCVVRFUyAqIEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCwgMTYpO1xuICAgIH07XG4gICAgRWRnZVByb2dyYW0ucHJvdG90eXBlLmNvbXB1dGVJbmRpY2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbCA9IHRoaXMuYXJyYXkubGVuZ3RoIC8gQVRUUklCVVRFUztcbiAgICAgICAgdmFyIHNpemUgPSBsICsgbCAvIDI7XG4gICAgICAgIHZhciBpbmRpY2VzID0gbmV3IHRoaXMuSW5kaWNlc0FycmF5KHNpemUpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgYyA9IDA7IGkgPCBsOyBpICs9IDQpIHtcbiAgICAgICAgICAgIGluZGljZXNbYysrXSA9IGk7XG4gICAgICAgICAgICBpbmRpY2VzW2MrK10gPSBpICsgMTtcbiAgICAgICAgICAgIGluZGljZXNbYysrXSA9IGkgKyAyO1xuICAgICAgICAgICAgaW5kaWNlc1tjKytdID0gaSArIDI7XG4gICAgICAgICAgICBpbmRpY2VzW2MrK10gPSBpICsgMTtcbiAgICAgICAgICAgIGluZGljZXNbYysrXSA9IGkgKyAzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5kaWNlc0FycmF5ID0gaW5kaWNlcztcbiAgICB9O1xuICAgIEVkZ2VQcm9ncmFtLnByb3RvdHlwZS5idWZmZXJEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmJ1ZmZlckRhdGEuY2FsbCh0aGlzKTtcbiAgICAgICAgLy8gSW5kaWNlcyBkYXRhXG4gICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuaW5kaWNlc0FycmF5LCBnbC5TVEFUSUNfRFJBVyk7XG4gICAgfTtcbiAgICBFZGdlUHJvZ3JhbS5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uIChzb3VyY2VEYXRhLCB0YXJnZXREYXRhLCBkYXRhLCBoaWRkZW4sIG9mZnNldCkge1xuICAgICAgICBpZiAoaGlkZGVuKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpXzEgPSBvZmZzZXQgKiBTVFJJREUsIGwgPSBpXzEgKyBTVFJJREU7IGlfMSA8IGw7IGlfMSsrKVxuICAgICAgICAgICAgICAgIHRoaXMuYXJyYXlbaV8xXSA9IDA7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaWNrbmVzcyA9IGRhdGEuc2l6ZSB8fCAxLCB4MSA9IHNvdXJjZURhdGEueCwgeTEgPSBzb3VyY2VEYXRhLnksIHgyID0gdGFyZ2V0RGF0YS54LCB5MiA9IHRhcmdldERhdGEueSwgY29sb3IgPSAoMCwgdXRpbHNfMS5mbG9hdENvbG9yKShkYXRhLmNvbG9yKTtcbiAgICAgICAgLy8gQ29tcHV0aW5nIG5vcm1hbHNcbiAgICAgICAgdmFyIGR4ID0geDIgLSB4MSwgZHkgPSB5MiAtIHkxO1xuICAgICAgICB2YXIgbGVuID0gZHggKiBkeCArIGR5ICogZHksIG4xID0gMCwgbjIgPSAwO1xuICAgICAgICBpZiAobGVuKSB7XG4gICAgICAgICAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbik7XG4gICAgICAgICAgICBuMSA9IC1keSAqIGxlbiAqIHRoaWNrbmVzcztcbiAgICAgICAgICAgIG4yID0gZHggKiBsZW4gKiB0aGlja25lc3M7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGkgPSBQT0lOVFMgKiBBVFRSSUJVVEVTICogb2Zmc2V0O1xuICAgICAgICB2YXIgYXJyYXkgPSB0aGlzLmFycmF5O1xuICAgICAgICAvLyBGaXJzdCBwb2ludFxuICAgICAgICBhcnJheVtpKytdID0geDE7XG4gICAgICAgIGFycmF5W2krK10gPSB5MTtcbiAgICAgICAgYXJyYXlbaSsrXSA9IG4xO1xuICAgICAgICBhcnJheVtpKytdID0gbjI7XG4gICAgICAgIGFycmF5W2krK10gPSBjb2xvcjtcbiAgICAgICAgLy8gRmlyc3QgcG9pbnQgZmxpcHBlZFxuICAgICAgICBhcnJheVtpKytdID0geDE7XG4gICAgICAgIGFycmF5W2krK10gPSB5MTtcbiAgICAgICAgYXJyYXlbaSsrXSA9IC1uMTtcbiAgICAgICAgYXJyYXlbaSsrXSA9IC1uMjtcbiAgICAgICAgYXJyYXlbaSsrXSA9IGNvbG9yO1xuICAgICAgICAvLyBTZWNvbmQgcG9pbnRcbiAgICAgICAgYXJyYXlbaSsrXSA9IHgyO1xuICAgICAgICBhcnJheVtpKytdID0geTI7XG4gICAgICAgIGFycmF5W2krK10gPSBuMTtcbiAgICAgICAgYXJyYXlbaSsrXSA9IG4yO1xuICAgICAgICBhcnJheVtpKytdID0gY29sb3I7XG4gICAgICAgIC8vIFNlY29uZCBwb2ludCBmbGlwcGVkXG4gICAgICAgIGFycmF5W2krK10gPSB4MjtcbiAgICAgICAgYXJyYXlbaSsrXSA9IHkyO1xuICAgICAgICBhcnJheVtpKytdID0gLW4xO1xuICAgICAgICBhcnJheVtpKytdID0gLW4yO1xuICAgICAgICBhcnJheVtpXSA9IGNvbG9yO1xuICAgIH07XG4gICAgRWRnZVByb2dyYW0ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzTm90aGluZ1RvUmVuZGVyKCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIHZhciBwcm9ncmFtID0gdGhpcy5wcm9ncmFtO1xuICAgICAgICBnbC51c2VQcm9ncmFtKHByb2dyYW0pO1xuICAgICAgICBnbC51bmlmb3JtTWF0cml4M2Z2KHRoaXMubWF0cml4TG9jYXRpb24sIGZhbHNlLCBwYXJhbXMubWF0cml4KTtcbiAgICAgICAgZ2wudW5pZm9ybTFmKHRoaXMuc3FydFpvb21SYXRpb0xvY2F0aW9uLCBNYXRoLnNxcnQocGFyYW1zLnJhdGlvKSk7XG4gICAgICAgIGdsLnVuaWZvcm0xZih0aGlzLmNvcnJlY3Rpb25SYXRpb0xvY2F0aW9uLCBwYXJhbXMuY29ycmVjdGlvblJhdGlvKTtcbiAgICAgICAgLy8gRHJhd2luZzpcbiAgICAgICAgZ2wuZHJhd0VsZW1lbnRzKGdsLlRSSUFOR0xFUywgdGhpcy5pbmRpY2VzQXJyYXkubGVuZ3RoLCB0aGlzLmluZGljZXNUeXBlLCAwKTtcbiAgICB9O1xuICAgIHJldHVybiBFZGdlUHJvZ3JhbTtcbn0oZWRnZV8xLkFic3RyYWN0RWRnZVByb2dyYW0pKTtcbmV4cG9ydHMuZGVmYXVsdCA9IEVkZ2VQcm9ncmFtO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vdXRpbHNcIik7XG52YXIgbm9kZV9mYXN0X3ZlcnRfZ2xzbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFkZXJzL25vZGUuZmFzdC52ZXJ0Lmdsc2wuanNcIikpO1xudmFyIG5vZGVfZmFzdF9mcmFnX2dsc2xfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhZGVycy9ub2RlLmZhc3QuZnJhZy5nbHNsLmpzXCIpKTtcbnZhciBub2RlXzEgPSByZXF1aXJlKFwiLi9jb21tb24vbm9kZVwiKTtcbnZhciBQT0lOVFMgPSAxLCBBVFRSSUJVVEVTID0gNDtcbnZhciBOb2RlRmFzdFByb2dyYW0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE5vZGVGYXN0UHJvZ3JhbSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBOb2RlRmFzdFByb2dyYW0oZ2wpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZ2wsIG5vZGVfZmFzdF92ZXJ0X2dsc2xfMS5kZWZhdWx0LCBub2RlX2Zhc3RfZnJhZ19nbHNsXzEuZGVmYXVsdCwgUE9JTlRTLCBBVFRSSUJVVEVTKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5iaW5kKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgTm9kZUZhc3RQcm9ncmFtLnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24gKGRhdGEsIGhpZGRlbiwgb2Zmc2V0KSB7XG4gICAgICAgIHZhciBhcnJheSA9IHRoaXMuYXJyYXk7XG4gICAgICAgIHZhciBpID0gb2Zmc2V0ICogUE9JTlRTICogQVRUUklCVVRFUztcbiAgICAgICAgaWYgKGhpZGRlbikge1xuICAgICAgICAgICAgYXJyYXlbaSsrXSA9IDA7XG4gICAgICAgICAgICBhcnJheVtpKytdID0gMDtcbiAgICAgICAgICAgIGFycmF5W2krK10gPSAwO1xuICAgICAgICAgICAgYXJyYXlbaSsrXSA9IDA7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbG9yID0gKDAsIHV0aWxzXzEuZmxvYXRDb2xvcikoZGF0YS5jb2xvcik7XG4gICAgICAgIGFycmF5W2krK10gPSBkYXRhLng7XG4gICAgICAgIGFycmF5W2krK10gPSBkYXRhLnk7XG4gICAgICAgIGFycmF5W2krK10gPSBkYXRhLnNpemU7XG4gICAgICAgIGFycmF5W2ldID0gY29sb3I7XG4gICAgfTtcbiAgICBOb2RlRmFzdFByb2dyYW0ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzTm90aGluZ1RvUmVuZGVyKCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIHZhciBwcm9ncmFtID0gdGhpcy5wcm9ncmFtO1xuICAgICAgICBnbC51c2VQcm9ncmFtKHByb2dyYW0pO1xuICAgICAgICBnbC51bmlmb3JtMWYodGhpcy5yYXRpb0xvY2F0aW9uLCAxIC8gTWF0aC5zcXJ0KHBhcmFtcy5yYXRpbykpO1xuICAgICAgICBnbC51bmlmb3JtMWYodGhpcy5zY2FsZUxvY2F0aW9uLCBwYXJhbXMuc2NhbGluZ1JhdGlvKTtcbiAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDNmdih0aGlzLm1hdHJpeExvY2F0aW9uLCBmYWxzZSwgcGFyYW1zLm1hdHJpeCk7XG4gICAgICAgIGdsLmRyYXdBcnJheXMoZ2wuUE9JTlRTLCAwLCB0aGlzLmFycmF5Lmxlbmd0aCAvIEFUVFJJQlVURVMpO1xuICAgIH07XG4gICAgcmV0dXJuIE5vZGVGYXN0UHJvZ3JhbTtcbn0obm9kZV8xLkFic3RyYWN0Tm9kZVByb2dyYW0pKTtcbmV4cG9ydHMuZGVmYXVsdCA9IE5vZGVGYXN0UHJvZ3JhbTtcbiIsIigoKT0+e1widXNlIHN0cmljdFwiO3ZhciBlPXtkOihvLHIpPT57Zm9yKHZhciB0IGluIHIpZS5vKHIsdCkmJiFlLm8obyx0KSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sdCx7ZW51bWVyYWJsZTohMCxnZXQ6clt0XX0pfSxvOihlLG8pPT5PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxvKSxyOmU9PntcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfX0sbz17fTtlLnIobyksZS5kKG8se2RlZmF1bHQ6KCk9PnJ9KTtjb25zdCByPVwicHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxuXFxudmFyeWluZyB2ZWM0IHZfY29sb3I7XFxuXFxudm9pZCBtYWluKHZvaWQpIHtcXG4gIGdsX0ZyYWdDb2xvciA9IHZfY29sb3I7XFxufVxcblwiO21vZHVsZS5leHBvcnRzPW99KSgpOyIsIigoKT0+e1widXNlIHN0cmljdFwiO3ZhciBhPXtkOihlLHQpPT57Zm9yKHZhciBvIGluIHQpYS5vKHQsbykmJiFhLm8oZSxvKSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbyx7ZW51bWVyYWJsZTohMCxnZXQ6dFtvXX0pfSxvOihhLGUpPT5PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxlKSxyOmE9PntcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfX0sZT17fTthLnIoZSksYS5kKGUse2RlZmF1bHQ6KCk9PnR9KTtjb25zdCB0PVwiYXR0cmlidXRlIHZlYzIgYV9wb3NpdGlvbjtcXG5hdHRyaWJ1dGUgdmVjMiBhX25vcm1hbDtcXG5hdHRyaWJ1dGUgZmxvYXQgYV9yYWRpdXM7XFxuYXR0cmlidXRlIHZlYzQgYV9jb2xvcjtcXG5hdHRyaWJ1dGUgdmVjMyBhX2JhcnljZW50cmljO1xcblxcbnVuaWZvcm0gbWF0MyB1X21hdHJpeDtcXG51bmlmb3JtIGZsb2F0IHVfc3FydFpvb21SYXRpbztcXG51bmlmb3JtIGZsb2F0IHVfY29ycmVjdGlvblJhdGlvO1xcblxcbnZhcnlpbmcgdmVjNCB2X2NvbG9yO1xcblxcbmNvbnN0IGZsb2F0IG1pblRoaWNrbmVzcyA9IDEuNztcXG5jb25zdCBmbG9hdCBiaWFzID0gMjU1LjAgLyAyNTQuMDtcXG5jb25zdCBmbG9hdCBhcnJvd0hlYWRXaWR0aExlbmd0aFJhdGlvID0gMC42NjtcXG5jb25zdCBmbG9hdCBhcnJvd0hlYWRMZW5ndGhUaGlja25lc3NSYXRpbyA9IDIuNTtcXG5cXG52b2lkIG1haW4oKSB7XFxuICBmbG9hdCBub3JtYWxMZW5ndGggPSBsZW5ndGgoYV9ub3JtYWwpO1xcbiAgdmVjMiB1bml0Tm9ybWFsID0gYV9ub3JtYWwgLyBub3JtYWxMZW5ndGg7XFxuXFxuICAvLyBUaGVzZSBmaXJzdCBjb21wdXRhdGlvbnMgYXJlIHRha2VuIGZyb20gZWRnZS52ZXJ0Lmdsc2wgYW5kXFxuICAvLyBlZGdlLmNsYW1wZWQudmVydC5nbHNsLiBQbGVhc2UgcmVhZCBpdCB0byBnZXQgYmV0dGVyIGNvbW1lbnRzIG9uIHdoYXQnc1xcbiAgLy8gaGFwcGVuaW5nOlxcbiAgZmxvYXQgcGl4ZWxzVGhpY2tuZXNzID0gbWF4KG5vcm1hbExlbmd0aCwgbWluVGhpY2tuZXNzICogdV9zcXJ0Wm9vbVJhdGlvKTtcXG4gIGZsb2F0IHdlYkdMVGhpY2tuZXNzID0gcGl4ZWxzVGhpY2tuZXNzICogdV9jb3JyZWN0aW9uUmF0aW87XFxuICBmbG9hdCBhZGFwdGVkV2ViR0xUaGlja25lc3MgPSB3ZWJHTFRoaWNrbmVzcyAqIHVfc3FydFpvb21SYXRpbztcXG4gIGZsb2F0IGFkYXB0ZWRXZWJHTE5vZGVSYWRpdXMgPSBhX3JhZGl1cyAqIDIuMCAqIHVfY29ycmVjdGlvblJhdGlvICogdV9zcXJ0Wm9vbVJhdGlvO1xcbiAgZmxvYXQgYWRhcHRlZFdlYkdMQXJyb3dIZWFkTGVuZ3RoID0gYWRhcHRlZFdlYkdMVGhpY2tuZXNzICogMi4wICogYXJyb3dIZWFkTGVuZ3RoVGhpY2tuZXNzUmF0aW87XFxuICBmbG9hdCBhZGFwdGVkV2ViR0xBcnJvd0hlYWRIYWxmV2lkdGggPSBhZGFwdGVkV2ViR0xBcnJvd0hlYWRMZW5ndGggKiBhcnJvd0hlYWRXaWR0aExlbmd0aFJhdGlvIC8gMi4wO1xcblxcbiAgZmxvYXQgZGEgPSBhX2JhcnljZW50cmljLng7XFxuICBmbG9hdCBkYiA9IGFfYmFyeWNlbnRyaWMueTtcXG4gIGZsb2F0IGRjID0gYV9iYXJ5Y2VudHJpYy56O1xcblxcbiAgdmVjMiBkZWx0YSA9IHZlYzIoXFxuICAgICAgZGEgKiAoYWRhcHRlZFdlYkdMTm9kZVJhZGl1cyAqIHVuaXROb3JtYWwueSlcXG4gICAgKyBkYiAqICgoYWRhcHRlZFdlYkdMTm9kZVJhZGl1cyArIGFkYXB0ZWRXZWJHTEFycm93SGVhZExlbmd0aCkgKiB1bml0Tm9ybWFsLnkgKyBhZGFwdGVkV2ViR0xBcnJvd0hlYWRIYWxmV2lkdGggKiB1bml0Tm9ybWFsLngpXFxuICAgICsgZGMgKiAoKGFkYXB0ZWRXZWJHTE5vZGVSYWRpdXMgKyBhZGFwdGVkV2ViR0xBcnJvd0hlYWRMZW5ndGgpICogdW5pdE5vcm1hbC55IC0gYWRhcHRlZFdlYkdMQXJyb3dIZWFkSGFsZldpZHRoICogdW5pdE5vcm1hbC54KSxcXG5cXG4gICAgICBkYSAqICgtYWRhcHRlZFdlYkdMTm9kZVJhZGl1cyAqIHVuaXROb3JtYWwueClcXG4gICAgKyBkYiAqICgtKGFkYXB0ZWRXZWJHTE5vZGVSYWRpdXMgKyBhZGFwdGVkV2ViR0xBcnJvd0hlYWRMZW5ndGgpICogdW5pdE5vcm1hbC54ICsgYWRhcHRlZFdlYkdMQXJyb3dIZWFkSGFsZldpZHRoICogdW5pdE5vcm1hbC55KVxcbiAgICArIGRjICogKC0oYWRhcHRlZFdlYkdMTm9kZVJhZGl1cyArIGFkYXB0ZWRXZWJHTEFycm93SGVhZExlbmd0aCkgKiB1bml0Tm9ybWFsLnggLSBhZGFwdGVkV2ViR0xBcnJvd0hlYWRIYWxmV2lkdGggKiB1bml0Tm9ybWFsLnkpXFxuICApO1xcblxcbiAgdmVjMiBwb3NpdGlvbiA9ICh1X21hdHJpeCAqIHZlYzMoYV9wb3NpdGlvbiArIGRlbHRhLCAxKSkueHk7XFxuXFxuICBnbF9Qb3NpdGlvbiA9IHZlYzQocG9zaXRpb24sIDAsIDEpO1xcblxcbiAgLy8gRXh0cmFjdCB0aGUgY29sb3I6XFxuICB2X2NvbG9yID0gYV9jb2xvcjtcXG4gIHZfY29sb3IuYSAqPSBiaWFzO1xcbn1cXG5cIjttb2R1bGUuZXhwb3J0cz1lfSkoKTsiLCIoKCk9PntcInVzZSBzdHJpY3RcIjt2YXIgZT17ZDoobyxuKT0+e2Zvcih2YXIgdCBpbiBuKWUubyhuLHQpJiYhZS5vKG8sdCkmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLHQse2VudW1lcmFibGU6ITAsZ2V0Om5bdF19KX0sbzooZSxvKT0+T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbykscjplPT57XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX19LG89e307ZS5yKG8pLGUuZChvLHtkZWZhdWx0OigpPT5ufSk7Y29uc3Qgbj1cImF0dHJpYnV0ZSB2ZWM0IGFfY29sb3I7XFxuYXR0cmlidXRlIHZlYzIgYV9ub3JtYWw7XFxuYXR0cmlidXRlIHZlYzIgYV9wb3NpdGlvbjtcXG5hdHRyaWJ1dGUgZmxvYXQgYV9yYWRpdXM7XFxuXFxudW5pZm9ybSBtYXQzIHVfbWF0cml4O1xcbnVuaWZvcm0gZmxvYXQgdV9zcXJ0Wm9vbVJhdGlvO1xcbnVuaWZvcm0gZmxvYXQgdV9jb3JyZWN0aW9uUmF0aW87XFxuXFxudmFyeWluZyB2ZWM0IHZfY29sb3I7XFxudmFyeWluZyB2ZWMyIHZfbm9ybWFsO1xcbnZhcnlpbmcgZmxvYXQgdl90aGlja25lc3M7XFxuXFxuY29uc3QgZmxvYXQgbWluVGhpY2tuZXNzID0gMS43O1xcbmNvbnN0IGZsb2F0IGJpYXMgPSAyNTUuMCAvIDI1NC4wO1xcbmNvbnN0IGZsb2F0IGFycm93SGVhZExlbmd0aFRoaWNrbmVzc1JhdGlvID0gMi41O1xcblxcbnZvaWQgbWFpbigpIHtcXG4gIGZsb2F0IG5vcm1hbExlbmd0aCA9IGxlbmd0aChhX25vcm1hbCk7XFxuICB2ZWMyIHVuaXROb3JtYWwgPSBhX25vcm1hbCAvIG5vcm1hbExlbmd0aDtcXG5cXG4gIC8vIFRoZXNlIGZpcnN0IGNvbXB1dGF0aW9ucyBhcmUgdGFrZW4gZnJvbSBlZGdlLnZlcnQuZ2xzbC4gUGxlYXNlIHJlYWQgaXQgdG9cXG4gIC8vIGdldCBiZXR0ZXIgY29tbWVudHMgb24gd2hhdCdzIGhhcHBlbmluZzpcXG4gIGZsb2F0IHBpeGVsc1RoaWNrbmVzcyA9IG1heChub3JtYWxMZW5ndGgsIG1pblRoaWNrbmVzcyAqIHVfc3FydFpvb21SYXRpbyk7XFxuICBmbG9hdCB3ZWJHTFRoaWNrbmVzcyA9IHBpeGVsc1RoaWNrbmVzcyAqIHVfY29ycmVjdGlvblJhdGlvO1xcbiAgZmxvYXQgYWRhcHRlZFdlYkdMVGhpY2tuZXNzID0gd2ViR0xUaGlja25lc3MgKiB1X3NxcnRab29tUmF0aW87XFxuXFxuICAvLyBIZXJlLCB3ZSBtb3ZlIHRoZSBwb2ludCB0byBsZWF2ZSBzcGFjZSBmb3IgdGhlIGFycm93IGhlYWQ6XFxuICBmbG9hdCBkaXJlY3Rpb24gPSBzaWduKGFfcmFkaXVzKTtcXG4gIGZsb2F0IGFkYXB0ZWRXZWJHTE5vZGVSYWRpdXMgPSBkaXJlY3Rpb24gKiBhX3JhZGl1cyAqIDIuMCAqIHVfY29ycmVjdGlvblJhdGlvICogdV9zcXJ0Wm9vbVJhdGlvO1xcbiAgZmxvYXQgYWRhcHRlZFdlYkdMQXJyb3dIZWFkTGVuZ3RoID0gYWRhcHRlZFdlYkdMVGhpY2tuZXNzICogMi4wICogYXJyb3dIZWFkTGVuZ3RoVGhpY2tuZXNzUmF0aW87XFxuXFxuICB2ZWMyIGNvbXBlbnNhdGlvblZlY3RvciA9IHZlYzIoLWRpcmVjdGlvbiAqIHVuaXROb3JtYWwueSwgZGlyZWN0aW9uICogdW5pdE5vcm1hbC54KSAqIChhZGFwdGVkV2ViR0xOb2RlUmFkaXVzICsgYWRhcHRlZFdlYkdMQXJyb3dIZWFkTGVuZ3RoKTtcXG5cXG4gIC8vIEhlcmUgaXMgdGhlIHByb3BlciBwb3NpdGlvbiBvZiB0aGUgdmVydGV4XFxuICBnbF9Qb3NpdGlvbiA9IHZlYzQoKHVfbWF0cml4ICogdmVjMyhhX3Bvc2l0aW9uICsgdW5pdE5vcm1hbCAqIGFkYXB0ZWRXZWJHTFRoaWNrbmVzcyArIGNvbXBlbnNhdGlvblZlY3RvciwgMSkpLnh5LCAwLCAxKTtcXG5cXG4gIHZfdGhpY2tuZXNzID0gd2ViR0xUaGlja25lc3MgLyB1X3NxcnRab29tUmF0aW87XFxuXFxuICB2X25vcm1hbCA9IHVuaXROb3JtYWw7XFxuICB2X2NvbG9yID0gYV9jb2xvcjtcXG4gIHZfY29sb3IuYSAqPSBiaWFzO1xcbn1cXG5cIjttb2R1bGUuZXhwb3J0cz1vfSkoKTsiLCIoKCk9PntcInVzZSBzdHJpY3RcIjt2YXIgZT17ZDoobix0KT0+e2Zvcih2YXIgbyBpbiB0KWUubyh0LG8pJiYhZS5vKG4sbykmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLG8se2VudW1lcmFibGU6ITAsZ2V0OnRbb119KX0sbzooZSxuKT0+T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbikscjplPT57XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX19LG49e307ZS5yKG4pLGUuZChuLHtkZWZhdWx0OigpPT50fSk7Y29uc3QgdD1cInByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcblxcbnZhcnlpbmcgdmVjNCB2X2NvbG9yO1xcbnZhcnlpbmcgdmVjMiB2X25vcm1hbDtcXG52YXJ5aW5nIGZsb2F0IHZfdGhpY2tuZXNzO1xcblxcbmNvbnN0IGZsb2F0IGZlYXRoZXIgPSAwLjAwMTtcXG5jb25zdCB2ZWM0IHRyYW5zcGFyZW50ID0gdmVjNCgwLjAsIDAuMCwgMC4wLCAwLjApO1xcblxcbnZvaWQgbWFpbih2b2lkKSB7XFxuICBmbG9hdCBkaXN0ID0gbGVuZ3RoKHZfbm9ybWFsKSAqIHZfdGhpY2tuZXNzO1xcblxcbiAgZmxvYXQgdCA9IHNtb290aHN0ZXAoXFxuICAgIHZfdGhpY2tuZXNzIC0gZmVhdGhlcixcXG4gICAgdl90aGlja25lc3MsXFxuICAgIGRpc3RcXG4gICk7XFxuXFxuICBnbF9GcmFnQ29sb3IgPSBtaXgodl9jb2xvciwgdHJhbnNwYXJlbnQsIHQpO1xcbn1cXG5cIjttb2R1bGUuZXhwb3J0cz1ufSkoKTsiLCIoKCk9PntcInVzZSBzdHJpY3RcIjt2YXIgZT17ZDoobixvKT0+e2Zvcih2YXIgdCBpbiBvKWUubyhvLHQpJiYhZS5vKG4sdCkmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLHQse2VudW1lcmFibGU6ITAsZ2V0Om9bdF19KX0sbzooZSxuKT0+T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbikscjplPT57XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX19LG49e307ZS5yKG4pLGUuZChuLHtkZWZhdWx0OigpPT5vfSk7Y29uc3Qgbz0nYXR0cmlidXRlIHZlYzQgYV9jb2xvcjtcXG5hdHRyaWJ1dGUgdmVjMiBhX25vcm1hbDtcXG5hdHRyaWJ1dGUgdmVjMiBhX3Bvc2l0aW9uO1xcblxcbnVuaWZvcm0gbWF0MyB1X21hdHJpeDtcXG51bmlmb3JtIGZsb2F0IHVfc3FydFpvb21SYXRpbztcXG51bmlmb3JtIGZsb2F0IHVfY29ycmVjdGlvblJhdGlvO1xcblxcbnZhcnlpbmcgdmVjNCB2X2NvbG9yO1xcbnZhcnlpbmcgdmVjMiB2X25vcm1hbDtcXG52YXJ5aW5nIGZsb2F0IHZfdGhpY2tuZXNzO1xcblxcbmNvbnN0IGZsb2F0IG1pblRoaWNrbmVzcyA9IDEuNztcXG5jb25zdCBmbG9hdCBiaWFzID0gMjU1LjAgLyAyNTQuMDtcXG5cXG52b2lkIG1haW4oKSB7XFxuICBmbG9hdCBub3JtYWxMZW5ndGggPSBsZW5ndGgoYV9ub3JtYWwpO1xcbiAgdmVjMiB1bml0Tm9ybWFsID0gYV9ub3JtYWwgLyBub3JtYWxMZW5ndGg7XFxuXFxuICAvLyBXZSByZXF1aXJlIGVkZ2VzIHRvIGJlIGF0IGxlYXN0IGBtaW5UaGlja25lc3NgIHBpeGVscyB0aGljayAqb24gc2NyZWVuKlxcbiAgLy8gKHNvIHdlIG5lZWQgdG8gY29tcGVuc2F0ZSB0aGUgU1FSVCB6b29tIHJhdGlvKTpcXG4gIGZsb2F0IHBpeGVsc1RoaWNrbmVzcyA9IG1heChub3JtYWxMZW5ndGgsIG1pblRoaWNrbmVzcyAqIHVfc3FydFpvb21SYXRpbyk7XFxuXFxuICAvLyBUaGVuLCB3ZSBuZWVkIHRvIHJldHJpZXZlIHRoZSBub3JtYWxpemVkIHRoaWNrbmVzcyBvZiB0aGUgZWRnZSBpbiB0aGUgV2ViR0xcXG4gIC8vIHJlZmVyZW50aWFsIChpbiBhIChbMCwgMV0sIFswLCAxXSkgc3BhY2UpLCB1c2luZyBvdXIgXCJtYWdpY1wiIGNvcnJlY3Rpb25cXG4gIC8vIHJhdGlvOlxcbiAgZmxvYXQgd2ViR0xUaGlja25lc3MgPSBwaXhlbHNUaGlja25lc3MgKiB1X2NvcnJlY3Rpb25SYXRpbztcXG5cXG4gIC8vIEZpbmFsbHksIHdlIGFkYXB0IHRoZSBlZGdlIHRoaWNrbmVzcyB0byB0aGUgXCJTUVJUIHJ1bGVcIiBpbiBzaWdtYSAoc28gdGhhdFxcbiAgLy8gaXRlbXMgYXJlIG5vdCB0b28gYmlnIHdoZW4gem9vbWVkIGluLCBhbmQgbm90IHRvbyBzbWFsbCB3aGVuIHpvb21lZCBvdXQpLlxcbiAgLy8gVGhlIGV4YWN0IGNvbXB1dGF0aW9uIHNob3VsZCBiZSBgYWRhcHRlZCA9IHZhbHVlICogem9vbSAvIHNxcnQoem9vbSlgLCBidXRcXG4gIC8vIGl0XFwncyBzaW1wbGVyIGxpa2UgdGhpczpcXG4gIGZsb2F0IGFkYXB0ZWRXZWJHTFRoaWNrbmVzcyA9IHdlYkdMVGhpY2tuZXNzICogdV9zcXJ0Wm9vbVJhdGlvO1xcblxcbiAgLy8gSGVyZSBpcyB0aGUgcHJvcGVyIHBvc2l0aW9uIG9mIHRoZSB2ZXJ0ZXhcXG4gIGdsX1Bvc2l0aW9uID0gdmVjNCgodV9tYXRyaXggKiB2ZWMzKGFfcG9zaXRpb24gKyB1bml0Tm9ybWFsICogYWRhcHRlZFdlYkdMVGhpY2tuZXNzLCAxKSkueHksIDAsIDEpO1xcblxcbiAgLy8gRm9yIHRoZSBmcmFnbWVudCBzaGFkZXIgdGhvdWdoLCB3ZSBuZWVkIGEgdGhpY2tuZXNzIHRoYXQgdGFrZXMgdGhlIFwibWFnaWNcIlxcbiAgLy8gY29ycmVjdGlvbiByYXRpbyBpbnRvIGFjY291bnQgKGFzIGluIHdlYkdMVGhpY2tuZXNzKSwgYnV0IHNvIHRoYXQgdGhlXFxuICAvLyBhbnRpYWxpYXNpbmcgZWZmZWN0IGRvZXMgbm90IGRlcGVuZCBvbiB0aGUgem9vbSBsZXZlbC4gU28gaGVyZVxcJ3MgeWV0XFxuICAvLyBhbm90aGVyIHRoaWNrbmVzcyB2ZXJzaW9uOlxcbiAgdl90aGlja25lc3MgPSB3ZWJHTFRoaWNrbmVzcyAvIHVfc3FydFpvb21SYXRpbztcXG5cXG4gIHZfbm9ybWFsID0gdW5pdE5vcm1hbDtcXG4gIHZfY29sb3IgPSBhX2NvbG9yO1xcbiAgdl9jb2xvci5hICo9IGJpYXM7XFxufVxcbic7bW9kdWxlLmV4cG9ydHM9bn0pKCk7IiwiKCgpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9e2Q6KG4sbyk9Pntmb3IodmFyIHQgaW4gbyllLm8obyx0KSYmIWUubyhuLHQpJiZPYmplY3QuZGVmaW5lUHJvcGVydHkobix0LHtlbnVtZXJhYmxlOiEwLGdldDpvW3RdfSl9LG86KGUsbik9Pk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG4pLHI6ZT0+e1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9fSxuPXt9O2UucihuKSxlLmQobix7ZGVmYXVsdDooKT0+b30pO2NvbnN0IG89XCJwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG5cXG52YXJ5aW5nIHZlYzQgdl9jb2xvcjtcXG52YXJ5aW5nIGZsb2F0IHZfYm9yZGVyO1xcblxcbmNvbnN0IGZsb2F0IHJhZGl1cyA9IDAuNTtcXG5jb25zdCB2ZWM0IHRyYW5zcGFyZW50ID0gdmVjNCgwLjAsIDAuMCwgMC4wLCAwLjApO1xcblxcbnZvaWQgbWFpbih2b2lkKSB7XFxuICB2ZWMyIG0gPSBnbF9Qb2ludENvb3JkIC0gdmVjMigwLjUsIDAuNSk7XFxuICBmbG9hdCBkaXN0ID0gcmFkaXVzIC0gbGVuZ3RoKG0pO1xcblxcbiAgZmxvYXQgdCA9IDAuMDtcXG4gIGlmIChkaXN0ID4gdl9ib3JkZXIpXFxuICAgIHQgPSAxLjA7XFxuICBlbHNlIGlmIChkaXN0ID4gMC4wKVxcbiAgICB0ID0gZGlzdCAvIHZfYm9yZGVyO1xcblxcbiAgZ2xfRnJhZ0NvbG9yID0gbWl4KHRyYW5zcGFyZW50LCB2X2NvbG9yLCB0KTtcXG59XFxuXCI7bW9kdWxlLmV4cG9ydHM9bn0pKCk7IiwiKCgpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIG89e2Q6KHQsZSk9Pntmb3IodmFyIG4gaW4gZSlvLm8oZSxuKSYmIW8ubyh0LG4pJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodCxuLHtlbnVtZXJhYmxlOiEwLGdldDplW25dfSl9LG86KG8sdCk9Pk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLHQpLHI6bz0+e1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9fSx0PXt9O28ucih0KSxvLmQodCx7ZGVmYXVsdDooKT0+ZX0pO2NvbnN0IGU9XCJhdHRyaWJ1dGUgdmVjMiBhX3Bvc2l0aW9uO1xcbmF0dHJpYnV0ZSBmbG9hdCBhX3NpemU7XFxuYXR0cmlidXRlIHZlYzQgYV9jb2xvcjtcXG5cXG51bmlmb3JtIGZsb2F0IHVfcmF0aW87XFxudW5pZm9ybSBmbG9hdCB1X3NjYWxlO1xcbnVuaWZvcm0gbWF0MyB1X21hdHJpeDtcXG5cXG52YXJ5aW5nIHZlYzQgdl9jb2xvcjtcXG52YXJ5aW5nIGZsb2F0IHZfYm9yZGVyO1xcblxcbmNvbnN0IGZsb2F0IGJpYXMgPSAyNTUuMCAvIDI1NC4wO1xcblxcbnZvaWQgbWFpbigpIHtcXG4gIGdsX1Bvc2l0aW9uID0gdmVjNChcXG4gICAgKHVfbWF0cml4ICogdmVjMyhhX3Bvc2l0aW9uLCAxKSkueHksXFxuICAgIDAsXFxuICAgIDFcXG4gICk7XFxuXFxuICAvLyBNdWx0aXBseSB0aGUgcG9pbnQgc2l6ZSB0d2ljZTpcXG4gIC8vICAtIHggU0NBTElOR19SQVRJTyB0byBjb3JyZWN0IHRoZSBjYW52YXMgc2NhbGluZ1xcbiAgLy8gIC0geCAyIHRvIGNvcnJlY3QgdGhlIGZvcm11bGFlXFxuICBnbF9Qb2ludFNpemUgPSBhX3NpemUgKiB1X3JhdGlvICogdV9zY2FsZSAqIDIuMDtcXG5cXG4gIHZfYm9yZGVyID0gKDEuMCAvIHVfcmF0aW8pICogKDAuNSAvIGFfc2l6ZSk7XFxuXFxuICAvLyBFeHRyYWN0IHRoZSBjb2xvcjpcXG4gIHZfY29sb3IgPSBhX2NvbG9yO1xcbiAgdl9jb2xvci5hICo9IGJpYXM7XFxufVxcblwiO21vZHVsZS5leHBvcnRzPXR9KSgpOyIsIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBTaWdtYS5qcyBTaGFkZXIgVXRpbHNcbiAqID09PT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBDb2RlIHVzZWQgdG8gbG9hZCBzaWdtYSdzIHNoYWRlcnMuXG4gKiBAbW9kdWxlXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9hZFByb2dyYW0gPSBleHBvcnRzLmxvYWRGcmFnbWVudFNoYWRlciA9IGV4cG9ydHMubG9hZFZlcnRleFNoYWRlciA9IHZvaWQgMDtcbi8qKlxuICogRnVuY3Rpb24gdXNlZCB0byBsb2FkIGEgc2hhZGVyLlxuICovXG5mdW5jdGlvbiBsb2FkU2hhZGVyKHR5cGUsIGdsLCBzb3VyY2UpIHtcbiAgICB2YXIgZ2xUeXBlID0gdHlwZSA9PT0gXCJWRVJURVhcIiA/IGdsLlZFUlRFWF9TSEFERVIgOiBnbC5GUkFHTUVOVF9TSEFERVI7XG4gICAgLy8gQ3JlYXRpbmcgdGhlIHNoYWRlclxuICAgIHZhciBzaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoZ2xUeXBlKTtcbiAgICBpZiAoc2hhZGVyID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImxvYWRTaGFkZXI6IGVycm9yIHdoaWxlIGNyZWF0aW5nIHRoZSBzaGFkZXJcIik7XG4gICAgfVxuICAgIC8vIExvYWRpbmcgc291cmNlXG4gICAgZ2wuc2hhZGVyU291cmNlKHNoYWRlciwgc291cmNlKTtcbiAgICAvLyBDb21waWxpbmcgdGhlIHNoYWRlclxuICAgIGdsLmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcbiAgICAvLyBSZXRyaWV2aW5nIGNvbXBpbGF0aW9uIHN0YXR1c1xuICAgIHZhciBzdWNjZXNzZnVsbHlDb21waWxlZCA9IGdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKTtcbiAgICAvLyBUaHJvd2luZyBpZiBzb21ldGhpbmcgd2VudCBhd3J5XG4gICAgaWYgKCFzdWNjZXNzZnVsbHlDb21waWxlZCkge1xuICAgICAgICB2YXIgaW5mb0xvZyA9IGdsLmdldFNoYWRlckluZm9Mb2coc2hhZGVyKTtcbiAgICAgICAgZ2wuZGVsZXRlU2hhZGVyKHNoYWRlcik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImxvYWRTaGFkZXI6IGVycm9yIHdoaWxlIGNvbXBpbGluZyB0aGUgc2hhZGVyOlxcblwiLmNvbmNhdChpbmZvTG9nLCBcIlxcblwiKS5jb25jYXQoc291cmNlKSk7XG4gICAgfVxuICAgIHJldHVybiBzaGFkZXI7XG59XG5mdW5jdGlvbiBsb2FkVmVydGV4U2hhZGVyKGdsLCBzb3VyY2UpIHtcbiAgICByZXR1cm4gbG9hZFNoYWRlcihcIlZFUlRFWFwiLCBnbCwgc291cmNlKTtcbn1cbmV4cG9ydHMubG9hZFZlcnRleFNoYWRlciA9IGxvYWRWZXJ0ZXhTaGFkZXI7XG5mdW5jdGlvbiBsb2FkRnJhZ21lbnRTaGFkZXIoZ2wsIHNvdXJjZSkge1xuICAgIHJldHVybiBsb2FkU2hhZGVyKFwiRlJBR01FTlRcIiwgZ2wsIHNvdXJjZSk7XG59XG5leHBvcnRzLmxvYWRGcmFnbWVudFNoYWRlciA9IGxvYWRGcmFnbWVudFNoYWRlcjtcbi8qKlxuICogRnVuY3Rpb24gdXNlZCB0byBsb2FkIGEgcHJvZ3JhbS5cbiAqL1xuZnVuY3Rpb24gbG9hZFByb2dyYW0oZ2wsIHNoYWRlcnMpIHtcbiAgICB2YXIgcHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcbiAgICBpZiAocHJvZ3JhbSA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJsb2FkUHJvZ3JhbTogZXJyb3Igd2hpbGUgY3JlYXRpbmcgdGhlIHByb2dyYW0uXCIpO1xuICAgIH1cbiAgICB2YXIgaSwgbDtcbiAgICAvLyBBdHRhY2hpbmcgdGhlIHNoYWRlcnNcbiAgICBmb3IgKGkgPSAwLCBsID0gc2hhZGVycy5sZW5ndGg7IGkgPCBsOyBpKyspXG4gICAgICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCBzaGFkZXJzW2ldKTtcbiAgICBnbC5saW5rUHJvZ3JhbShwcm9ncmFtKTtcbiAgICAvLyBDaGVja2luZyBzdGF0dXNcbiAgICB2YXIgc3VjY2Vzc2Z1bGx5TGlua2VkID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5MSU5LX1NUQVRVUyk7XG4gICAgaWYgKCFzdWNjZXNzZnVsbHlMaW5rZWQpIHtcbiAgICAgICAgZ2wuZGVsZXRlUHJvZ3JhbShwcm9ncmFtKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibG9hZFByb2dyYW06IGVycm9yIHdoaWxlIGxpbmtpbmcgdGhlIHByb2dyYW0uXCIpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvZ3JhbTtcbn1cbmV4cG9ydHMubG9hZFByb2dyYW0gPSBsb2FkUHJvZ3JhbTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXNvbHZlU2V0dGluZ3MgPSBleHBvcnRzLnZhbGlkYXRlU2V0dGluZ3MgPSBleHBvcnRzLkRFRkFVTFRfRURHRV9QUk9HUkFNX0NMQVNTRVMgPSBleHBvcnRzLkRFRkFVTFRfTk9ERV9QUk9HUkFNX0NMQVNTRVMgPSBleHBvcnRzLkRFRkFVTFRfU0VUVElOR1MgPSB2b2lkIDA7XG52YXIgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xudmFyIGxhYmVsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vcmVuZGVyaW5nL2NhbnZhcy9sYWJlbFwiKSk7XG52YXIgaG92ZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9yZW5kZXJpbmcvY2FudmFzL2hvdmVyXCIpKTtcbnZhciBlZGdlX2xhYmVsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vcmVuZGVyaW5nL2NhbnZhcy9lZGdlLWxhYmVsXCIpKTtcbnZhciBub2RlX2Zhc3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9yZW5kZXJpbmcvd2ViZ2wvcHJvZ3JhbXMvbm9kZS5mYXN0XCIpKTtcbnZhciBlZGdlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vcmVuZGVyaW5nL3dlYmdsL3Byb2dyYW1zL2VkZ2VcIikpO1xudmFyIGVkZ2VfYXJyb3dfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9yZW5kZXJpbmcvd2ViZ2wvcHJvZ3JhbXMvZWRnZS5hcnJvd1wiKSk7XG5leHBvcnRzLkRFRkFVTFRfU0VUVElOR1MgPSB7XG4gICAgLy8gUGVyZm9ybWFuY2VcbiAgICBoaWRlRWRnZXNPbk1vdmU6IGZhbHNlLFxuICAgIGhpZGVMYWJlbHNPbk1vdmU6IGZhbHNlLFxuICAgIHJlbmRlckxhYmVsczogdHJ1ZSxcbiAgICByZW5kZXJFZGdlTGFiZWxzOiBmYWxzZSxcbiAgICBlbmFibGVFZGdlQ2xpY2tFdmVudHM6IGZhbHNlLFxuICAgIGVuYWJsZUVkZ2VXaGVlbEV2ZW50czogZmFsc2UsXG4gICAgZW5hYmxlRWRnZUhvdmVyRXZlbnRzOiBmYWxzZSxcbiAgICAvLyBDb21wb25lbnQgcmVuZGVyaW5nXG4gICAgZGVmYXVsdE5vZGVDb2xvcjogXCIjOTk5XCIsXG4gICAgZGVmYXVsdE5vZGVUeXBlOiBcImNpcmNsZVwiLFxuICAgIGRlZmF1bHRFZGdlQ29sb3I6IFwiI2NjY1wiLFxuICAgIGRlZmF1bHRFZGdlVHlwZTogXCJsaW5lXCIsXG4gICAgbGFiZWxGb250OiBcIkFyaWFsXCIsXG4gICAgbGFiZWxTaXplOiAxNCxcbiAgICBsYWJlbFdlaWdodDogXCJub3JtYWxcIixcbiAgICBsYWJlbENvbG9yOiB7IGNvbG9yOiBcIiMwMDBcIiB9LFxuICAgIGVkZ2VMYWJlbEZvbnQ6IFwiQXJpYWxcIixcbiAgICBlZGdlTGFiZWxTaXplOiAxNCxcbiAgICBlZGdlTGFiZWxXZWlnaHQ6IFwibm9ybWFsXCIsXG4gICAgZWRnZUxhYmVsQ29sb3I6IHsgYXR0cmlidXRlOiBcImNvbG9yXCIgfSxcbiAgICBzdGFnZVBhZGRpbmc6IDMwLFxuICAgIC8vIExhYmVsc1xuICAgIGxhYmVsRGVuc2l0eTogMSxcbiAgICBsYWJlbEdyaWRDZWxsU2l6ZTogMTAwLFxuICAgIGxhYmVsUmVuZGVyZWRTaXplVGhyZXNob2xkOiA2LFxuICAgIC8vIFJlZHVjZXJzXG4gICAgbm9kZVJlZHVjZXI6IG51bGwsXG4gICAgZWRnZVJlZHVjZXI6IG51bGwsXG4gICAgLy8gRmVhdHVyZXNcbiAgICB6SW5kZXg6IGZhbHNlLFxuICAgIG1pbkNhbWVyYVJhdGlvOiBudWxsLFxuICAgIG1heENhbWVyYVJhdGlvOiBudWxsLFxuICAgIC8vIFJlbmRlcmVyc1xuICAgIGxhYmVsUmVuZGVyZXI6IGxhYmVsXzEuZGVmYXVsdCxcbiAgICBob3ZlclJlbmRlcmVyOiBob3Zlcl8xLmRlZmF1bHQsXG4gICAgZWRnZUxhYmVsUmVuZGVyZXI6IGVkZ2VfbGFiZWxfMS5kZWZhdWx0LFxuICAgIC8vIExpZmVjeWNsZVxuICAgIGFsbG93SW52YWxpZENvbnRhaW5lcjogZmFsc2UsXG4gICAgLy8gUHJvZ3JhbSBjbGFzc2VzXG4gICAgbm9kZVByb2dyYW1DbGFzc2VzOiB7fSxcbiAgICBub2RlSG92ZXJQcm9ncmFtQ2xhc3Nlczoge30sXG4gICAgZWRnZVByb2dyYW1DbGFzc2VzOiB7fSxcbn07XG5leHBvcnRzLkRFRkFVTFRfTk9ERV9QUk9HUkFNX0NMQVNTRVMgPSB7XG4gICAgY2lyY2xlOiBub2RlX2Zhc3RfMS5kZWZhdWx0LFxufTtcbmV4cG9ydHMuREVGQVVMVF9FREdFX1BST0dSQU1fQ0xBU1NFUyA9IHtcbiAgICBhcnJvdzogZWRnZV9hcnJvd18xLmRlZmF1bHQsXG4gICAgbGluZTogZWRnZV8xLmRlZmF1bHQsXG59O1xuZnVuY3Rpb24gdmFsaWRhdGVTZXR0aW5ncyhzZXR0aW5ncykge1xuICAgIGlmICh0eXBlb2Ygc2V0dGluZ3MubGFiZWxEZW5zaXR5ICE9PSBcIm51bWJlclwiIHx8IHNldHRpbmdzLmxhYmVsRGVuc2l0eSA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2V0dGluZ3M6IGludmFsaWQgYGxhYmVsRGVuc2l0eWAuIEV4cGVjdGluZyBhIHBvc2l0aXZlIG51bWJlci5cIik7XG4gICAgfVxuICAgIHZhciBtaW5DYW1lcmFSYXRpbyA9IHNldHRpbmdzLm1pbkNhbWVyYVJhdGlvLCBtYXhDYW1lcmFSYXRpbyA9IHNldHRpbmdzLm1heENhbWVyYVJhdGlvO1xuICAgIGlmICh0eXBlb2YgbWluQ2FtZXJhUmF0aW8gPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIG1heENhbWVyYVJhdGlvID09PSBcIm51bWJlclwiICYmIG1heENhbWVyYVJhdGlvIDwgbWluQ2FtZXJhUmF0aW8pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2V0dGluZ3M6IGludmFsaWQgY2FtZXJhIHJhdGlvIGJvdW5kYXJpZXMuIEV4cGVjdGluZyBgbWF4Q2FtZXJhUmF0aW9gIHRvIGJlIGdyZWF0ZXIgdGhhbiBgbWluQ2FtZXJhUmF0aW9gLlwiKTtcbiAgICB9XG59XG5leHBvcnRzLnZhbGlkYXRlU2V0dGluZ3MgPSB2YWxpZGF0ZVNldHRpbmdzO1xuZnVuY3Rpb24gcmVzb2x2ZVNldHRpbmdzKHNldHRpbmdzKSB7XG4gICAgdmFyIHJlc29sdmVkU2V0dGluZ3MgPSAoMCwgdXRpbHNfMS5hc3NpZ24pKHt9LCBleHBvcnRzLkRFRkFVTFRfU0VUVElOR1MsIHNldHRpbmdzKTtcbiAgICByZXNvbHZlZFNldHRpbmdzLm5vZGVQcm9ncmFtQ2xhc3NlcyA9ICgwLCB1dGlsc18xLmFzc2lnbikoe30sIGV4cG9ydHMuREVGQVVMVF9OT0RFX1BST0dSQU1fQ0xBU1NFUywgcmVzb2x2ZWRTZXR0aW5ncy5ub2RlUHJvZ3JhbUNsYXNzZXMpO1xuICAgIHJlc29sdmVkU2V0dGluZ3MuZWRnZVByb2dyYW1DbGFzc2VzID0gKDAsIHV0aWxzXzEuYXNzaWduKSh7fSwgZXhwb3J0cy5ERUZBVUxUX0VER0VfUFJPR1JBTV9DTEFTU0VTLCByZXNvbHZlZFNldHRpbmdzLmVkZ2VQcm9ncmFtQ2xhc3Nlcyk7XG4gICAgcmV0dXJuIHJlc29sdmVkU2V0dGluZ3M7XG59XG5leHBvcnRzLnJlc29sdmVTZXR0aW5ncyA9IHJlc29sdmVTZXR0aW5ncztcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX192YWx1ZXMgPSAodGhpcyAmJiB0aGlzLl9fdmFsdWVzKSB8fCBmdW5jdGlvbihvKSB7XG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZXh0ZW5kXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIkB5b21ndWl0aGVyZWFsL2hlbHBlcnMvZXh0ZW5kXCIpKTtcbnZhciBjYW1lcmFfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jb3JlL2NhbWVyYVwiKSk7XG52YXIgbW91c2VfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jb3JlL2NhcHRvcnMvbW91c2VcIikpO1xudmFyIHF1YWR0cmVlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vY29yZS9xdWFkdHJlZVwiKSk7XG52YXIgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xudmFyIHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbnZhciBsYWJlbHNfMSA9IHJlcXVpcmUoXCIuL2NvcmUvbGFiZWxzXCIpO1xudmFyIHNldHRpbmdzXzEgPSByZXF1aXJlKFwiLi9zZXR0aW5nc1wiKTtcbnZhciB0b3VjaF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvcmUvY2FwdG9ycy90b3VjaFwiKSk7XG52YXIgbWF0cmljZXNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzL21hdHJpY2VzXCIpO1xudmFyIGVkZ2VfY29sbGlzaW9uc18xID0gcmVxdWlyZShcIi4vdXRpbHMvZWRnZS1jb2xsaXNpb25zXCIpO1xuLyoqXG4gKiBDb25zdGFudHMuXG4gKi9cbnZhciBYX0xBQkVMX01BUkdJTiA9IDE1MDtcbnZhciBZX0xBQkVMX01BUkdJTiA9IDUwO1xuLyoqXG4gKiBJbXBvcnRhbnQgZnVuY3Rpb25zLlxuICovXG5mdW5jdGlvbiBhcHBseU5vZGVEZWZhdWx0cyhzZXR0aW5ncywga2V5LCBkYXRhKSB7XG4gICAgaWYgKCFkYXRhLmhhc093blByb3BlcnR5KFwieFwiKSB8fCAhZGF0YS5oYXNPd25Qcm9wZXJ0eShcInlcIikpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNpZ21hOiBjb3VsZCBub3QgZmluZCBhIHZhbGlkIHBvc2l0aW9uICh4LCB5KSBmb3Igbm9kZSBcXFwiXCIuY29uY2F0KGtleSwgXCJcXFwiLiBBbGwgeW91ciBub2RlcyBtdXN0IGhhdmUgYSBudW1iZXIgXFxcInhcXFwiIGFuZCBcXFwieVxcXCIuIE1heWJlIHlvdXIgZm9yZ290IHRvIGFwcGx5IGEgbGF5b3V0IG9yIHlvdXIgXFxcIm5vZGVSZWR1Y2VyXFxcIiBpcyBub3QgcmV0dXJuaW5nIHRoZSBjb3JyZWN0IGRhdGE/XCIpKTtcbiAgICBpZiAoIWRhdGEuY29sb3IpXG4gICAgICAgIGRhdGEuY29sb3IgPSBzZXR0aW5ncy5kZWZhdWx0Tm9kZUNvbG9yO1xuICAgIGlmICghZGF0YS5sYWJlbCAmJiBkYXRhLmxhYmVsICE9PSBcIlwiKVxuICAgICAgICBkYXRhLmxhYmVsID0gbnVsbDtcbiAgICBpZiAoZGF0YS5sYWJlbCAhPT0gdW5kZWZpbmVkICYmIGRhdGEubGFiZWwgIT09IG51bGwpXG4gICAgICAgIGRhdGEubGFiZWwgPSBcIlwiICsgZGF0YS5sYWJlbDtcbiAgICBlbHNlXG4gICAgICAgIGRhdGEubGFiZWwgPSBudWxsO1xuICAgIGlmICghZGF0YS5zaXplKVxuICAgICAgICBkYXRhLnNpemUgPSAyO1xuICAgIGlmICghZGF0YS5oYXNPd25Qcm9wZXJ0eShcImhpZGRlblwiKSlcbiAgICAgICAgZGF0YS5oaWRkZW4gPSBmYWxzZTtcbiAgICBpZiAoIWRhdGEuaGFzT3duUHJvcGVydHkoXCJoaWdobGlnaHRlZFwiKSlcbiAgICAgICAgZGF0YS5oaWdobGlnaHRlZCA9IGZhbHNlO1xuICAgIGlmICghZGF0YS5oYXNPd25Qcm9wZXJ0eShcImZvcmNlTGFiZWxcIikpXG4gICAgICAgIGRhdGEuZm9yY2VMYWJlbCA9IGZhbHNlO1xuICAgIGlmICghZGF0YS50eXBlIHx8IGRhdGEudHlwZSA9PT0gXCJcIilcbiAgICAgICAgZGF0YS50eXBlID0gc2V0dGluZ3MuZGVmYXVsdE5vZGVUeXBlO1xuICAgIGlmICghZGF0YS56SW5kZXgpXG4gICAgICAgIGRhdGEuekluZGV4ID0gMDtcbiAgICByZXR1cm4gZGF0YTtcbn1cbmZ1bmN0aW9uIGFwcGx5RWRnZURlZmF1bHRzKHNldHRpbmdzLCBrZXksIGRhdGEpIHtcbiAgICBpZiAoIWRhdGEuY29sb3IpXG4gICAgICAgIGRhdGEuY29sb3IgPSBzZXR0aW5ncy5kZWZhdWx0RWRnZUNvbG9yO1xuICAgIGlmICghZGF0YS5sYWJlbClcbiAgICAgICAgZGF0YS5sYWJlbCA9IFwiXCI7XG4gICAgaWYgKCFkYXRhLnNpemUpXG4gICAgICAgIGRhdGEuc2l6ZSA9IDAuNTtcbiAgICBpZiAoIWRhdGEuaGFzT3duUHJvcGVydHkoXCJoaWRkZW5cIikpXG4gICAgICAgIGRhdGEuaGlkZGVuID0gZmFsc2U7XG4gICAgaWYgKCFkYXRhLmhhc093blByb3BlcnR5KFwiZm9yY2VMYWJlbFwiKSlcbiAgICAgICAgZGF0YS5mb3JjZUxhYmVsID0gZmFsc2U7XG4gICAgaWYgKCFkYXRhLnR5cGUgfHwgZGF0YS50eXBlID09PSBcIlwiKVxuICAgICAgICBkYXRhLnR5cGUgPSBzZXR0aW5ncy5kZWZhdWx0RWRnZVR5cGU7XG4gICAgaWYgKCFkYXRhLnpJbmRleClcbiAgICAgICAgZGF0YS56SW5kZXggPSAwO1xuICAgIHJldHVybiBkYXRhO1xufVxuLyoqXG4gKiBNYWluIGNsYXNzLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtHcmFwaH0gICAgICAgZ3JhcGggICAgIC0gR3JhcGggdG8gcmVuZGVyLlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29udGFpbmVyIC0gRE9NIGNvbnRhaW5lciBpbiB3aGljaCB0byByZW5kZXIuXG4gKiBAcGFyYW0ge29iamVjdH0gICAgICBzZXR0aW5ncyAgLSBPcHRpb25hbCBzZXR0aW5ncy5cbiAqL1xudmFyIFNpZ21hID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTaWdtYSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTaWdtYShncmFwaCwgY29udGFpbmVyLCBzZXR0aW5ncykge1xuICAgICAgICBpZiAoc2V0dGluZ3MgPT09IHZvaWQgMCkgeyBzZXR0aW5ncyA9IHt9OyB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmVsZW1lbnRzID0ge307XG4gICAgICAgIF90aGlzLmNhbnZhc0NvbnRleHRzID0ge307XG4gICAgICAgIF90aGlzLndlYkdMQ29udGV4dHMgPSB7fTtcbiAgICAgICAgX3RoaXMuYWN0aXZlTGlzdGVuZXJzID0ge307XG4gICAgICAgIF90aGlzLnF1YWR0cmVlID0gbmV3IHF1YWR0cmVlXzEuZGVmYXVsdCgpO1xuICAgICAgICBfdGhpcy5sYWJlbEdyaWQgPSBuZXcgbGFiZWxzXzEuTGFiZWxHcmlkKCk7XG4gICAgICAgIF90aGlzLm5vZGVEYXRhQ2FjaGUgPSB7fTtcbiAgICAgICAgX3RoaXMuZWRnZURhdGFDYWNoZSA9IHt9O1xuICAgICAgICBfdGhpcy5ub2Rlc1dpdGhGb3JjZWRMYWJlbHMgPSBbXTtcbiAgICAgICAgX3RoaXMuZWRnZXNXaXRoRm9yY2VkTGFiZWxzID0gW107XG4gICAgICAgIF90aGlzLm5vZGVFeHRlbnQgPSB7IHg6IFswLCAxXSwgeTogWzAsIDFdIH07XG4gICAgICAgIF90aGlzLm1hdHJpeCA9ICgwLCBtYXRyaWNlc18xLmlkZW50aXR5KSgpO1xuICAgICAgICBfdGhpcy5pbnZNYXRyaXggPSAoMCwgbWF0cmljZXNfMS5pZGVudGl0eSkoKTtcbiAgICAgICAgX3RoaXMuY29ycmVjdGlvblJhdGlvID0gMTtcbiAgICAgICAgX3RoaXMuY3VzdG9tQkJveCA9IG51bGw7XG4gICAgICAgIF90aGlzLm5vcm1hbGl6YXRpb25GdW5jdGlvbiA9ICgwLCB1dGlsc18xLmNyZWF0ZU5vcm1hbGl6YXRpb25GdW5jdGlvbikoe1xuICAgICAgICAgICAgeDogWzAsIDFdLFxuICAgICAgICAgICAgeTogWzAsIDFdLFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gQ2FjaGU6XG4gICAgICAgIF90aGlzLmNhbWVyYVNpemVSYXRpbyA9IDE7XG4gICAgICAgIC8vIFN0YXJ0aW5nIGRpbWVuc2lvbnMgYW5kIHBpeGVsIHJhdGlvXG4gICAgICAgIF90aGlzLndpZHRoID0gMDtcbiAgICAgICAgX3RoaXMuaGVpZ2h0ID0gMDtcbiAgICAgICAgX3RoaXMucGl4ZWxSYXRpbyA9ICgwLCB1dGlsc18xLmdldFBpeGVsUmF0aW8pKCk7XG4gICAgICAgIC8vIFN0YXRlXG4gICAgICAgIF90aGlzLmRpc3BsYXllZExhYmVscyA9IG5ldyBTZXQoKTtcbiAgICAgICAgX3RoaXMuaGlnaGxpZ2h0ZWROb2RlcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgX3RoaXMuaG92ZXJlZE5vZGUgPSBudWxsO1xuICAgICAgICBfdGhpcy5ob3ZlcmVkRWRnZSA9IG51bGw7XG4gICAgICAgIF90aGlzLnJlbmRlckZyYW1lID0gbnVsbDtcbiAgICAgICAgX3RoaXMucmVuZGVySGlnaGxpZ2h0ZWROb2Rlc0ZyYW1lID0gbnVsbDtcbiAgICAgICAgX3RoaXMubmVlZFRvUHJvY2VzcyA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5uZWVkVG9Tb2Z0UHJvY2VzcyA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5jaGVja0VkZ2VzRXZlbnRzRnJhbWUgPSBudWxsO1xuICAgICAgICAvLyBQcm9ncmFtc1xuICAgICAgICBfdGhpcy5ub2RlUHJvZ3JhbXMgPSB7fTtcbiAgICAgICAgX3RoaXMubm9kZUhvdmVyUHJvZ3JhbXMgPSB7fTtcbiAgICAgICAgX3RoaXMuZWRnZVByb2dyYW1zID0ge307XG4gICAgICAgIC8vIFJlc29sdmluZyBzZXR0aW5nc1xuICAgICAgICBfdGhpcy5zZXR0aW5ncyA9ICgwLCBzZXR0aW5nc18xLnJlc29sdmVTZXR0aW5ncykoc2V0dGluZ3MpO1xuICAgICAgICAvLyBWYWxpZGF0aW5nXG4gICAgICAgICgwLCBzZXR0aW5nc18xLnZhbGlkYXRlU2V0dGluZ3MpKF90aGlzLnNldHRpbmdzKTtcbiAgICAgICAgKDAsIHV0aWxzXzEudmFsaWRhdGVHcmFwaCkoZ3JhcGgpO1xuICAgICAgICBpZiAoIShjb250YWluZXIgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaWdtYTogY29udGFpbmVyIHNob3VsZCBiZSBhbiBodG1sIGVsZW1lbnQuXCIpO1xuICAgICAgICAvLyBQcm9wZXJ0aWVzXG4gICAgICAgIF90aGlzLmdyYXBoID0gZ3JhcGg7XG4gICAgICAgIF90aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgLy8gSW5pdGlhbGl6aW5nIGNvbnRleHRzXG4gICAgICAgIF90aGlzLmNyZWF0ZVdlYkdMQ29udGV4dChcImVkZ2VzXCIsIHsgcHJlc2VydmVEcmF3aW5nQnVmZmVyOiB0cnVlIH0pO1xuICAgICAgICBfdGhpcy5jcmVhdGVDYW52YXNDb250ZXh0KFwiZWRnZUxhYmVsc1wiKTtcbiAgICAgICAgX3RoaXMuY3JlYXRlV2ViR0xDb250ZXh0KFwibm9kZXNcIik7XG4gICAgICAgIF90aGlzLmNyZWF0ZUNhbnZhc0NvbnRleHQoXCJsYWJlbHNcIik7XG4gICAgICAgIF90aGlzLmNyZWF0ZUNhbnZhc0NvbnRleHQoXCJob3ZlcnNcIik7XG4gICAgICAgIF90aGlzLmNyZWF0ZVdlYkdMQ29udGV4dChcImhvdmVyTm9kZXNcIik7XG4gICAgICAgIF90aGlzLmNyZWF0ZUNhbnZhc0NvbnRleHQoXCJtb3VzZVwiKTtcbiAgICAgICAgLy8gQmxlbmRpbmdcbiAgICAgICAgZm9yICh2YXIga2V5IGluIF90aGlzLndlYkdMQ29udGV4dHMpIHtcbiAgICAgICAgICAgIHZhciBnbCA9IF90aGlzLndlYkdMQ29udGV4dHNba2V5XTtcbiAgICAgICAgICAgIGdsLmJsZW5kRnVuYyhnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuICAgICAgICAgICAgZ2wuZW5hYmxlKGdsLkJMRU5EKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBMb2FkaW5nIHByb2dyYW1zXG4gICAgICAgIGZvciAodmFyIHR5cGUgaW4gX3RoaXMuc2V0dGluZ3Mubm9kZVByb2dyYW1DbGFzc2VzKSB7XG4gICAgICAgICAgICB2YXIgTm9kZVByb2dyYW1DbGFzcyA9IF90aGlzLnNldHRpbmdzLm5vZGVQcm9ncmFtQ2xhc3Nlc1t0eXBlXTtcbiAgICAgICAgICAgIF90aGlzLm5vZGVQcm9ncmFtc1t0eXBlXSA9IG5ldyBOb2RlUHJvZ3JhbUNsYXNzKF90aGlzLndlYkdMQ29udGV4dHMubm9kZXMsIF90aGlzKTtcbiAgICAgICAgICAgIHZhciBOb2RlSG92ZXJQcm9ncmFtID0gTm9kZVByb2dyYW1DbGFzcztcbiAgICAgICAgICAgIGlmICh0eXBlIGluIF90aGlzLnNldHRpbmdzLm5vZGVIb3ZlclByb2dyYW1DbGFzc2VzKSB7XG4gICAgICAgICAgICAgICAgTm9kZUhvdmVyUHJvZ3JhbSA9IF90aGlzLnNldHRpbmdzLm5vZGVIb3ZlclByb2dyYW1DbGFzc2VzW3R5cGVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMubm9kZUhvdmVyUHJvZ3JhbXNbdHlwZV0gPSBuZXcgTm9kZUhvdmVyUHJvZ3JhbShfdGhpcy53ZWJHTENvbnRleHRzLmhvdmVyTm9kZXMsIF90aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciB0eXBlIGluIF90aGlzLnNldHRpbmdzLmVkZ2VQcm9ncmFtQ2xhc3Nlcykge1xuICAgICAgICAgICAgdmFyIEVkZ2VQcm9ncmFtQ2xhc3MgPSBfdGhpcy5zZXR0aW5ncy5lZGdlUHJvZ3JhbUNsYXNzZXNbdHlwZV07XG4gICAgICAgICAgICBfdGhpcy5lZGdlUHJvZ3JhbXNbdHlwZV0gPSBuZXcgRWRnZVByb2dyYW1DbGFzcyhfdGhpcy53ZWJHTENvbnRleHRzLmVkZ2VzLCBfdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSW5pdGlhbCByZXNpemVcbiAgICAgICAgX3RoaXMucmVzaXplKCk7XG4gICAgICAgIC8vIEluaXRpYWxpemluZyB0aGUgY2FtZXJhXG4gICAgICAgIF90aGlzLmNhbWVyYSA9IG5ldyBjYW1lcmFfMS5kZWZhdWx0KCk7XG4gICAgICAgIC8vIEJpbmRpbmcgY2FtZXJhIGV2ZW50c1xuICAgICAgICBfdGhpcy5iaW5kQ2FtZXJhSGFuZGxlcnMoKTtcbiAgICAgICAgLy8gSW5pdGlhbGl6aW5nIGNhcHRvcnNcbiAgICAgICAgX3RoaXMubW91c2VDYXB0b3IgPSBuZXcgbW91c2VfMS5kZWZhdWx0KF90aGlzLmVsZW1lbnRzLm1vdXNlLCBfdGhpcyk7XG4gICAgICAgIF90aGlzLnRvdWNoQ2FwdG9yID0gbmV3IHRvdWNoXzEuZGVmYXVsdChfdGhpcy5lbGVtZW50cy5tb3VzZSwgX3RoaXMpO1xuICAgICAgICAvLyBCaW5kaW5nIGV2ZW50IGhhbmRsZXJzXG4gICAgICAgIF90aGlzLmJpbmRFdmVudEhhbmRsZXJzKCk7XG4gICAgICAgIC8vIEJpbmRpbmcgZ3JhcGggaGFuZGxlcnNcbiAgICAgICAgX3RoaXMuYmluZEdyYXBoSGFuZGxlcnMoKTtcbiAgICAgICAgLy8gVHJpZ2dlciBldmVudHVhbCBzZXR0aW5ncy1yZWxhdGVkIHRoaW5nc1xuICAgICAgICBfdGhpcy5oYW5kbGVTZXR0aW5nc1VwZGF0ZSgpO1xuICAgICAgICAvLyBQcm9jZXNzaW5nIGRhdGEgZm9yIHRoZSBmaXJzdCB0aW1lICYgcmVuZGVyXG4gICAgICAgIF90aGlzLnByb2Nlc3MoKTtcbiAgICAgICAgX3RoaXMucmVuZGVyKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogSW50ZXJuYWwgbWV0aG9kcy5cbiAgICAgKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBmdW5jdGlvbiB1c2VkIHRvIGNyZWF0ZSBhIGNhbnZhcyBlbGVtZW50LlxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gaWQgLSBDb250ZXh0J3MgaWQuXG4gICAgICogQHJldHVybiB7U2lnbWF9XG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLmNyZWF0ZUNhbnZhcyA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgY2FudmFzID0gKDAsIHV0aWxzXzEuY3JlYXRlRWxlbWVudCkoXCJjYW52YXNcIiwge1xuICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgY2xhc3M6IFwic2lnbWEtXCIuY29uY2F0KGlkKSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaWRdID0gY2FudmFzO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChjYW52YXMpO1xuICAgICAgICByZXR1cm4gY2FudmFzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgZnVuY3Rpb24gdXNlZCB0byBjcmVhdGUgYSBjYW52YXMgY29udGV4dCBhbmQgYWRkIHRoZSByZWxldmFudFxuICAgICAqIERPTSBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gaWQgLSBDb250ZXh0J3MgaWQuXG4gICAgICogQHJldHVybiB7U2lnbWF9XG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLmNyZWF0ZUNhbnZhc0NvbnRleHQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgdmFyIGNhbnZhcyA9IHRoaXMuY3JlYXRlQ2FudmFzKGlkKTtcbiAgICAgICAgdmFyIGNvbnRleHRPcHRpb25zID0ge1xuICAgICAgICAgICAgcHJlc2VydmVEcmF3aW5nQnVmZmVyOiBmYWxzZSxcbiAgICAgICAgICAgIGFudGlhbGlhczogZmFsc2UsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2FudmFzQ29udGV4dHNbaWRdID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiLCBjb250ZXh0T3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgZnVuY3Rpb24gdXNlZCB0byBjcmVhdGUgYSBjYW52YXMgY29udGV4dCBhbmQgYWRkIHRoZSByZWxldmFudFxuICAgICAqIERPTSBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gIGlkICAgICAgLSBDb250ZXh0J3MgaWQuXG4gICAgICogQHBhcmFtICB7b2JqZWN0P30gb3B0aW9ucyAtICNnZXRDb250ZXh0IHBhcmFtcyB0byBvdmVycmlkZSAob3B0aW9uYWwpXG4gICAgICogQHJldHVybiB7U2lnbWF9XG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLmNyZWF0ZVdlYkdMQ29udGV4dCA9IGZ1bmN0aW9uIChpZCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgY2FudmFzID0gdGhpcy5jcmVhdGVDYW52YXMoaWQpO1xuICAgICAgICB2YXIgY29udGV4dE9wdGlvbnMgPSBfX2Fzc2lnbih7IHByZXNlcnZlRHJhd2luZ0J1ZmZlcjogZmFsc2UsIGFudGlhbGlhczogZmFsc2UgfSwgKG9wdGlvbnMgfHwge30pKTtcbiAgICAgICAgdmFyIGNvbnRleHQ7XG4gICAgICAgIC8vIEZpcnN0IHdlIHRyeSB3ZWJnbDIgZm9yIGFuIGVhc3kgcGVyZm9ybWFuY2UgYm9vc3RcbiAgICAgICAgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwid2ViZ2wyXCIsIGNvbnRleHRPcHRpb25zKTtcbiAgICAgICAgLy8gRWxzZSB3ZSBmYWxsIGJhY2sgdG8gd2ViZ2xcbiAgICAgICAgaWYgKCFjb250ZXh0KVxuICAgICAgICAgICAgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwid2ViZ2xcIiwgY29udGV4dE9wdGlvbnMpO1xuICAgICAgICAvLyBFZGdlLCBJIGFtIGxvb2tpbmcgcmlnaHQgYXQgeW91Li4uXG4gICAgICAgIGlmICghY29udGV4dClcbiAgICAgICAgICAgIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcImV4cGVyaW1lbnRhbC13ZWJnbFwiLCBjb250ZXh0T3B0aW9ucyk7XG4gICAgICAgIHRoaXMud2ViR0xDb250ZXh0c1tpZF0gPSBjb250ZXh0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCBiaW5kaW5nIGNhbWVyYSBoYW5kbGVycy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1NpZ21hfVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5iaW5kQ2FtZXJhSGFuZGxlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmNhbWVyYSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLl9zY2hlZHVsZVJlZnJlc2goKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jYW1lcmEub24oXCJ1cGRhdGVkXCIsIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmNhbWVyYSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRoYXQgY2hlY2tzIHdoZXRoZXIgb3Igbm90IGEgbm9kZSBjb2xsaWRlcyB3aXRoIGEgZ2l2ZW4gcG9zaXRpb24uXG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLm1vdXNlSXNPbk5vZGUgPSBmdW5jdGlvbiAoX2EsIF9iLCBzaXplKSB7XG4gICAgICAgIHZhciB4ID0gX2EueCwgeSA9IF9hLnk7XG4gICAgICAgIHZhciBub2RlWCA9IF9iLngsIG5vZGVZID0gX2IueTtcbiAgICAgICAgcmV0dXJuICh4ID4gbm9kZVggLSBzaXplICYmXG4gICAgICAgICAgICB4IDwgbm9kZVggKyBzaXplICYmXG4gICAgICAgICAgICB5ID4gbm9kZVkgLSBzaXplICYmXG4gICAgICAgICAgICB5IDwgbm9kZVkgKyBzaXplICYmXG4gICAgICAgICAgICBNYXRoLnNxcnQoTWF0aC5wb3coeCAtIG5vZGVYLCAyKSArIE1hdGgucG93KHkgLSBub2RlWSwgMikpIDwgc2l6ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdGhhdCByZXR1cm5zIGFsbCBub2RlcyBpbiBxdWFkIGF0IGEgZ2l2ZW4gcG9zaXRpb24uXG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLmdldFF1YWROb2RlcyA9IGZ1bmN0aW9uIChwb3NpdGlvbikge1xuICAgICAgICB2YXIgbW91c2VHcmFwaFBvc2l0aW9uID0gdGhpcy52aWV3cG9ydFRvRnJhbWVkR3JhcGgocG9zaXRpb24pO1xuICAgICAgICByZXR1cm4gdGhpcy5xdWFkdHJlZS5wb2ludChtb3VzZUdyYXBoUG9zaXRpb24ueCwgMSAtIG1vdXNlR3JhcGhQb3NpdGlvbi55KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0aGF0IHJldHVybnMgdGhlIGNsb3Nlc3Qgbm9kZSB0byBhIGdpdmVuIHBvc2l0aW9uLlxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5nZXROb2RlQXRQb3NpdGlvbiA9IGZ1bmN0aW9uIChwb3NpdGlvbikge1xuICAgICAgICB2YXIgeCA9IHBvc2l0aW9uLngsIHkgPSBwb3NpdGlvbi55O1xuICAgICAgICB2YXIgcXVhZE5vZGVzID0gdGhpcy5nZXRRdWFkTm9kZXMocG9zaXRpb24pO1xuICAgICAgICAvLyBXZSB3aWxsIGhvdmVyIHRoZSBub2RlIHdob3NlIGNlbnRlciBpcyBjbG9zZXN0IHRvIG1vdXNlXG4gICAgICAgIHZhciBtaW5EaXN0YW5jZSA9IEluZmluaXR5LCBub2RlQXRQb3NpdGlvbiA9IG51bGw7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gcXVhZE5vZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdmFyIG5vZGUgPSBxdWFkTm9kZXNbaV07XG4gICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMubm9kZURhdGFDYWNoZVtub2RlXTtcbiAgICAgICAgICAgIHZhciBub2RlUG9zaXRpb24gPSB0aGlzLmZyYW1lZEdyYXBoVG9WaWV3cG9ydChkYXRhKTtcbiAgICAgICAgICAgIHZhciBzaXplID0gdGhpcy5zY2FsZVNpemUoZGF0YS5zaXplKTtcbiAgICAgICAgICAgIGlmICghZGF0YS5oaWRkZW4gJiYgdGhpcy5tb3VzZUlzT25Ob2RlKHBvc2l0aW9uLCBub2RlUG9zaXRpb24sIHNpemUpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRpc3RhbmNlID0gTWF0aC5zcXJ0KE1hdGgucG93KHggLSBub2RlUG9zaXRpb24ueCwgMikgKyBNYXRoLnBvdyh5IC0gbm9kZVBvc2l0aW9uLnksIDIpKTtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBzb3J0IGJ5IG1pbiBzaXplIGFsc28gZm9yIGNhc2VzIHdoZXJlIGNlbnRlciBpcyB0aGUgc2FtZVxuICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZSA8IG1pbkRpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIG1pbkRpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVBdFBvc2l0aW9uID0gbm9kZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vZGVBdFBvc2l0aW9uO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIGJpbmRpbmcgZXZlbnQgaGFuZGxlcnMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtTaWdtYX1cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUuYmluZEV2ZW50SGFuZGxlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8vIEhhbmRsaW5nIHdpbmRvdyByZXNpemVcbiAgICAgICAgdGhpcy5hY3RpdmVMaXN0ZW5lcnMuaGFuZGxlUmVzaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMubmVlZFRvU29mdFByb2Nlc3MgPSB0cnVlO1xuICAgICAgICAgICAgX3RoaXMuX3NjaGVkdWxlUmVmcmVzaCgpO1xuICAgICAgICB9O1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLmFjdGl2ZUxpc3RlbmVycy5oYW5kbGVSZXNpemUpO1xuICAgICAgICAvLyBIYW5kbGluZyBtb3VzZSBtb3ZlXG4gICAgICAgIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmhhbmRsZU1vdmUgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdmFyIGJhc2VFdmVudCA9IHtcbiAgICAgICAgICAgICAgICBldmVudDogZSxcbiAgICAgICAgICAgICAgICBwcmV2ZW50U2lnbWFEZWZhdWx0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudFNpZ21hRGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIG5vZGVUb0hvdmVyID0gX3RoaXMuZ2V0Tm9kZUF0UG9zaXRpb24oZSk7XG4gICAgICAgICAgICBpZiAobm9kZVRvSG92ZXIgJiYgX3RoaXMuaG92ZXJlZE5vZGUgIT09IG5vZGVUb0hvdmVyICYmICFfdGhpcy5ub2RlRGF0YUNhY2hlW25vZGVUb0hvdmVyXS5oaWRkZW4pIHtcbiAgICAgICAgICAgICAgICAvLyBIYW5kbGluZyBwYXNzaW5nIGZyb20gb25lIG5vZGUgdG8gdGhlIG90aGVyIGRpcmVjdGx5XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmhvdmVyZWROb2RlKVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KFwibGVhdmVOb2RlXCIsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBiYXNlRXZlbnQpLCB7IG5vZGU6IF90aGlzLmhvdmVyZWROb2RlIH0pKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5ob3ZlcmVkTm9kZSA9IG5vZGVUb0hvdmVyO1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoXCJlbnRlck5vZGVcIiwgX19hc3NpZ24oX19hc3NpZ24oe30sIGJhc2VFdmVudCksIHsgbm9kZTogbm9kZVRvSG92ZXIgfSkpO1xuICAgICAgICAgICAgICAgIF90aGlzLnNjaGVkdWxlSGlnaGxpZ2h0ZWROb2Rlc1JlbmRlcigpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENoZWNraW5nIGlmIHRoZSBob3ZlcmVkIG5vZGUgaXMgc3RpbGwgaG92ZXJlZFxuICAgICAgICAgICAgaWYgKF90aGlzLmhvdmVyZWROb2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBfdGhpcy5ub2RlRGF0YUNhY2hlW190aGlzLmhvdmVyZWROb2RlXTtcbiAgICAgICAgICAgICAgICB2YXIgcG9zID0gX3RoaXMuZnJhbWVkR3JhcGhUb1ZpZXdwb3J0KGRhdGEpO1xuICAgICAgICAgICAgICAgIHZhciBzaXplID0gX3RoaXMuc2NhbGVTaXplKGRhdGEuc2l6ZSk7XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5tb3VzZUlzT25Ob2RlKGUsIHBvcywgc2l6ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBfdGhpcy5ob3ZlcmVkTm9kZTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaG92ZXJlZE5vZGUgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KFwibGVhdmVOb2RlXCIsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBiYXNlRXZlbnQpLCB7IG5vZGU6IG5vZGUgfSkpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zY2hlZHVsZUhpZ2hsaWdodGVkTm9kZXNSZW5kZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfdGhpcy5zZXR0aW5ncy5lbmFibGVFZGdlSG92ZXJFdmVudHMgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jaGVja0VkZ2VIb3ZlckV2ZW50cyhiYXNlRXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoX3RoaXMuc2V0dGluZ3MuZW5hYmxlRWRnZUhvdmVyRXZlbnRzID09PSBcImRlYm91bmNlXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmNoZWNrRWRnZXNFdmVudHNGcmFtZSlcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2hlY2tFZGdlc0V2ZW50c0ZyYW1lID0gKDAsIHV0aWxzXzEucmVxdWVzdEZyYW1lKShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jaGVja0VkZ2VIb3ZlckV2ZW50cyhiYXNlRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2hlY2tFZGdlc0V2ZW50c0ZyYW1lID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIEhhbmRsaW5nIGNsaWNrXG4gICAgICAgIHZhciBjcmVhdGVNb3VzZUxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50VHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJhc2VFdmVudCA9IHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGUsXG4gICAgICAgICAgICAgICAgICAgIHByZXZlbnRTaWdtYURlZmF1bHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudFNpZ21hRGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdmFyIGlzRmFrZVNpZ21hTW91c2VFdmVudCA9IGUub3JpZ2luYWwuaXNGYWtlU2lnbWFNb3VzZUV2ZW50O1xuICAgICAgICAgICAgICAgIHZhciBub2RlQXRQb3NpdGlvbiA9IGlzRmFrZVNpZ21hTW91c2VFdmVudCA/IF90aGlzLmdldE5vZGVBdFBvc2l0aW9uKGUpIDogX3RoaXMuaG92ZXJlZE5vZGU7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGVBdFBvc2l0aW9uKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZW1pdChcIlwiLmNvbmNhdChldmVudFR5cGUsIFwiTm9kZVwiKSwgX19hc3NpZ24oX19hc3NpZ24oe30sIGJhc2VFdmVudCksIHsgbm9kZTogbm9kZUF0UG9zaXRpb24gfSkpO1xuICAgICAgICAgICAgICAgIGlmIChldmVudFR5cGUgPT09IFwid2hlZWxcIiA/IF90aGlzLnNldHRpbmdzLmVuYWJsZUVkZ2VXaGVlbEV2ZW50cyA6IF90aGlzLnNldHRpbmdzLmVuYWJsZUVkZ2VDbGlja0V2ZW50cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWRnZSA9IF90aGlzLmdldEVkZ2VBdFBvaW50KGUueCwgZS55KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVkZ2UpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZW1pdChcIlwiLmNvbmNhdChldmVudFR5cGUsIFwiRWRnZVwiKSwgX19hc3NpZ24oX19hc3NpZ24oe30sIGJhc2VFdmVudCksIHsgZWRnZTogZWRnZSB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5lbWl0KFwiXCIuY29uY2F0KGV2ZW50VHlwZSwgXCJTdGFnZVwiKSwgYmFzZUV2ZW50KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmhhbmRsZUNsaWNrID0gY3JlYXRlTW91c2VMaXN0ZW5lcihcImNsaWNrXCIpO1xuICAgICAgICB0aGlzLmFjdGl2ZUxpc3RlbmVycy5oYW5kbGVSaWdodENsaWNrID0gY3JlYXRlTW91c2VMaXN0ZW5lcihcInJpZ2h0Q2xpY2tcIik7XG4gICAgICAgIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmhhbmRsZURvdWJsZUNsaWNrID0gY3JlYXRlTW91c2VMaXN0ZW5lcihcImRvdWJsZUNsaWNrXCIpO1xuICAgICAgICB0aGlzLmFjdGl2ZUxpc3RlbmVycy5oYW5kbGVXaGVlbCA9IGNyZWF0ZU1vdXNlTGlzdGVuZXIoXCJ3aGVlbFwiKTtcbiAgICAgICAgdGhpcy5hY3RpdmVMaXN0ZW5lcnMuaGFuZGxlRG93biA9IGNyZWF0ZU1vdXNlTGlzdGVuZXIoXCJkb3duXCIpO1xuICAgICAgICB0aGlzLm1vdXNlQ2FwdG9yLm9uKFwibW91c2Vtb3ZlXCIsIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmhhbmRsZU1vdmUpO1xuICAgICAgICB0aGlzLm1vdXNlQ2FwdG9yLm9uKFwiY2xpY2tcIiwgdGhpcy5hY3RpdmVMaXN0ZW5lcnMuaGFuZGxlQ2xpY2spO1xuICAgICAgICB0aGlzLm1vdXNlQ2FwdG9yLm9uKFwicmlnaHRDbGlja1wiLCB0aGlzLmFjdGl2ZUxpc3RlbmVycy5oYW5kbGVSaWdodENsaWNrKTtcbiAgICAgICAgdGhpcy5tb3VzZUNhcHRvci5vbihcImRvdWJsZUNsaWNrXCIsIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmhhbmRsZURvdWJsZUNsaWNrKTtcbiAgICAgICAgdGhpcy5tb3VzZUNhcHRvci5vbihcIndoZWVsXCIsIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmhhbmRsZVdoZWVsKTtcbiAgICAgICAgdGhpcy5tb3VzZUNhcHRvci5vbihcIm1vdXNlZG93blwiLCB0aGlzLmFjdGl2ZUxpc3RlbmVycy5oYW5kbGVEb3duKTtcbiAgICAgICAgLy8gVE9ET1xuICAgICAgICAvLyBEZWFsIHdpdGggVG91Y2ggY2FwdG9yIGV2ZW50c1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCBiaW5kaW5nIGdyYXBoIGhhbmRsZXJzXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtTaWdtYX1cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUuYmluZEdyYXBoSGFuZGxlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBncmFwaCA9IHRoaXMuZ3JhcGg7XG4gICAgICAgIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmdyYXBoVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMubmVlZFRvUHJvY2VzcyA9IHRydWU7XG4gICAgICAgICAgICBfdGhpcy5fc2NoZWR1bGVSZWZyZXNoKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYWN0aXZlTGlzdGVuZXJzLnNvZnRHcmFwaFVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLm5lZWRUb1NvZnRQcm9jZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIF90aGlzLl9zY2hlZHVsZVJlZnJlc2goKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hY3RpdmVMaXN0ZW5lcnMuZHJvcE5vZGVHcmFwaFVwZGF0ZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBkZWxldGUgX3RoaXMubm9kZURhdGFDYWNoZVtlLmtleV07XG4gICAgICAgICAgICBpZiAoX3RoaXMuaG92ZXJlZE5vZGUgPT09IGUua2V5KVxuICAgICAgICAgICAgICAgIF90aGlzLmhvdmVyZWROb2RlID0gbnVsbDtcbiAgICAgICAgICAgIF90aGlzLmFjdGl2ZUxpc3RlbmVycy5ncmFwaFVwZGF0ZSgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFjdGl2ZUxpc3RlbmVycy5kcm9wRWRnZUdyYXBoVXBkYXRlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5lZGdlRGF0YUNhY2hlW2Uua2V5XTtcbiAgICAgICAgICAgIGlmIChfdGhpcy5ob3ZlcmVkRWRnZSA9PT0gZS5rZXkpXG4gICAgICAgICAgICAgICAgX3RoaXMuaG92ZXJlZEVkZ2UgPSBudWxsO1xuICAgICAgICAgICAgX3RoaXMuYWN0aXZlTGlzdGVuZXJzLmdyYXBoVXBkYXRlKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmNsZWFyRWRnZXNHcmFwaFVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmVkZ2VEYXRhQ2FjaGUgPSB7fTtcbiAgICAgICAgICAgIF90aGlzLmhvdmVyZWRFZGdlID0gbnVsbDtcbiAgICAgICAgICAgIF90aGlzLmFjdGl2ZUxpc3RlbmVycy5ncmFwaFVwZGF0ZSgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFjdGl2ZUxpc3RlbmVycy5jbGVhckdyYXBoVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMubm9kZURhdGFDYWNoZSA9IHt9O1xuICAgICAgICAgICAgX3RoaXMuaG92ZXJlZE5vZGUgPSBudWxsO1xuICAgICAgICAgICAgX3RoaXMuYWN0aXZlTGlzdGVuZXJzLmNsZWFyRWRnZXNHcmFwaFVwZGF0ZSgpO1xuICAgICAgICB9O1xuICAgICAgICBncmFwaC5vbihcIm5vZGVBZGRlZFwiLCB0aGlzLmFjdGl2ZUxpc3RlbmVycy5ncmFwaFVwZGF0ZSk7XG4gICAgICAgIGdyYXBoLm9uKFwibm9kZURyb3BwZWRcIiwgdGhpcy5hY3RpdmVMaXN0ZW5lcnMuZHJvcE5vZGVHcmFwaFVwZGF0ZSk7XG4gICAgICAgIGdyYXBoLm9uKFwibm9kZUF0dHJpYnV0ZXNVcGRhdGVkXCIsIHRoaXMuYWN0aXZlTGlzdGVuZXJzLnNvZnRHcmFwaFVwZGF0ZSk7XG4gICAgICAgIGdyYXBoLm9uKFwiZWFjaE5vZGVBdHRyaWJ1dGVzVXBkYXRlZFwiLCB0aGlzLmFjdGl2ZUxpc3RlbmVycy5ncmFwaFVwZGF0ZSk7XG4gICAgICAgIGdyYXBoLm9uKFwiZWRnZUFkZGVkXCIsIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmdyYXBoVXBkYXRlKTtcbiAgICAgICAgZ3JhcGgub24oXCJlZGdlRHJvcHBlZFwiLCB0aGlzLmFjdGl2ZUxpc3RlbmVycy5kcm9wRWRnZUdyYXBoVXBkYXRlKTtcbiAgICAgICAgZ3JhcGgub24oXCJlZGdlQXR0cmlidXRlc1VwZGF0ZWRcIiwgdGhpcy5hY3RpdmVMaXN0ZW5lcnMuc29mdEdyYXBoVXBkYXRlKTtcbiAgICAgICAgZ3JhcGgub24oXCJlYWNoRWRnZUF0dHJpYnV0ZXNVcGRhdGVkXCIsIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmdyYXBoVXBkYXRlKTtcbiAgICAgICAgZ3JhcGgub24oXCJlZGdlc0NsZWFyZWRcIiwgdGhpcy5hY3RpdmVMaXN0ZW5lcnMuY2xlYXJFZGdlc0dyYXBoVXBkYXRlKTtcbiAgICAgICAgZ3JhcGgub24oXCJjbGVhcmVkXCIsIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmNsZWFyR3JhcGhVcGRhdGUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvIHVuYmluZCBoYW5kbGVycyBmcm9tIHRoZSBncmFwaC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3VuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUudW5iaW5kR3JhcGhIYW5kbGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGdyYXBoID0gdGhpcy5ncmFwaDtcbiAgICAgICAgZ3JhcGgucmVtb3ZlTGlzdGVuZXIoXCJub2RlQWRkZWRcIiwgdGhpcy5hY3RpdmVMaXN0ZW5lcnMuZ3JhcGhVcGRhdGUpO1xuICAgICAgICBncmFwaC5yZW1vdmVMaXN0ZW5lcihcIm5vZGVEcm9wcGVkXCIsIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmRyb3BOb2RlR3JhcGhVcGRhdGUpO1xuICAgICAgICBncmFwaC5yZW1vdmVMaXN0ZW5lcihcIm5vZGVBdHRyaWJ1dGVzVXBkYXRlZFwiLCB0aGlzLmFjdGl2ZUxpc3RlbmVycy5zb2Z0R3JhcGhVcGRhdGUpO1xuICAgICAgICBncmFwaC5yZW1vdmVMaXN0ZW5lcihcImVhY2hOb2RlQXR0cmlidXRlc1VwZGF0ZWRcIiwgdGhpcy5hY3RpdmVMaXN0ZW5lcnMuZ3JhcGhVcGRhdGUpO1xuICAgICAgICBncmFwaC5yZW1vdmVMaXN0ZW5lcihcImVkZ2VBZGRlZFwiLCB0aGlzLmFjdGl2ZUxpc3RlbmVycy5ncmFwaFVwZGF0ZSk7XG4gICAgICAgIGdyYXBoLnJlbW92ZUxpc3RlbmVyKFwiZWRnZURyb3BwZWRcIiwgdGhpcy5hY3RpdmVMaXN0ZW5lcnMuZHJvcEVkZ2VHcmFwaFVwZGF0ZSk7XG4gICAgICAgIGdyYXBoLnJlbW92ZUxpc3RlbmVyKFwiZWRnZUF0dHJpYnV0ZXNVcGRhdGVkXCIsIHRoaXMuYWN0aXZlTGlzdGVuZXJzLnNvZnRHcmFwaFVwZGF0ZSk7XG4gICAgICAgIGdyYXBoLnJlbW92ZUxpc3RlbmVyKFwiZWFjaEVkZ2VBdHRyaWJ1dGVzVXBkYXRlZFwiLCB0aGlzLmFjdGl2ZUxpc3RlbmVycy5ncmFwaFVwZGF0ZSk7XG4gICAgICAgIGdyYXBoLnJlbW92ZUxpc3RlbmVyKFwiZWRnZXNDbGVhcmVkXCIsIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmNsZWFyRWRnZXNHcmFwaFVwZGF0ZSk7XG4gICAgICAgIGdyYXBoLnJlbW92ZUxpc3RlbmVyKFwiY2xlYXJlZFwiLCB0aGlzLmFjdGl2ZUxpc3RlbmVycy5jbGVhckdyYXBoVXBkYXRlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCBkZWFsaW5nIHdpdGggXCJsZWF2ZUVkZ2VcIiBhbmQgXCJlbnRlckVkZ2VcIiBldmVudHMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtTaWdtYX1cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUuY2hlY2tFZGdlSG92ZXJFdmVudHMgPSBmdW5jdGlvbiAocGF5bG9hZCkge1xuICAgICAgICB2YXIgZWRnZVRvSG92ZXIgPSB0aGlzLmhvdmVyZWROb2RlID8gbnVsbCA6IHRoaXMuZ2V0RWRnZUF0UG9pbnQocGF5bG9hZC5ldmVudC54LCBwYXlsb2FkLmV2ZW50LnkpO1xuICAgICAgICBpZiAoZWRnZVRvSG92ZXIgIT09IHRoaXMuaG92ZXJlZEVkZ2UpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhvdmVyZWRFZGdlKVxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImxlYXZlRWRnZVwiLCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcGF5bG9hZCksIHsgZWRnZTogdGhpcy5ob3ZlcmVkRWRnZSB9KSk7XG4gICAgICAgICAgICBpZiAoZWRnZVRvSG92ZXIpXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZW50ZXJFZGdlXCIsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBwYXlsb2FkKSwgeyBlZGdlOiBlZGdlVG9Ib3ZlciB9KSk7XG4gICAgICAgICAgICB0aGlzLmhvdmVyZWRFZGdlID0gZWRnZVRvSG92ZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgbG9va2luZyBmb3IgYW4gZWRnZSBjb2xsaWRpbmcgd2l0aCBhIGdpdmVuIHBvaW50IGF0ICh4LCB5KS4gUmV0dXJuc1xuICAgICAqIHRoZSBrZXkgb2YgdGhlIGVkZ2UgaWYgYW55LCBvciBudWxsIGVsc2UuXG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLmdldEVkZ2VBdFBvaW50ID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYiA9IHRoaXMsIGVkZ2VEYXRhQ2FjaGUgPSBfYi5lZGdlRGF0YUNhY2hlLCBub2RlRGF0YUNhY2hlID0gX2Iubm9kZURhdGFDYWNoZTtcbiAgICAgICAgLy8gQ2hlY2sgZmlyc3QgdGhhdCBwaXhlbCBpcyBjb2xvcmVkOlxuICAgICAgICAvLyBOb3RlIHRoYXQgbW91c2UgcG9zaXRpb25zIG11c3QgYmUgY29ycmVjdGVkIGJ5IHBpeGVsIHJhdGlvIHRvIGNvcnJlY3RseVxuICAgICAgICAvLyBpbmRleCB0aGUgZHJhd2luZyBidWZmZXIuXG4gICAgICAgIGlmICghKDAsIGVkZ2VfY29sbGlzaW9uc18xLmlzUGl4ZWxDb2xvcmVkKSh0aGlzLndlYkdMQ29udGV4dHMuZWRnZXMsIHggKiB0aGlzLnBpeGVsUmF0aW8sIHkgKiB0aGlzLnBpeGVsUmF0aW8pKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIC8vIENoZWNrIGZvciBlYWNoIGVkZ2UgaWYgaXQgY29sbGlkZXMgd2l0aCB0aGUgcG9pbnQ6XG4gICAgICAgIHZhciBfYyA9IHRoaXMudmlld3BvcnRUb0dyYXBoKHsgeDogeCwgeTogeSB9KSwgZ3JhcGhYID0gX2MueCwgZ3JhcGhZID0gX2MueTtcbiAgICAgICAgLy8gVG8gdHJhbnNsYXRlIGVkZ2UgdGhpY2tuZXNzZXMgdG8gdGhlIGdyYXBoIHN5c3RlbSwgd2Ugb2JzZXJ2ZSBieSBob3cgbXVjaFxuICAgICAgICAvLyB0aGUgbGVuZ3RoIG9mIGEgbm9uLW51bGwgZWRnZSBpcyB0cmFuc2Zvcm1lZCB0byBiZXR3ZWVuIHRoZSBncmFwaCBzeXN0ZW1cbiAgICAgICAgLy8gYW5kIHRoZSB2aWV3cG9ydCBzeXN0ZW06XG4gICAgICAgIHZhciB0cmFuc2Zvcm1hdGlvblJhdGlvID0gMDtcbiAgICAgICAgdGhpcy5ncmFwaC5zb21lRWRnZShmdW5jdGlvbiAoa2V5LCBfLCBzb3VyY2VJZCwgdGFyZ2V0SWQsIF9hLCBfYikge1xuICAgICAgICAgICAgdmFyIHhzID0gX2EueCwgeXMgPSBfYS55O1xuICAgICAgICAgICAgdmFyIHh0ID0gX2IueCwgeXQgPSBfYi55O1xuICAgICAgICAgICAgaWYgKGVkZ2VEYXRhQ2FjaGVba2V5XS5oaWRkZW4gfHwgbm9kZURhdGFDYWNoZVtzb3VyY2VJZF0uaGlkZGVuIHx8IG5vZGVEYXRhQ2FjaGVbdGFyZ2V0SWRdLmhpZGRlbilcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBpZiAoeHMgIT09IHh0IHx8IHlzICE9PSB5dCkge1xuICAgICAgICAgICAgICAgIHZhciBncmFwaExlbmd0aCA9IE1hdGguc3FydChNYXRoLnBvdyh4dCAtIHhzLCAyKSArIE1hdGgucG93KHl0IC0geXMsIDIpKTtcbiAgICAgICAgICAgICAgICB2YXIgX2MgPSBfdGhpcy5ncmFwaFRvVmlld3BvcnQoeyB4OiB4cywgeTogeXMgfSksIHZwX3hzID0gX2MueCwgdnBfeXMgPSBfYy55O1xuICAgICAgICAgICAgICAgIHZhciBfZCA9IF90aGlzLmdyYXBoVG9WaWV3cG9ydCh7IHg6IHh0LCB5OiB5dCB9KSwgdnBfeHQgPSBfZC54LCB2cF95dCA9IF9kLnk7XG4gICAgICAgICAgICAgICAgdmFyIHZpZXdwb3J0TGVuZ3RoID0gTWF0aC5zcXJ0KE1hdGgucG93KHZwX3h0IC0gdnBfeHMsIDIpICsgTWF0aC5wb3codnBfeXQgLSB2cF95cywgMikpO1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybWF0aW9uUmF0aW8gPSBncmFwaExlbmd0aCAvIHZpZXdwb3J0TGVuZ3RoO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gSWYgbm8gbm9uLW51bGwgZWRnZSBoYXMgYmVlbiBmb3VuZCwgcmV0dXJuIG51bGw6XG4gICAgICAgIGlmICghdHJhbnNmb3JtYXRpb25SYXRpbylcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAvLyBOb3cgd2UgY2FuIGxvb2sgZm9yIG1hdGNoaW5nIGVkZ2VzOlxuICAgICAgICB2YXIgZWRnZXMgPSB0aGlzLmdyYXBoLmZpbHRlckVkZ2VzKGZ1bmN0aW9uIChrZXksIGVkZ2VBdHRyaWJ1dGVzLCBzb3VyY2VJZCwgdGFyZ2V0SWQsIHNvdXJjZVBvc2l0aW9uLCB0YXJnZXRQb3NpdGlvbikge1xuICAgICAgICAgICAgaWYgKGVkZ2VEYXRhQ2FjaGVba2V5XS5oaWRkZW4gfHwgbm9kZURhdGFDYWNoZVtzb3VyY2VJZF0uaGlkZGVuIHx8IG5vZGVEYXRhQ2FjaGVbdGFyZ2V0SWRdLmhpZGRlbilcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBpZiAoKDAsIGVkZ2VfY29sbGlzaW9uc18xLmRvRWRnZUNvbGxpZGVXaXRoUG9pbnQpKGdyYXBoWCwgZ3JhcGhZLCBzb3VyY2VQb3NpdGlvbi54LCBzb3VyY2VQb3NpdGlvbi55LCB0YXJnZXRQb3NpdGlvbi54LCB0YXJnZXRQb3NpdGlvbi55LCBcbiAgICAgICAgICAgIC8vIEFkYXB0IHRoZSBlZGdlIHNpemUgdG8gdGhlIHpvb20gcmF0aW86XG4gICAgICAgICAgICAoZWRnZURhdGFDYWNoZVtrZXldLnNpemUgKiB0cmFuc2Zvcm1hdGlvblJhdGlvKSAvIF90aGlzLmNhbWVyYVNpemVSYXRpbykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChlZGdlcy5sZW5ndGggPT09IDApXG4gICAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gbm8gZWRnZXMgZm91bmRcbiAgICAgICAgLy8gaWYgbm9uZSBvZiB0aGUgZWRnZXMgaGF2ZSBhIHpJbmRleCwgc2VsZWN0ZWQgdGhlIG1vc3QgcmVjZW50bHkgY3JlYXRlZCBvbmUgdG8gbWF0Y2ggdGhlIHJlbmRlcmluZyBvcmRlclxuICAgICAgICB2YXIgc2VsZWN0ZWRFZGdlID0gZWRnZXNbZWRnZXMubGVuZ3RoIC0gMV07XG4gICAgICAgIC8vIG90aGVyd2lzZSBzZWxlY3QgZWRnZSB3aXRoIGhpZ2hlc3QgekluZGV4XG4gICAgICAgIHZhciBoaWdoZXN0WkluZGV4ID0gLUluZmluaXR5O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgZWRnZXNfMSA9IF9fdmFsdWVzKGVkZ2VzKSwgZWRnZXNfMV8xID0gZWRnZXNfMS5uZXh0KCk7ICFlZGdlc18xXzEuZG9uZTsgZWRnZXNfMV8xID0gZWRnZXNfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZWRnZSA9IGVkZ2VzXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgekluZGV4ID0gdGhpcy5ncmFwaC5nZXRFZGdlQXR0cmlidXRlKGVkZ2UsIFwiekluZGV4XCIpO1xuICAgICAgICAgICAgICAgIGlmICh6SW5kZXggPj0gaGlnaGVzdFpJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEVkZ2UgPSBlZGdlO1xuICAgICAgICAgICAgICAgICAgICBoaWdoZXN0WkluZGV4ID0gekluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGVkZ2VzXzFfMSAmJiAhZWRnZXNfMV8xLmRvbmUgJiYgKF9hID0gZWRnZXNfMS5yZXR1cm4pKSBfYS5jYWxsKGVkZ2VzXzEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWxlY3RlZEVkZ2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdXNlZCB0byBwcm9jZXNzIHRoZSB3aG9sZSBncmFwaCdzIGRhdGEuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtTaWdtYX1cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uIChrZWVwQXJyYXlzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChrZWVwQXJyYXlzID09PSB2b2lkIDApIHsga2VlcEFycmF5cyA9IGZhbHNlOyB9XG4gICAgICAgIHZhciBncmFwaCA9IHRoaXMuZ3JhcGg7XG4gICAgICAgIHZhciBzZXR0aW5ncyA9IHRoaXMuc2V0dGluZ3M7XG4gICAgICAgIHZhciBkaW1lbnNpb25zID0gdGhpcy5nZXREaW1lbnNpb25zKCk7XG4gICAgICAgIHZhciBub2RlWkV4dGVudCA9IFtJbmZpbml0eSwgLUluZmluaXR5XTtcbiAgICAgICAgdmFyIGVkZ2VaRXh0ZW50ID0gW0luZmluaXR5LCAtSW5maW5pdHldO1xuICAgICAgICAvLyBDbGVhcmluZyB0aGUgcXVhZFxuICAgICAgICB0aGlzLnF1YWR0cmVlLmNsZWFyKCk7XG4gICAgICAgIC8vIFJlc2V0dGluZyB0aGUgbGFiZWwgZ3JpZFxuICAgICAgICAvLyBUT0RPOiBpdCdzIHByb2JhYmx5IGJldHRlciB0byBkbyB0aGlzIGV4cGxpY2l0bHkgb3Igb24gcmVzaXplcyBmb3IgbGF5b3V0IGFuZCBhbmltc1xuICAgICAgICB0aGlzLmxhYmVsR3JpZC5yZXNpemVBbmRDbGVhcihkaW1lbnNpb25zLCBzZXR0aW5ncy5sYWJlbEdyaWRDZWxsU2l6ZSk7XG4gICAgICAgIC8vIENsZWFyIHRoZSBoaWdobGlnaHRlZE5vZGVzXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWROb2RlcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgLy8gQ29tcHV0aW5nIGV4dGVudHNcbiAgICAgICAgdGhpcy5ub2RlRXh0ZW50ID0gKDAsIHV0aWxzXzEuZ3JhcGhFeHRlbnQpKGdyYXBoKTtcbiAgICAgICAgLy8gUmVzZXR0aW5nIGBmb3JjZUxhYmVsYCBpbmRpY2VzXG4gICAgICAgIHRoaXMubm9kZXNXaXRoRm9yY2VkTGFiZWxzID0gW107XG4gICAgICAgIHRoaXMuZWRnZXNXaXRoRm9yY2VkTGFiZWxzID0gW107XG4gICAgICAgIC8vIE5PVEU6IGl0IGlzIGltcG9ydGFudCB0byBjb21wdXRlIHRoaXMgbWF0cml4IGFmdGVyIGNvbXB1dGluZyB0aGUgbm9kZSdzIGV4dGVudFxuICAgICAgICAvLyBiZWNhdXNlICMuZ2V0R3JhcGhEaW1lbnNpb25zIHJlbGllcyBvbiBpdFxuICAgICAgICB2YXIgbnVsbENhbWVyYSA9IG5ldyBjYW1lcmFfMS5kZWZhdWx0KCk7XG4gICAgICAgIHZhciBudWxsQ2FtZXJhTWF0cml4ID0gKDAsIHV0aWxzXzEubWF0cml4RnJvbUNhbWVyYSkobnVsbENhbWVyYS5nZXRTdGF0ZSgpLCB0aGlzLmdldERpbWVuc2lvbnMoKSwgdGhpcy5nZXRHcmFwaERpbWVuc2lvbnMoKSwgdGhpcy5nZXRTZXR0aW5nKFwic3RhZ2VQYWRkaW5nXCIpIHx8IDApO1xuICAgICAgICAvLyBSZXNjYWxpbmcgZnVuY3Rpb25cbiAgICAgICAgdGhpcy5ub3JtYWxpemF0aW9uRnVuY3Rpb24gPSAoMCwgdXRpbHNfMS5jcmVhdGVOb3JtYWxpemF0aW9uRnVuY3Rpb24pKHRoaXMuY3VzdG9tQkJveCB8fCB0aGlzLm5vZGVFeHRlbnQpO1xuICAgICAgICB2YXIgbm9kZXNQZXJQcm9ncmFtcyA9IHt9O1xuICAgICAgICB2YXIgbm9kZXMgPSBncmFwaC5ub2RlcygpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5vZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgICAgIC8vIE5vZGUgZGlzcGxheSBkYXRhIHJlc29sdXRpb246XG4gICAgICAgICAgICAvLyAgIDEuIEZpcnN0IHdlIGdldCB0aGUgbm9kZSdzIGF0dHJpYnV0ZXNcbiAgICAgICAgICAgIC8vICAgMi4gV2Ugb3B0aW9uYWxseSByZWR1Y2UgdGhlbSB1c2luZyB0aGUgZnVuY3Rpb24gcHJvdmlkZWQgYnkgdGhlIHVzZXJcbiAgICAgICAgICAgIC8vICAgICAgTm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gbXVzdCByZXR1cm4gYSB0b3RhbCBvYmplY3QgYW5kIHdvbid0IGJlIG1lcmdlZFxuICAgICAgICAgICAgLy8gICAzLiBXZSBhcHBseSBvdXIgZGVmYXVsdHMsIHdoaWxlIHJ1bm5pbmcgc29tZSB2aXRhbCBjaGVja3NcbiAgICAgICAgICAgIC8vICAgNC4gV2UgYXBwbHkgdGhlIG5vcm1hbGl6YXRpb24gZnVuY3Rpb25cbiAgICAgICAgICAgIC8vIFdlIHNoYWxsb3cgY29weSBub2RlIGRhdGEgdG8gYXZvaWQgZGFuZ2Vyb3VzIGJlaGF2aW9ycyBmcm9tIHJlZHVjZXJzXG4gICAgICAgICAgICB2YXIgYXR0ciA9IE9iamVjdC5hc3NpZ24oe30sIGdyYXBoLmdldE5vZGVBdHRyaWJ1dGVzKG5vZGUpKTtcbiAgICAgICAgICAgIGlmIChzZXR0aW5ncy5ub2RlUmVkdWNlcilcbiAgICAgICAgICAgICAgICBhdHRyID0gc2V0dGluZ3Mubm9kZVJlZHVjZXIobm9kZSwgYXR0cik7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IGFwcGx5Tm9kZURlZmF1bHRzKHRoaXMuc2V0dGluZ3MsIG5vZGUsIGF0dHIpO1xuICAgICAgICAgICAgbm9kZXNQZXJQcm9ncmFtc1tkYXRhLnR5cGVdID0gKG5vZGVzUGVyUHJvZ3JhbXNbZGF0YS50eXBlXSB8fCAwKSArIDE7XG4gICAgICAgICAgICB0aGlzLm5vZGVEYXRhQ2FjaGVbbm9kZV0gPSBkYXRhO1xuICAgICAgICAgICAgdGhpcy5ub3JtYWxpemF0aW9uRnVuY3Rpb24uYXBwbHlUbyhkYXRhKTtcbiAgICAgICAgICAgIGlmIChkYXRhLmZvcmNlTGFiZWwpXG4gICAgICAgICAgICAgICAgdGhpcy5ub2Rlc1dpdGhGb3JjZWRMYWJlbHMucHVzaChub2RlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnpJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLnpJbmRleCA8IG5vZGVaRXh0ZW50WzBdKVxuICAgICAgICAgICAgICAgICAgICBub2RlWkV4dGVudFswXSA9IGRhdGEuekluZGV4O1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLnpJbmRleCA+IG5vZGVaRXh0ZW50WzFdKVxuICAgICAgICAgICAgICAgICAgICBub2RlWkV4dGVudFsxXSA9IGRhdGEuekluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIHR5cGUgaW4gdGhpcy5ub2RlUHJvZ3JhbXMpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5ub2RlUHJvZ3JhbXMuaGFzT3duUHJvcGVydHkodHlwZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaWdtYTogY291bGQgbm90IGZpbmQgYSBzdWl0YWJsZSBwcm9ncmFtIGZvciBub2RlIHR5cGUgXFxcIlwiLmNvbmNhdCh0eXBlLCBcIlxcXCIhXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgha2VlcEFycmF5cylcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVQcm9ncmFtc1t0eXBlXS5hbGxvY2F0ZShub2Rlc1BlclByb2dyYW1zW3R5cGVdIHx8IDApO1xuICAgICAgICAgICAgLy8gV2UgcmVzZXQgdGhhdCBjb3VudCBoZXJlLCBzbyB0aGF0IHdlIGNhbiByZXVzZSBpdCB3aGlsZSBjYWxsaW5nIHRoZSBQcm9ncmFtI3Byb2Nlc3MgbWV0aG9kczpcbiAgICAgICAgICAgIG5vZGVzUGVyUHJvZ3JhbXNbdHlwZV0gPSAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIEhhbmRsaW5nIG5vZGUgei1pbmRleFxuICAgICAgICAvLyBUT0RPOiB6LWluZGV4IG5lZWRzIHVzIHRvIGNvbXB1dGUgZGlzcGxheSBkYXRhIGJlZm9yZSBoYW5kXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnpJbmRleCAmJiBub2RlWkV4dGVudFswXSAhPT0gbm9kZVpFeHRlbnRbMV0pXG4gICAgICAgICAgICBub2RlcyA9ICgwLCB1dGlsc18xLnpJbmRleE9yZGVyaW5nKShub2RlWkV4dGVudCwgZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIF90aGlzLm5vZGVEYXRhQ2FjaGVbbm9kZV0uekluZGV4OyB9LCBub2Rlcyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbm9kZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLm5vZGVEYXRhQ2FjaGVbbm9kZV07XG4gICAgICAgICAgICB0aGlzLnF1YWR0cmVlLmFkZChub2RlLCBkYXRhLngsIDEgLSBkYXRhLnksIGRhdGEuc2l6ZSAvIHRoaXMud2lkdGgpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhLmxhYmVsID09PSBcInN0cmluZ1wiICYmICFkYXRhLmhpZGRlbilcbiAgICAgICAgICAgICAgICB0aGlzLmxhYmVsR3JpZC5hZGQobm9kZSwgZGF0YS5zaXplLCB0aGlzLmZyYW1lZEdyYXBoVG9WaWV3cG9ydChkYXRhLCB7IG1hdHJpeDogbnVsbENhbWVyYU1hdHJpeCB9KSk7XG4gICAgICAgICAgICB2YXIgbm9kZVByb2dyYW0gPSB0aGlzLm5vZGVQcm9ncmFtc1tkYXRhLnR5cGVdO1xuICAgICAgICAgICAgaWYgKCFub2RlUHJvZ3JhbSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaWdtYTogY291bGQgbm90IGZpbmQgYSBzdWl0YWJsZSBwcm9ncmFtIGZvciBub2RlIHR5cGUgXFxcIlwiLmNvbmNhdChkYXRhLnR5cGUsIFwiXFxcIiFcIikpO1xuICAgICAgICAgICAgbm9kZVByb2dyYW0ucHJvY2VzcyhkYXRhLCBkYXRhLmhpZGRlbiwgbm9kZXNQZXJQcm9ncmFtc1tkYXRhLnR5cGVdKyspO1xuICAgICAgICAgICAgLy8gU2F2ZSB0aGUgbm9kZSBpbiB0aGUgaGlnaGxpZ2h0ZWQgc2V0IGlmIG5lZWRlZFxuICAgICAgICAgICAgaWYgKGRhdGEuaGlnaGxpZ2h0ZWQgJiYgIWRhdGEuaGlkZGVuKVxuICAgICAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWROb2Rlcy5hZGQobm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYWJlbEdyaWQub3JnYW5pemUoKTtcbiAgICAgICAgdmFyIGVkZ2VzUGVyUHJvZ3JhbXMgPSB7fTtcbiAgICAgICAgdmFyIGVkZ2VzID0gZ3JhcGguZWRnZXMoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBlZGdlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBlZGdlID0gZWRnZXNbaV07XG4gICAgICAgICAgICAvLyBFZGdlIGRpc3BsYXkgZGF0YSByZXNvbHV0aW9uOlxuICAgICAgICAgICAgLy8gICAxLiBGaXJzdCB3ZSBnZXQgdGhlIGVkZ2UncyBhdHRyaWJ1dGVzXG4gICAgICAgICAgICAvLyAgIDIuIFdlIG9wdGlvbmFsbHkgcmVkdWNlIHRoZW0gdXNpbmcgdGhlIGZ1bmN0aW9uIHByb3ZpZGVkIGJ5IHRoZSB1c2VyXG4gICAgICAgICAgICAvLyAgICAgIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIG11c3QgcmV0dXJuIGEgdG90YWwgb2JqZWN0IGFuZCB3b24ndCBiZSBtZXJnZWRcbiAgICAgICAgICAgIC8vICAgMy4gV2UgYXBwbHkgb3VyIGRlZmF1bHRzLCB3aGlsZSBydW5uaW5nIHNvbWUgdml0YWwgY2hlY2tzXG4gICAgICAgICAgICAvLyBXZSBzaGFsbG93IGNvcHkgZWRnZSBkYXRhIHRvIGF2b2lkIGRhbmdlcm91cyBiZWhhdmlvcnMgZnJvbSByZWR1Y2Vyc1xuICAgICAgICAgICAgdmFyIGF0dHIgPSBPYmplY3QuYXNzaWduKHt9LCBncmFwaC5nZXRFZGdlQXR0cmlidXRlcyhlZGdlKSk7XG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MuZWRnZVJlZHVjZXIpXG4gICAgICAgICAgICAgICAgYXR0ciA9IHNldHRpbmdzLmVkZ2VSZWR1Y2VyKGVkZ2UsIGF0dHIpO1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBhcHBseUVkZ2VEZWZhdWx0cyh0aGlzLnNldHRpbmdzLCBlZGdlLCBhdHRyKTtcbiAgICAgICAgICAgIGVkZ2VzUGVyUHJvZ3JhbXNbZGF0YS50eXBlXSA9IChlZGdlc1BlclByb2dyYW1zW2RhdGEudHlwZV0gfHwgMCkgKyAxO1xuICAgICAgICAgICAgdGhpcy5lZGdlRGF0YUNhY2hlW2VkZ2VdID0gZGF0YTtcbiAgICAgICAgICAgIGlmIChkYXRhLmZvcmNlTGFiZWwgJiYgIWRhdGEuaGlkZGVuKVxuICAgICAgICAgICAgICAgIHRoaXMuZWRnZXNXaXRoRm9yY2VkTGFiZWxzLnB1c2goZWRnZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy56SW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS56SW5kZXggPCBlZGdlWkV4dGVudFswXSlcbiAgICAgICAgICAgICAgICAgICAgZWRnZVpFeHRlbnRbMF0gPSBkYXRhLnpJbmRleDtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS56SW5kZXggPiBlZGdlWkV4dGVudFsxXSlcbiAgICAgICAgICAgICAgICAgICAgZWRnZVpFeHRlbnRbMV0gPSBkYXRhLnpJbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciB0eXBlIGluIHRoaXMuZWRnZVByb2dyYW1zKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZWRnZVByb2dyYW1zLmhhc093blByb3BlcnR5KHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2lnbWE6IGNvdWxkIG5vdCBmaW5kIGEgc3VpdGFibGUgcHJvZ3JhbSBmb3IgZWRnZSB0eXBlIFxcXCJcIi5jb25jYXQodHlwZSwgXCJcXFwiIVwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWtlZXBBcnJheXMpXG4gICAgICAgICAgICAgICAgdGhpcy5lZGdlUHJvZ3JhbXNbdHlwZV0uYWxsb2NhdGUoZWRnZXNQZXJQcm9ncmFtc1t0eXBlXSB8fCAwKTtcbiAgICAgICAgICAgIC8vIFdlIHJlc2V0IHRoYXQgY291bnQgaGVyZSwgc28gdGhhdCB3ZSBjYW4gcmV1c2UgaXQgd2hpbGUgY2FsbGluZyB0aGUgUHJvZ3JhbSNwcm9jZXNzIG1ldGhvZHM6XG4gICAgICAgICAgICBlZGdlc1BlclByb2dyYW1zW3R5cGVdID0gMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBIYW5kbGluZyBlZGdlIHotaW5kZXhcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuekluZGV4ICYmIGVkZ2VaRXh0ZW50WzBdICE9PSBlZGdlWkV4dGVudFsxXSlcbiAgICAgICAgICAgIGVkZ2VzID0gKDAsIHV0aWxzXzEuekluZGV4T3JkZXJpbmcpKGVkZ2VaRXh0ZW50LCBmdW5jdGlvbiAoZWRnZSkgeyByZXR1cm4gX3RoaXMuZWRnZURhdGFDYWNoZVtlZGdlXS56SW5kZXg7IH0sIGVkZ2VzKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBlZGdlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBlZGdlID0gZWRnZXNbaV07XG4gICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuZWRnZURhdGFDYWNoZVtlZGdlXTtcbiAgICAgICAgICAgIHZhciBleHRyZW1pdGllcyA9IGdyYXBoLmV4dHJlbWl0aWVzKGVkZ2UpLCBzb3VyY2VEYXRhID0gdGhpcy5ub2RlRGF0YUNhY2hlW2V4dHJlbWl0aWVzWzBdXSwgdGFyZ2V0RGF0YSA9IHRoaXMubm9kZURhdGFDYWNoZVtleHRyZW1pdGllc1sxXV07XG4gICAgICAgICAgICB2YXIgaGlkZGVuID0gZGF0YS5oaWRkZW4gfHwgc291cmNlRGF0YS5oaWRkZW4gfHwgdGFyZ2V0RGF0YS5oaWRkZW47XG4gICAgICAgICAgICB0aGlzLmVkZ2VQcm9ncmFtc1tkYXRhLnR5cGVdLnByb2Nlc3Moc291cmNlRGF0YSwgdGFyZ2V0RGF0YSwgZGF0YSwgaGlkZGVuLCBlZGdlc1BlclByb2dyYW1zW2RhdGEudHlwZV0rKyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgdHlwZSBpbiB0aGlzLmVkZ2VQcm9ncmFtcykge1xuICAgICAgICAgICAgdmFyIHByb2dyYW0gPSB0aGlzLmVkZ2VQcm9ncmFtc1t0eXBlXTtcbiAgICAgICAgICAgIGlmICgha2VlcEFycmF5cyAmJiB0eXBlb2YgcHJvZ3JhbS5jb21wdXRlSW5kaWNlcyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICAgIHByb2dyYW0uY29tcHV0ZUluZGljZXMoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0aGF0IGJhY2twb3J0cyBwb3RlbnRpYWwgc2V0dGluZ3MgdXBkYXRlcyB3aGVyZSBpdCdzIG5lZWRlZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5oYW5kbGVTZXR0aW5nc1VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jYW1lcmEubWluUmF0aW8gPSB0aGlzLnNldHRpbmdzLm1pbkNhbWVyYVJhdGlvO1xuICAgICAgICB0aGlzLmNhbWVyYS5tYXhSYXRpbyA9IHRoaXMuc2V0dGluZ3MubWF4Q2FtZXJhUmF0aW87XG4gICAgICAgIHRoaXMuY2FtZXJhLnNldFN0YXRlKHRoaXMuY2FtZXJhLnZhbGlkYXRlU3RhdGUodGhpcy5jYW1lcmEuZ2V0U3RhdGUoKSkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0aGF0IGRlY2lkZXMgd2hldGhlciB0byByZXByb2Nlc3MgZ3JhcGggb3Igbm90LCBhbmQgdGhlbiByZW5kZXIgdGhlXG4gICAgICogZ3JhcGguXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtTaWdtYX1cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUuX3JlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIERvIHdlIG5lZWQgdG8gcHJvY2VzcyBkYXRhP1xuICAgICAgICBpZiAodGhpcy5uZWVkVG9Qcm9jZXNzKSB7XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3MoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLm5lZWRUb1NvZnRQcm9jZXNzKSB7XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3ModHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzZXR0aW5nIHN0YXRlXG4gICAgICAgIHRoaXMubmVlZFRvUHJvY2VzcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLm5lZWRUb1NvZnRQcm9jZXNzID0gZmFsc2U7XG4gICAgICAgIC8vIFJlbmRlcmluZ1xuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0aGF0IHNjaGVkdWxlcyBhIGBfcmVmcmVzaGAgY2FsbCBpZiBub25lIGhhcyBiZWVuIHNjaGVkdWxlZCB5ZXQuIEl0XG4gICAgICogd2lsbCB0aGVuIGJlIHByb2Nlc3NlZCBuZXh0IGF2YWlsYWJsZSBmcmFtZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1NpZ21hfVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5fc2NoZWR1bGVSZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMucmVuZGVyRnJhbWUpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyRnJhbWUgPSAoMCwgdXRpbHNfMS5yZXF1ZXN0RnJhbWUpKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fcmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgIF90aGlzLnJlbmRlckZyYW1lID0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gcmVuZGVyIGxhYmVscy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1NpZ21hfVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5yZW5kZXJMYWJlbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5yZW5kZXJMYWJlbHMpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgdmFyIGNhbWVyYVN0YXRlID0gdGhpcy5jYW1lcmEuZ2V0U3RhdGUoKTtcbiAgICAgICAgLy8gU2VsZWN0aW5nIGxhYmVscyB0byBkcmF3XG4gICAgICAgIHZhciBsYWJlbHNUb0Rpc3BsYXkgPSB0aGlzLmxhYmVsR3JpZC5nZXRMYWJlbHNUb0Rpc3BsYXkoY2FtZXJhU3RhdGUucmF0aW8sIHRoaXMuc2V0dGluZ3MubGFiZWxEZW5zaXR5KTtcbiAgICAgICAgKDAsIGV4dGVuZF8xLmRlZmF1bHQpKGxhYmVsc1RvRGlzcGxheSwgdGhpcy5ub2Rlc1dpdGhGb3JjZWRMYWJlbHMpO1xuICAgICAgICB0aGlzLmRpc3BsYXllZExhYmVscyA9IG5ldyBTZXQoKTtcbiAgICAgICAgLy8gRHJhd2luZyBsYWJlbHNcbiAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLmNhbnZhc0NvbnRleHRzLmxhYmVscztcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsYWJlbHNUb0Rpc3BsYXkubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IGxhYmVsc1RvRGlzcGxheVtpXTtcbiAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5ub2RlRGF0YUNhY2hlW25vZGVdO1xuICAgICAgICAgICAgLy8gSWYgdGhlIG5vZGUgd2FzIGFscmVhZHkgZHJhd24gKGxpa2UgaWYgaXQgaXMgZWxpZ2libGUgQU5EIGhhc1xuICAgICAgICAgICAgLy8gYGZvcmNlTGFiZWxgKSwgd2UgZG9uJ3Qgd2FudCB0byBkcmF3IGl0IGFnYWluXG4gICAgICAgICAgICAvLyBOT1RFOiB3ZSBjYW4gZG8gYmV0dGVyIHByb2JhYmx5XG4gICAgICAgICAgICBpZiAodGhpcy5kaXNwbGF5ZWRMYWJlbHMuaGFzKG5vZGUpKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgLy8gSWYgdGhlIG5vZGUgaXMgaGlkZGVuLCB3ZSBkb24ndCBuZWVkIHRvIGRpc3BsYXkgaXRzIGxhYmVsIG9idmlvdXNseVxuICAgICAgICAgICAgaWYgKGRhdGEuaGlkZGVuKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5mcmFtZWRHcmFwaFRvVmlld3BvcnQoZGF0YSksIHggPSBfYS54LCB5ID0gX2EueTtcbiAgICAgICAgICAgIC8vIE5PVEU6IHdlIGNhbiBjYWNoZSB0aGUgbGFiZWxzIHdlIG5lZWQgdG8gcmVuZGVyIHVudGlsIHRoZSBjYW1lcmEncyByYXRpbyBjaGFuZ2VzXG4gICAgICAgICAgICB2YXIgc2l6ZSA9IHRoaXMuc2NhbGVTaXplKGRhdGEuc2l6ZSk7XG4gICAgICAgICAgICAvLyBJcyBub2RlIGJpZyBlbm91Z2g/XG4gICAgICAgICAgICBpZiAoIWRhdGEuZm9yY2VMYWJlbCAmJiBzaXplIDwgdGhpcy5zZXR0aW5ncy5sYWJlbFJlbmRlcmVkU2l6ZVRocmVzaG9sZClcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIC8vIElzIG5vZGUgYWN0dWFsbHkgb24gc2NyZWVuICh3aXRoIHNvbWUgbWFyZ2luKVxuICAgICAgICAgICAgLy8gTk9URTogd2UgdXNlZCB0byByZWx5IG9uIHRoZSBxdWFkdHJlZSBmb3IgdGhpcywgYnV0IHRoZSBjb29yZGluYXRlc1xuICAgICAgICAgICAgLy8gY29udmVyc2lvbiBtYWtlIGl0IHVucmVsaWFibGUgYW5kIGF0IHRoYXQgcG9pbnQgd2UgYWxyZWFkeSBjb252ZXJ0ZWRcbiAgICAgICAgICAgIC8vIHRvIHZpZXdwb3J0IGNvb3JkaW5hdGVzIGFuZCBzaW5jZSB0aGUgbGFiZWwgZ3JpZCBhbHJlYWR5IGN1bGxzIHRoZVxuICAgICAgICAgICAgLy8gbnVtYmVyIG9mIHBvdGVudGlhbCBsYWJlbHMgdG8gZGlzcGxheSB0aGlzIGxvb2tzIGxpa2UgYSBnb29kXG4gICAgICAgICAgICAvLyBwZXJmb3JtYW5jZSBjb21wcm9taXNlLlxuICAgICAgICAgICAgLy8gTk9URTogbGFiZWxHcmlkLmdldExhYmVsc1RvRGlzcGxheSBjb3VsZCBwcm9iYWJseSBvcHRpbWl6ZSBieSBub3RcbiAgICAgICAgICAgIC8vIGNvbnNpZGVyaW5nIGNlbGxzIG9idmlvdXNseSBvdXRzaWRlIG9mIHRoZSByYW5nZSBvZiB0aGUgY3VycmVudFxuICAgICAgICAgICAgLy8gdmlldyByZWN0YW5nbGUuXG4gICAgICAgICAgICBpZiAoeCA8IC1YX0xBQkVMX01BUkdJTiB8fFxuICAgICAgICAgICAgICAgIHggPiB0aGlzLndpZHRoICsgWF9MQUJFTF9NQVJHSU4gfHxcbiAgICAgICAgICAgICAgICB5IDwgLVlfTEFCRUxfTUFSR0lOIHx8XG4gICAgICAgICAgICAgICAgeSA+IHRoaXMuaGVpZ2h0ICsgWV9MQUJFTF9NQVJHSU4pXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAvLyBCZWNhdXNlIGRpc3BsYXllZCBlZGdlIGxhYmVscyBkZXBlbmQgZGlyZWN0bHkgb24gYWN0dWFsbHkgcmVuZGVyZWQgbm9kZVxuICAgICAgICAgICAgLy8gbGFiZWxzLCB3ZSBuZWVkIHRvIG9ubHkgYWRkIHRvIHRoaXMuZGlzcGxheWVkTGFiZWxzIG5vZGVzIHdob3NlIGxhYmVsXG4gICAgICAgICAgICAvLyBpcyByZW5kZXJlZC5cbiAgICAgICAgICAgIC8vIFRoaXMgbWFrZXMgdGhpcy5kaXNwbGF5ZWRMYWJlbHMgZGVwZW5kIG9uIHZpZXdwb3J0LCB3aGljaCBtaWdodCBiZWNvbWVcbiAgICAgICAgICAgIC8vIGFuIGlzc3VlIG9uY2Ugd2Ugc3RhcnQgbWVtb2l6aW5nIGdldExhYmVsc1RvRGlzcGxheS5cbiAgICAgICAgICAgIHRoaXMuZGlzcGxheWVkTGFiZWxzLmFkZChub2RlKTtcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MubGFiZWxSZW5kZXJlcihjb250ZXh0LCBfX2Fzc2lnbihfX2Fzc2lnbih7IGtleTogbm9kZSB9LCBkYXRhKSwgeyBzaXplOiBzaXplLCB4OiB4LCB5OiB5IH0pLCB0aGlzLnNldHRpbmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvIHJlbmRlciBlZGdlIGxhYmVscywgYmFzZWQgb24gd2hpY2ggbm9kZSBsYWJlbHMgd2VyZVxuICAgICAqIHJlbmRlcmVkLlxuICAgICAqXG4gICAgICogQHJldHVybiB7U2lnbWF9XG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLnJlbmRlckVkZ2VMYWJlbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5yZW5kZXJFZGdlTGFiZWxzKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5jYW52YXNDb250ZXh0cy5lZGdlTGFiZWxzO1xuICAgICAgICAvLyBDbGVhcmluZ1xuICAgICAgICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgICAgIHZhciBlZGdlTGFiZWxzVG9EaXNwbGF5ID0gKDAsIGxhYmVsc18xLmVkZ2VMYWJlbHNUb0Rpc3BsYXlGcm9tTm9kZXMpKHtcbiAgICAgICAgICAgIGdyYXBoOiB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgaG92ZXJlZE5vZGU6IHRoaXMuaG92ZXJlZE5vZGUsXG4gICAgICAgICAgICBkaXNwbGF5ZWROb2RlTGFiZWxzOiB0aGlzLmRpc3BsYXllZExhYmVscyxcbiAgICAgICAgICAgIGhpZ2hsaWdodGVkTm9kZXM6IHRoaXMuaGlnaGxpZ2h0ZWROb2RlcyxcbiAgICAgICAgfSkuY29uY2F0KHRoaXMuZWRnZXNXaXRoRm9yY2VkTGFiZWxzKTtcbiAgICAgICAgdmFyIGRpc3BsYXllZExhYmVscyA9IG5ldyBTZXQoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBlZGdlTGFiZWxzVG9EaXNwbGF5Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdmFyIGVkZ2UgPSBlZGdlTGFiZWxzVG9EaXNwbGF5W2ldLCBleHRyZW1pdGllcyA9IHRoaXMuZ3JhcGguZXh0cmVtaXRpZXMoZWRnZSksIHNvdXJjZURhdGEgPSB0aGlzLm5vZGVEYXRhQ2FjaGVbZXh0cmVtaXRpZXNbMF1dLCB0YXJnZXREYXRhID0gdGhpcy5ub2RlRGF0YUNhY2hlW2V4dHJlbWl0aWVzWzFdXSwgZWRnZURhdGEgPSB0aGlzLmVkZ2VEYXRhQ2FjaGVbZWRnZV07XG4gICAgICAgICAgICAvLyBJZiB0aGUgZWRnZSB3YXMgYWxyZWFkeSBkcmF3biAobGlrZSBpZiBpdCBpcyBlbGlnaWJsZSBBTkQgaGFzXG4gICAgICAgICAgICAvLyBgZm9yY2VMYWJlbGApLCB3ZSBkb24ndCB3YW50IHRvIGRyYXcgaXQgYWdhaW5cbiAgICAgICAgICAgIGlmIChkaXNwbGF5ZWRMYWJlbHMuaGFzKGVkZ2UpKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgLy8gSWYgdGhlIGVkZ2UgaXMgaGlkZGVuIHdlIGRvbid0IG5lZWQgdG8gZGlzcGxheSBpdHMgbGFiZWxcbiAgICAgICAgICAgIC8vIE5PVEU6IHRoZSB0ZXN0IG9uIHNvdXJjZURhdGEgJiB0YXJnZXREYXRhIGlzIHByb2JhYmx5IHBhcmFub2lkIGF0IHRoaXMgcG9pbnQ/XG4gICAgICAgICAgICBpZiAoZWRnZURhdGEuaGlkZGVuIHx8IHNvdXJjZURhdGEuaGlkZGVuIHx8IHRhcmdldERhdGEuaGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmVkZ2VMYWJlbFJlbmRlcmVyKGNvbnRleHQsIF9fYXNzaWduKF9fYXNzaWduKHsga2V5OiBlZGdlIH0sIGVkZ2VEYXRhKSwgeyBzaXplOiB0aGlzLnNjYWxlU2l6ZShlZGdlRGF0YS5zaXplKSB9KSwgX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oeyBrZXk6IGV4dHJlbWl0aWVzWzBdIH0sIHNvdXJjZURhdGEpLCB0aGlzLmZyYW1lZEdyYXBoVG9WaWV3cG9ydChzb3VyY2VEYXRhKSksIHsgc2l6ZTogdGhpcy5zY2FsZVNpemUoc291cmNlRGF0YS5zaXplKSB9KSwgX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oeyBrZXk6IGV4dHJlbWl0aWVzWzFdIH0sIHRhcmdldERhdGEpLCB0aGlzLmZyYW1lZEdyYXBoVG9WaWV3cG9ydCh0YXJnZXREYXRhKSksIHsgc2l6ZTogdGhpcy5zY2FsZVNpemUodGFyZ2V0RGF0YS5zaXplKSB9KSwgdGhpcy5zZXR0aW5ncyk7XG4gICAgICAgICAgICBkaXNwbGF5ZWRMYWJlbHMuYWRkKGVkZ2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gcmVuZGVyIHRoZSBoaWdobGlnaHRlZCBub2Rlcy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1NpZ21hfVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5yZW5kZXJIaWdobGlnaHRlZE5vZGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMuY2FudmFzQ29udGV4dHMuaG92ZXJzO1xuICAgICAgICAvLyBDbGVhcmluZ1xuICAgICAgICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgICAgIC8vIFJlbmRlcmluZ1xuICAgICAgICB2YXIgcmVuZGVyID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gX3RoaXMubm9kZURhdGFDYWNoZVtub2RlXTtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLmZyYW1lZEdyYXBoVG9WaWV3cG9ydChkYXRhKSwgeCA9IF9hLngsIHkgPSBfYS55O1xuICAgICAgICAgICAgdmFyIHNpemUgPSBfdGhpcy5zY2FsZVNpemUoZGF0YS5zaXplKTtcbiAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLmhvdmVyUmVuZGVyZXIoY29udGV4dCwgX19hc3NpZ24oX19hc3NpZ24oeyBrZXk6IG5vZGUgfSwgZGF0YSksIHsgc2l6ZTogc2l6ZSwgeDogeCwgeTogeSB9KSwgX3RoaXMuc2V0dGluZ3MpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgbm9kZXNUb1JlbmRlciA9IFtdO1xuICAgICAgICBpZiAodGhpcy5ob3ZlcmVkTm9kZSAmJiAhdGhpcy5ub2RlRGF0YUNhY2hlW3RoaXMuaG92ZXJlZE5vZGVdLmhpZGRlbikge1xuICAgICAgICAgICAgbm9kZXNUb1JlbmRlci5wdXNoKHRoaXMuaG92ZXJlZE5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAvLyBUaGUgaG92ZXJlZCBub2RlIGhhcyBhbHJlYWR5IGJlZW4gaGlnaGxpZ2h0ZWRcbiAgICAgICAgICAgIGlmIChub2RlICE9PSBfdGhpcy5ob3ZlcmVkTm9kZSlcbiAgICAgICAgICAgICAgICBub2Rlc1RvUmVuZGVyLnB1c2gobm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBEcmF3IGxhYmVsczpcbiAgICAgICAgbm9kZXNUb1JlbmRlci5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiByZW5kZXIobm9kZSk7IH0pO1xuICAgICAgICAvLyBEcmF3IFdlYkdMIG5vZGVzIG9uIHRvcCBvZiB0aGUgbGFiZWxzOlxuICAgICAgICB2YXIgbm9kZXNQZXJQcm9ncmFtcyA9IHt9O1xuICAgICAgICAvLyAxLiBDb3VudCBub2RlcyBwZXIgdHlwZTpcbiAgICAgICAgbm9kZXNUb1JlbmRlci5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IF90aGlzLm5vZGVEYXRhQ2FjaGVbbm9kZV0udHlwZTtcbiAgICAgICAgICAgIG5vZGVzUGVyUHJvZ3JhbXNbdHlwZV0gPSAobm9kZXNQZXJQcm9ncmFtc1t0eXBlXSB8fCAwKSArIDE7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyAyLiBBbGxvY2F0ZSBmb3IgZWFjaCB0eXBlIGZvciB0aGUgcHJvcGVyIG51bWJlciBvZiBub2Rlc1xuICAgICAgICBmb3IgKHZhciB0eXBlIGluIHRoaXMubm9kZUhvdmVyUHJvZ3JhbXMpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZUhvdmVyUHJvZ3JhbXNbdHlwZV0uYWxsb2NhdGUobm9kZXNQZXJQcm9ncmFtc1t0eXBlXSB8fCAwKTtcbiAgICAgICAgICAgIC8vIEFsc28gcmVzZXQgY291bnQsIHRvIHVzZSB3aGVuIHJlbmRlcmluZzpcbiAgICAgICAgICAgIG5vZGVzUGVyUHJvZ3JhbXNbdHlwZV0gPSAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIDMuIFByb2Nlc3MgYWxsIG5vZGVzIHRvIHJlbmRlcjpcbiAgICAgICAgbm9kZXNUb1JlbmRlci5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IF90aGlzLm5vZGVEYXRhQ2FjaGVbbm9kZV07XG4gICAgICAgICAgICBfdGhpcy5ub2RlSG92ZXJQcm9ncmFtc1tkYXRhLnR5cGVdLnByb2Nlc3MoZGF0YSwgZGF0YS5oaWRkZW4sIG5vZGVzUGVyUHJvZ3JhbXNbZGF0YS50eXBlXSsrKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIDQuIENsZWFyIGhvdmVyZWQgbm9kZXMgbGF5ZXI6XG4gICAgICAgIHRoaXMud2ViR0xDb250ZXh0cy5ob3Zlck5vZGVzLmNsZWFyKHRoaXMud2ViR0xDb250ZXh0cy5ob3Zlck5vZGVzLkNPTE9SX0JVRkZFUl9CSVQpO1xuICAgICAgICAvLyA1LiBSZW5kZXI6XG4gICAgICAgIGZvciAodmFyIHR5cGUgaW4gdGhpcy5ub2RlSG92ZXJQcm9ncmFtcykge1xuICAgICAgICAgICAgdmFyIHByb2dyYW0gPSB0aGlzLm5vZGVIb3ZlclByb2dyYW1zW3R5cGVdO1xuICAgICAgICAgICAgcHJvZ3JhbS5iaW5kKCk7XG4gICAgICAgICAgICBwcm9ncmFtLmJ1ZmZlckRhdGEoKTtcbiAgICAgICAgICAgIHByb2dyYW0ucmVuZGVyKHtcbiAgICAgICAgICAgICAgICBtYXRyaXg6IHRoaXMubWF0cml4LFxuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHQsXG4gICAgICAgICAgICAgICAgcmF0aW86IHRoaXMuY2FtZXJhLnJhdGlvLFxuICAgICAgICAgICAgICAgIGNvcnJlY3Rpb25SYXRpbzogdGhpcy5jb3JyZWN0aW9uUmF0aW8gLyB0aGlzLmNhbWVyYS5yYXRpbyxcbiAgICAgICAgICAgICAgICBzY2FsaW5nUmF0aW86IHRoaXMucGl4ZWxSYXRpbyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdXNlZCB0byBzY2hlZHVsZSBhIGhvdmVyIHJlbmRlci5cbiAgICAgKlxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5zY2hlZHVsZUhpZ2hsaWdodGVkTm9kZXNSZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLnJlbmRlckhpZ2hsaWdodGVkTm9kZXNGcmFtZSB8fCB0aGlzLnJlbmRlckZyYW1lKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLnJlbmRlckhpZ2hsaWdodGVkTm9kZXNGcmFtZSA9ICgwLCB1dGlsc18xLnJlcXVlc3RGcmFtZSkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gUmVzZXR0aW5nIHN0YXRlXG4gICAgICAgICAgICBfdGhpcy5yZW5kZXJIaWdobGlnaHRlZE5vZGVzRnJhbWUgPSBudWxsO1xuICAgICAgICAgICAgLy8gUmVuZGVyaW5nXG4gICAgICAgICAgICBfdGhpcy5yZW5kZXJIaWdobGlnaHRlZE5vZGVzKCk7XG4gICAgICAgICAgICBfdGhpcy5yZW5kZXJFZGdlTGFiZWxzKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gcmVuZGVyLlxuICAgICAqXG4gICAgICogQHJldHVybiB7U2lnbWF9XG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5lbWl0KFwiYmVmb3JlUmVuZGVyXCIpO1xuICAgICAgICB2YXIgZXhpdFJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmVtaXQoXCJhZnRlclJlbmRlclwiKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfTtcbiAgICAgICAgLy8gSWYgYSByZW5kZXIgd2FzIHNjaGVkdWxlZCwgd2UgY2FuY2VsIGl0XG4gICAgICAgIGlmICh0aGlzLnJlbmRlckZyYW1lKSB7XG4gICAgICAgICAgICAoMCwgdXRpbHNfMS5jYW5jZWxGcmFtZSkodGhpcy5yZW5kZXJGcmFtZSk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckZyYW1lID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMubmVlZFRvUHJvY2VzcyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5uZWVkVG9Tb2Z0UHJvY2VzcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZpcnN0IHdlIG5lZWQgdG8gcmVzaXplXG4gICAgICAgIHRoaXMucmVzaXplKCk7XG4gICAgICAgIC8vIENsZWFyaW5nIHRoZSBjYW52YXNlc1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIC8vIFJlY29tcHV0aW5nIHVzZWZ1bCBjYW1lcmEtcmVsYXRlZCB2YWx1ZXM6XG4gICAgICAgIHRoaXMudXBkYXRlQ2FjaGVkVmFsdWVzKCk7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgbm8gbm9kZXMgd2UgY2FuIHN0b3AgcmlnaHQgdGhlcmVcbiAgICAgICAgaWYgKCF0aGlzLmdyYXBoLm9yZGVyKVxuICAgICAgICAgICAgcmV0dXJuIGV4aXRSZW5kZXIoKTtcbiAgICAgICAgLy8gVE9ETzogaW1wcm92ZSB0aGlzIGhldXJpc3RpYyBvciBtb3ZlIHRvIHRoZSBjYXB0b3IgaXRzZWxmP1xuICAgICAgICAvLyBUT0RPOiBkZWFsIHdpdGggdGhlIHRvdWNoIGNhcHRvciBoZXJlIGFzIHdlbGxcbiAgICAgICAgdmFyIG1vdXNlQ2FwdG9yID0gdGhpcy5tb3VzZUNhcHRvcjtcbiAgICAgICAgdmFyIG1vdmluZyA9IHRoaXMuY2FtZXJhLmlzQW5pbWF0ZWQoKSB8fFxuICAgICAgICAgICAgbW91c2VDYXB0b3IuaXNNb3ZpbmcgfHxcbiAgICAgICAgICAgIG1vdXNlQ2FwdG9yLmRyYWdnZWRFdmVudHMgfHxcbiAgICAgICAgICAgIG1vdXNlQ2FwdG9yLmN1cnJlbnRXaGVlbERpcmVjdGlvbjtcbiAgICAgICAgLy8gVGhlbiB3ZSBuZWVkIHRvIGV4dHJhY3QgYSBtYXRyaXggZnJvbSB0aGUgY2FtZXJhXG4gICAgICAgIHZhciBjYW1lcmFTdGF0ZSA9IHRoaXMuY2FtZXJhLmdldFN0YXRlKCk7XG4gICAgICAgIHZhciB2aWV3cG9ydERpbWVuc2lvbnMgPSB0aGlzLmdldERpbWVuc2lvbnMoKTtcbiAgICAgICAgdmFyIGdyYXBoRGltZW5zaW9ucyA9IHRoaXMuZ2V0R3JhcGhEaW1lbnNpb25zKCk7XG4gICAgICAgIHZhciBwYWRkaW5nID0gdGhpcy5nZXRTZXR0aW5nKFwic3RhZ2VQYWRkaW5nXCIpIHx8IDA7XG4gICAgICAgIHRoaXMubWF0cml4ID0gKDAsIHV0aWxzXzEubWF0cml4RnJvbUNhbWVyYSkoY2FtZXJhU3RhdGUsIHZpZXdwb3J0RGltZW5zaW9ucywgZ3JhcGhEaW1lbnNpb25zLCBwYWRkaW5nKTtcbiAgICAgICAgdGhpcy5pbnZNYXRyaXggPSAoMCwgdXRpbHNfMS5tYXRyaXhGcm9tQ2FtZXJhKShjYW1lcmFTdGF0ZSwgdmlld3BvcnREaW1lbnNpb25zLCBncmFwaERpbWVuc2lvbnMsIHBhZGRpbmcsIHRydWUpO1xuICAgICAgICB0aGlzLmNvcnJlY3Rpb25SYXRpbyA9ICgwLCB1dGlsc18xLmdldE1hdHJpeEltcGFjdCkodGhpcy5tYXRyaXgsIGNhbWVyYVN0YXRlLCB2aWV3cG9ydERpbWVuc2lvbnMpO1xuICAgICAgICAvLyBEcmF3aW5nIG5vZGVzXG4gICAgICAgIGZvciAodmFyIHR5cGUgaW4gdGhpcy5ub2RlUHJvZ3JhbXMpIHtcbiAgICAgICAgICAgIHZhciBwcm9ncmFtID0gdGhpcy5ub2RlUHJvZ3JhbXNbdHlwZV07XG4gICAgICAgICAgICBwcm9ncmFtLmJpbmQoKTtcbiAgICAgICAgICAgIHByb2dyYW0uYnVmZmVyRGF0YSgpO1xuICAgICAgICAgICAgcHJvZ3JhbS5yZW5kZXIoe1xuICAgICAgICAgICAgICAgIG1hdHJpeDogdGhpcy5tYXRyaXgsXG4gICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodCxcbiAgICAgICAgICAgICAgICByYXRpbzogY2FtZXJhU3RhdGUucmF0aW8sXG4gICAgICAgICAgICAgICAgY29ycmVjdGlvblJhdGlvOiB0aGlzLmNvcnJlY3Rpb25SYXRpbyAvIGNhbWVyYVN0YXRlLnJhdGlvLFxuICAgICAgICAgICAgICAgIHNjYWxpbmdSYXRpbzogdGhpcy5waXhlbFJhdGlvLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRHJhd2luZyBlZGdlc1xuICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ3MuaGlkZUVkZ2VzT25Nb3ZlIHx8ICFtb3ZpbmcpIHtcbiAgICAgICAgICAgIGZvciAodmFyIHR5cGUgaW4gdGhpcy5lZGdlUHJvZ3JhbXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvZ3JhbSA9IHRoaXMuZWRnZVByb2dyYW1zW3R5cGVdO1xuICAgICAgICAgICAgICAgIHByb2dyYW0uYmluZCgpO1xuICAgICAgICAgICAgICAgIHByb2dyYW0uYnVmZmVyRGF0YSgpO1xuICAgICAgICAgICAgICAgIHByb2dyYW0ucmVuZGVyKHtcbiAgICAgICAgICAgICAgICAgICAgbWF0cml4OiB0aGlzLm1hdHJpeCxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHJhdGlvOiBjYW1lcmFTdGF0ZS5yYXRpbyxcbiAgICAgICAgICAgICAgICAgICAgY29ycmVjdGlvblJhdGlvOiB0aGlzLmNvcnJlY3Rpb25SYXRpbyAvIGNhbWVyYVN0YXRlLnJhdGlvLFxuICAgICAgICAgICAgICAgICAgICBzY2FsaW5nUmF0aW86IHRoaXMucGl4ZWxSYXRpbyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBEbyBub3QgZGlzcGxheSBsYWJlbHMgb24gbW92ZSBwZXIgc2V0dGluZ1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5oaWRlTGFiZWxzT25Nb3ZlICYmIG1vdmluZylcbiAgICAgICAgICAgIHJldHVybiBleGl0UmVuZGVyKCk7XG4gICAgICAgIHRoaXMucmVuZGVyTGFiZWxzKCk7XG4gICAgICAgIHRoaXMucmVuZGVyRWRnZUxhYmVscygpO1xuICAgICAgICB0aGlzLnJlbmRlckhpZ2hsaWdodGVkTm9kZXMoKTtcbiAgICAgICAgcmV0dXJuIGV4aXRSZW5kZXIoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEludGVybmFsIG1ldGhvZCB1c2VkIHRvIHVwZGF0ZSBleHBlbnNpdmUgYW5kIHRoZXJlZm9yZSBjYWNoZWQgdmFsdWVzXG4gICAgICogZWFjaCB0aW1lIHRoZSBjYW1lcmEgc3RhdGUgaXMgdXBkYXRlZC5cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUudXBkYXRlQ2FjaGVkVmFsdWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmF0aW8gPSB0aGlzLmNhbWVyYS5nZXRTdGF0ZSgpLnJhdGlvO1xuICAgICAgICB0aGlzLmNhbWVyYVNpemVSYXRpbyA9IE1hdGguc3FydChyYXRpbyk7XG4gICAgfTtcbiAgICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBQdWJsaWMgQVBJLlxuICAgICAqKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCByZXR1cm5pbmcgdGhlIHJlbmRlcmVyJ3MgY2FtZXJhLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Q2FtZXJhfVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5nZXRDYW1lcmEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbWVyYTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCByZXR1cm5pbmcgdGhlIGNvbnRhaW5lciBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0hUTUxFbGVtZW50fVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5nZXRDb250YWluZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCByZXR1cm5pbmcgdGhlIHJlbmRlcmVyJ3MgZ3JhcGguXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtHcmFwaH1cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUuZ2V0R3JhcGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyYXBoO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gc2V0IHRoZSByZW5kZXJlcidzIGdyYXBoLlxuICAgICAqXG4gICAgICogQHJldHVybiB7R3JhcGh9XG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLnNldEdyYXBoID0gZnVuY3Rpb24gKGdyYXBoKSB7XG4gICAgICAgIGlmIChncmFwaCA9PT0gdGhpcy5ncmFwaClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLy8gVW5iaW5kaW5nIGhhbmRsZXJzIG9uIHRoZSBjdXJyZW50IGdyYXBoXG4gICAgICAgIHRoaXMudW5iaW5kR3JhcGhIYW5kbGVycygpO1xuICAgICAgICAvLyBDbGVhcmluZyB0aGUgZ3JhcGggZGF0YSBjYWNoZXNcbiAgICAgICAgdGhpcy5ub2RlRGF0YUNhY2hlID0ge307XG4gICAgICAgIHRoaXMuZWRnZURhdGFDYWNoZSA9IHt9O1xuICAgICAgICAvLyBDbGVhbmluZyByZW5kZXJlciBzdGF0ZSB0aWVkIHRvIHRoZSBjdXJyZW50IGdyYXBoXG4gICAgICAgIHRoaXMuZGlzcGxheWVkTGFiZWxzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWROb2Rlcy5jbGVhcigpO1xuICAgICAgICB0aGlzLmhvdmVyZWROb2RlID0gbnVsbDtcbiAgICAgICAgdGhpcy5ob3ZlcmVkRWRnZSA9IG51bGw7XG4gICAgICAgIHRoaXMubm9kZXNXaXRoRm9yY2VkTGFiZWxzLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuZWRnZXNXaXRoRm9yY2VkTGFiZWxzLmxlbmd0aCA9IDA7XG4gICAgICAgIGlmICh0aGlzLmNoZWNrRWRnZXNFdmVudHNGcmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgKDAsIHV0aWxzXzEuY2FuY2VsRnJhbWUpKHRoaXMuY2hlY2tFZGdlc0V2ZW50c0ZyYW1lKTtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tFZGdlc0V2ZW50c0ZyYW1lID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBJbnN0YWxsaW5nIG5ldyBncmFwaFxuICAgICAgICB0aGlzLmdyYXBoID0gZ3JhcGg7XG4gICAgICAgIC8vIEJpbmRpbmcgbmV3IGhhbmRsZXJzXG4gICAgICAgIHRoaXMuYmluZEdyYXBoSGFuZGxlcnMoKTtcbiAgICAgICAgLy8gUmUtcmVuZGVyaW5nIG5vdyB0byBhdm9pZCBkaXNjcmVwYW5jaWVzIGZyb20gbm93IHRvIG5leHQgZnJhbWVcbiAgICAgICAgdGhpcy5wcm9jZXNzKCk7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgcmV0dXJuaW5nIHRoZSBtb3VzZSBjYXB0b3IuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtNb3VzZUNhcHRvcn1cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUuZ2V0TW91c2VDYXB0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vdXNlQ2FwdG9yO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHJldHVybmluZyB0aGUgdG91Y2ggY2FwdG9yLlxuICAgICAqXG4gICAgICogQHJldHVybiB7VG91Y2hDYXB0b3J9XG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLmdldFRvdWNoQ2FwdG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b3VjaENhcHRvcjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCByZXR1cm5pbmcgdGhlIGN1cnJlbnQgcmVuZGVyZXIncyBkaW1lbnNpb25zLlxuICAgICAqXG4gICAgICogQHJldHVybiB7RGltZW5zaW9uc31cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUuZ2V0RGltZW5zaW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHsgd2lkdGg6IHRoaXMud2lkdGgsIGhlaWdodDogdGhpcy5oZWlnaHQgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCByZXR1cm5pbmcgdGhlIGN1cnJlbnQgZ3JhcGgncyBkaW1lbnNpb25zLlxuICAgICAqXG4gICAgICogQHJldHVybiB7RGltZW5zaW9uc31cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUuZ2V0R3JhcGhEaW1lbnNpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZXh0ZW50ID0gdGhpcy5jdXN0b21CQm94IHx8IHRoaXMubm9kZUV4dGVudDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdpZHRoOiBleHRlbnQueFsxXSAtIGV4dGVudC54WzBdIHx8IDEsXG4gICAgICAgICAgICBoZWlnaHQ6IGV4dGVudC55WzFdIC0gZXh0ZW50LnlbMF0gfHwgMSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvIGdldCBhbGwgdGhlIHNpZ21hIG5vZGUgYXR0cmlidXRlcy5cbiAgICAgKiBJdCdzIHVzZWZ1bGwgZm9yIGV4YW1wbGUgdG8gZ2V0IHRoZSBwb3NpdGlvbiBvZiBhIG5vZGVcbiAgICAgKiBhbmQgdG8gZ2V0IHZhbHVlcyB0aGF0IGFyZSBzZXQgYnkgdGhlIG5vZGVSZWR1Y2VyXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGtleSAtIFRoZSBub2RlJ3Mga2V5LlxuICAgICAqIEByZXR1cm4ge05vZGVEaXNwbGF5RGF0YSB8IHVuZGVmaW5lZH0gQSBjb3B5IG9mIHRoZSBkZXNpcmVkIG5vZGUncyBhdHRyaWJ1dGUgb3IgdW5kZWZpbmVkIGlmIG5vdCBmb3VuZFxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5nZXROb2RlRGlzcGxheURhdGEgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciBub2RlID0gdGhpcy5ub2RlRGF0YUNhY2hlW2tleV07XG4gICAgICAgIHJldHVybiBub2RlID8gT2JqZWN0LmFzc2lnbih7fSwgbm9kZSkgOiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdXNlZCB0byBnZXQgYWxsIHRoZSBzaWdtYSBlZGdlIGF0dHJpYnV0ZXMuXG4gICAgICogSXQncyB1c2VmdWxsIGZvciBleGFtcGxlIHRvIGdldCB2YWx1ZXMgdGhhdCBhcmUgc2V0IGJ5IHRoZSBlZGdlUmVkdWNlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge3N0cmluZ30ga2V5IC0gVGhlIGVkZ2UncyBrZXkuXG4gICAgICogQHJldHVybiB7RWRnZURpc3BsYXlEYXRhIHwgdW5kZWZpbmVkfSBBIGNvcHkgb2YgdGhlIGRlc2lyZWQgZWRnZSdzIGF0dHJpYnV0ZSBvciB1bmRlZmluZWQgaWYgbm90IGZvdW5kXG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLmdldEVkZ2VEaXNwbGF5RGF0YSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIGVkZ2UgPSB0aGlzLmVkZ2VEYXRhQ2FjaGVba2V5XTtcbiAgICAgICAgcmV0dXJuIGVkZ2UgPyBPYmplY3QuYXNzaWduKHt9LCBlZGdlKSA6IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCByZXR1cm5pbmcgYSBjb3B5IG9mIHRoZSBzZXR0aW5ncyBjb2xsZWN0aW9uLlxuICAgICAqXG4gICAgICogQHJldHVybiB7U2V0dGluZ3N9IEEgY29weSBvZiB0aGUgc2V0dGluZ3MgY29sbGVjdGlvbi5cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUuZ2V0U2V0dGluZ3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbih7fSwgdGhpcy5zZXR0aW5ncyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgcmV0dXJuaW5nIHRoZSBjdXJyZW50IHZhbHVlIGZvciBhIGdpdmVuIHNldHRpbmcga2V5LlxuICAgICAqXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSBrZXkgLSBUaGUgc2V0dGluZyBrZXkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm4ge2FueX0gVGhlIHZhbHVlIGF0dGFjaGVkIHRvIHRoaXMgc2V0dGluZyBrZXkgb3IgdW5kZWZpbmVkIGlmIG5vdCBmb3VuZFxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5nZXRTZXR0aW5nID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5nc1trZXldO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHNldHRpbmcgdGhlIHZhbHVlIG9mIGEgZ2l2ZW4gc2V0dGluZyBrZXkuIE5vdGUgdGhhdCB0aGlzIHdpbGwgc2NoZWR1bGVcbiAgICAgKiBhIG5ldyByZW5kZXIgbmV4dCBmcmFtZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge3N0cmluZ30ga2V5IC0gVGhlIHNldHRpbmcga2V5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0gIHthbnl9ICAgIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJuIHtTaWdtYX1cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUuc2V0U2V0dGluZyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3Nba2V5XSA9IHZhbHVlO1xuICAgICAgICAoMCwgc2V0dGluZ3NfMS52YWxpZGF0ZVNldHRpbmdzKSh0aGlzLnNldHRpbmdzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVTZXR0aW5nc1VwZGF0ZSgpO1xuICAgICAgICB0aGlzLm5lZWRUb1Byb2Nlc3MgPSB0cnVlOyAvLyBUT0RPOiBzb21lIGtleXMgbWF5IHdvcmsgd2l0aCBvbmx5IG5lZWRUb1NvZnRQcm9jZXNzIG9yIGV2ZW4gbm90aGluZ1xuICAgICAgICB0aGlzLl9zY2hlZHVsZVJlZnJlc2goKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdXBkYXRpbmcgdGhlIHZhbHVlIG9mIGEgZ2l2ZW4gc2V0dGluZyBrZXkgdXNpbmcgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uLlxuICAgICAqIE5vdGUgdGhhdCB0aGlzIHdpbGwgc2NoZWR1bGUgYSBuZXcgcmVuZGVyIG5leHQgZnJhbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9ICAga2V5ICAgICAtIFRoZSBzZXR0aW5nIGtleSB0byBzZXQuXG4gICAgICogQHBhcmFtICB7ZnVuY3Rpb259IHVwZGF0ZXIgLSBUaGUgdXBkYXRlIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm4ge1NpZ21hfVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS51cGRhdGVTZXR0aW5nID0gZnVuY3Rpb24gKGtleSwgdXBkYXRlcikge1xuICAgICAgICB0aGlzLnNldHRpbmdzW2tleV0gPSB1cGRhdGVyKHRoaXMuc2V0dGluZ3Nba2V5XSk7XG4gICAgICAgICgwLCBzZXR0aW5nc18xLnZhbGlkYXRlU2V0dGluZ3MpKHRoaXMuc2V0dGluZ3MpO1xuICAgICAgICB0aGlzLmhhbmRsZVNldHRpbmdzVXBkYXRlKCk7XG4gICAgICAgIHRoaXMubmVlZFRvUHJvY2VzcyA9IHRydWU7IC8vIFRPRE86IHNvbWUga2V5cyBtYXkgd29yayB3aXRoIG9ubHkgbmVlZFRvU29mdFByb2Nlc3Mgb3IgZXZlbiBub3RoaW5nXG4gICAgICAgIHRoaXMuX3NjaGVkdWxlUmVmcmVzaCgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvIHJlc2l6ZSB0aGUgcmVuZGVyZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtTaWdtYX1cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcHJldmlvdXNXaWR0aCA9IHRoaXMud2lkdGgsIHByZXZpb3VzSGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG4gICAgICAgIHRoaXMud2lkdGggPSB0aGlzLmNvbnRhaW5lci5vZmZzZXRXaWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmNvbnRhaW5lci5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIHRoaXMucGl4ZWxSYXRpbyA9ICgwLCB1dGlsc18xLmdldFBpeGVsUmF0aW8pKCk7XG4gICAgICAgIGlmICh0aGlzLndpZHRoID09PSAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5hbGxvd0ludmFsaWRDb250YWluZXIpXG4gICAgICAgICAgICAgICAgdGhpcy53aWR0aCA9IDE7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2lnbWE6IENvbnRhaW5lciBoYXMgbm8gd2lkdGguIFlvdSBjYW4gc2V0IHRoZSBhbGxvd0ludmFsaWRDb250YWluZXIgc2V0dGluZyB0byB0cnVlIHRvIHN0b3Agc2VlaW5nIHRoaXMgZXJyb3IuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhlaWdodCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuYWxsb3dJbnZhbGlkQ29udGFpbmVyKVxuICAgICAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gMTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaWdtYTogQ29udGFpbmVyIGhhcyBubyBoZWlnaHQuIFlvdSBjYW4gc2V0IHRoZSBhbGxvd0ludmFsaWRDb250YWluZXIgc2V0dGluZyB0byB0cnVlIHRvIHN0b3Agc2VlaW5nIHRoaXMgZXJyb3IuXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIG5vdGhpbmcgaGFzIGNoYW5nZWQsIHdlIGNhbiBzdG9wIHJpZ2h0IGhlcmVcbiAgICAgICAgaWYgKHByZXZpb3VzV2lkdGggPT09IHRoaXMud2lkdGggJiYgcHJldmlvdXNIZWlnaHQgPT09IHRoaXMuaGVpZ2h0KVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIHRoaXMuZW1pdChcInJlc2l6ZVwiKTtcbiAgICAgICAgLy8gU2l6aW5nIGRvbSBlbGVtZW50c1xuICAgICAgICBmb3IgKHZhciBpZCBpbiB0aGlzLmVsZW1lbnRzKSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudHNbaWRdO1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IHRoaXMud2lkdGggKyBcInB4XCI7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLmhlaWdodCA9IHRoaXMuaGVpZ2h0ICsgXCJweFwiO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNpemluZyBjYW52YXMgY29udGV4dHNcbiAgICAgICAgZm9yICh2YXIgaWQgaW4gdGhpcy5jYW52YXNDb250ZXh0cykge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50c1tpZF0uc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgdGhpcy53aWR0aCAqIHRoaXMucGl4ZWxSYXRpbyArIFwicHhcIik7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzW2lkXS5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgdGhpcy5oZWlnaHQgKiB0aGlzLnBpeGVsUmF0aW8gKyBcInB4XCIpO1xuICAgICAgICAgICAgaWYgKHRoaXMucGl4ZWxSYXRpbyAhPT0gMSlcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhc0NvbnRleHRzW2lkXS5zY2FsZSh0aGlzLnBpeGVsUmF0aW8sIHRoaXMucGl4ZWxSYXRpbyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2l6aW5nIFdlYkdMIGNvbnRleHRzXG4gICAgICAgIGZvciAodmFyIGlkIGluIHRoaXMud2ViR0xDb250ZXh0cykge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50c1tpZF0uc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgdGhpcy53aWR0aCAqIHRoaXMucGl4ZWxSYXRpbyArIFwicHhcIik7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzW2lkXS5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgdGhpcy5oZWlnaHQgKiB0aGlzLnBpeGVsUmF0aW8gKyBcInB4XCIpO1xuICAgICAgICAgICAgdGhpcy53ZWJHTENvbnRleHRzW2lkXS52aWV3cG9ydCgwLCAwLCB0aGlzLndpZHRoICogdGhpcy5waXhlbFJhdGlvLCB0aGlzLmhlaWdodCAqIHRoaXMucGl4ZWxSYXRpbyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdXNlZCB0byBjbGVhciBhbGwgdGhlIGNhbnZhc2VzLlxuICAgICAqXG4gICAgICogQHJldHVybiB7U2lnbWF9XG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLndlYkdMQ29udGV4dHMubm9kZXMuY2xlYXIodGhpcy53ZWJHTENvbnRleHRzLm5vZGVzLkNPTE9SX0JVRkZFUl9CSVQpO1xuICAgICAgICB0aGlzLndlYkdMQ29udGV4dHMuZWRnZXMuY2xlYXIodGhpcy53ZWJHTENvbnRleHRzLmVkZ2VzLkNPTE9SX0JVRkZFUl9CSVQpO1xuICAgICAgICB0aGlzLndlYkdMQ29udGV4dHMuaG92ZXJOb2Rlcy5jbGVhcih0aGlzLndlYkdMQ29udGV4dHMuaG92ZXJOb2Rlcy5DT0xPUl9CVUZGRVJfQklUKTtcbiAgICAgICAgdGhpcy5jYW52YXNDb250ZXh0cy5sYWJlbHMuY2xlYXJSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5jYW52YXNDb250ZXh0cy5ob3ZlcnMuY2xlYXJSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5jYW52YXNDb250ZXh0cy5lZGdlTGFiZWxzLmNsZWFyUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gcmVmcmVzaCBhbGwgY29tcHV0ZWQgZGF0YS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1NpZ21hfVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm5lZWRUb1Byb2Nlc3MgPSB0cnVlO1xuICAgICAgICB0aGlzLl9yZWZyZXNoKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gcmVmcmVzaCBhbGwgY29tcHV0ZWQgZGF0YSwgYXQgdGhlIG5leHQgYXZhaWxhYmxlIGZyYW1lLlxuICAgICAqIElmIHRoaXMgbWV0aG9kIGhhcyBhbHJlYWR5IGJlZW4gY2FsbGVkIHRoaXMgZnJhbWUsIHRoZW4gaXQgd2lsbCBvbmx5IHJlbmRlciBvbmNlIGF0IHRoZSBuZXh0IGF2YWlsYWJsZSBmcmFtZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1NpZ21hfVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5zY2hlZHVsZVJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubmVlZFRvUHJvY2VzcyA9IHRydWU7XG4gICAgICAgIHRoaXMuX3NjaGVkdWxlUmVmcmVzaCgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvICh1bil6b29tLCB3aGlsZSBwcmVzZXJ2aW5nIHRoZSBwb3NpdGlvbiBvZiBhIHZpZXdwb3J0IHBvaW50LlxuICAgICAqIFVzZWQgZm9yIGluc3RhbmNlIHRvIHpvb20gXCJvbiB0aGUgbW91c2UgY3Vyc29yXCIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmlld3BvcnRUYXJnZXRcbiAgICAgKiBAcGFyYW0gbmV3UmF0aW9cbiAgICAgKiBAcmV0dXJuIHtDYW1lcmFTdGF0ZX1cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUuZ2V0Vmlld3BvcnRab29tZWRTdGF0ZSA9IGZ1bmN0aW9uICh2aWV3cG9ydFRhcmdldCwgbmV3UmF0aW8pIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5jYW1lcmEuZ2V0U3RhdGUoKSwgcmF0aW8gPSBfYS5yYXRpbywgYW5nbGUgPSBfYS5hbmdsZSwgeCA9IF9hLngsIHkgPSBfYS55O1xuICAgICAgICAvLyBUT0RPOiBoYW5kbGUgbWF4IHpvb21cbiAgICAgICAgdmFyIHJhdGlvRGlmZiA9IG5ld1JhdGlvIC8gcmF0aW87XG4gICAgICAgIHZhciBjZW50ZXIgPSB7XG4gICAgICAgICAgICB4OiB0aGlzLndpZHRoIC8gMixcbiAgICAgICAgICAgIHk6IHRoaXMuaGVpZ2h0IC8gMixcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGdyYXBoTW91c2VQb3NpdGlvbiA9IHRoaXMudmlld3BvcnRUb0ZyYW1lZEdyYXBoKHZpZXdwb3J0VGFyZ2V0KTtcbiAgICAgICAgdmFyIGdyYXBoQ2VudGVyUG9zaXRpb24gPSB0aGlzLnZpZXdwb3J0VG9GcmFtZWRHcmFwaChjZW50ZXIpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYW5nbGU6IGFuZ2xlLFxuICAgICAgICAgICAgeDogKGdyYXBoTW91c2VQb3NpdGlvbi54IC0gZ3JhcGhDZW50ZXJQb3NpdGlvbi54KSAqICgxIC0gcmF0aW9EaWZmKSArIHgsXG4gICAgICAgICAgICB5OiAoZ3JhcGhNb3VzZVBvc2l0aW9uLnkgLSBncmFwaENlbnRlclBvc2l0aW9uLnkpICogKDEgLSByYXRpb0RpZmYpICsgeSxcbiAgICAgICAgICAgIHJhdGlvOiBuZXdSYXRpbyxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCByZXR1cm5pbmcgdGhlIGFic3RyYWN0IHJlY3RhbmdsZSBjb250YWluaW5nIHRoZSBncmFwaCBhY2NvcmRpbmdcbiAgICAgKiB0byB0aGUgY2FtZXJhJ3Mgc3RhdGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9IC0gVGhlIHZpZXcncyByZWN0YW5nbGUuXG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLnZpZXdSZWN0YW5nbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRPRE86IHJlZHVjZSByZWxhdGl2ZSBtYXJnaW4/XG4gICAgICAgIHZhciBtYXJnaW5YID0gKDAgKiB0aGlzLndpZHRoKSAvIDgsIG1hcmdpblkgPSAoMCAqIHRoaXMuaGVpZ2h0KSAvIDg7XG4gICAgICAgIHZhciBwMSA9IHRoaXMudmlld3BvcnRUb0ZyYW1lZEdyYXBoKHsgeDogMCAtIG1hcmdpblgsIHk6IDAgLSBtYXJnaW5ZIH0pLCBwMiA9IHRoaXMudmlld3BvcnRUb0ZyYW1lZEdyYXBoKHsgeDogdGhpcy53aWR0aCArIG1hcmdpblgsIHk6IDAgLSBtYXJnaW5ZIH0pLCBoID0gdGhpcy52aWV3cG9ydFRvRnJhbWVkR3JhcGgoeyB4OiAwLCB5OiB0aGlzLmhlaWdodCArIG1hcmdpblkgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4MTogcDEueCxcbiAgICAgICAgICAgIHkxOiBwMS55LFxuICAgICAgICAgICAgeDI6IHAyLngsXG4gICAgICAgICAgICB5MjogcDIueSxcbiAgICAgICAgICAgIGhlaWdodDogcDIueSAtIGgueSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCByZXR1cm5pbmcgdGhlIGNvb3JkaW5hdGVzIG9mIGEgcG9pbnQgZnJvbSB0aGUgZnJhbWVkIGdyYXBoIHN5c3RlbSB0byB0aGUgdmlld3BvcnQgc3lzdGVtLiBJdCBhbGxvd3NcbiAgICAgKiBvdmVycmlkaW5nIGFueXRoaW5nIHRoYXQgaXMgdXNlZCB0byBnZXQgdGhlIHRyYW5zbGF0aW9uIG1hdHJpeCwgb3IgZXZlbiB0aGUgbWF0cml4IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEJlIGNhcmVmdWwgaWYgb3ZlcnJpZGluZyBkaW1lbnNpb25zLCBwYWRkaW5nIG9yIGNhbWVyYVN0YXRlLCBhcyB0aGUgY29tcHV0YXRpb24gb2YgdGhlIG1hdHJpeCBpcyBub3QgdGhlIGxpZ2h0ZXN0XG4gICAgICogb2YgY29tcHV0YXRpb25zLlxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5mcmFtZWRHcmFwaFRvVmlld3BvcnQgPSBmdW5jdGlvbiAoY29vcmRpbmF0ZXMsIG92ZXJyaWRlKSB7XG4gICAgICAgIGlmIChvdmVycmlkZSA9PT0gdm9pZCAwKSB7IG92ZXJyaWRlID0ge307IH1cbiAgICAgICAgdmFyIHJlY29tcHV0ZU1hdHJpeCA9ICEhb3ZlcnJpZGUuY2FtZXJhU3RhdGUgfHwgISFvdmVycmlkZS52aWV3cG9ydERpbWVuc2lvbnMgfHwgISFvdmVycmlkZS5ncmFwaERpbWVuc2lvbnM7XG4gICAgICAgIHZhciBtYXRyaXggPSBvdmVycmlkZS5tYXRyaXhcbiAgICAgICAgICAgID8gb3ZlcnJpZGUubWF0cml4XG4gICAgICAgICAgICA6IHJlY29tcHV0ZU1hdHJpeFxuICAgICAgICAgICAgICAgID8gKDAsIHV0aWxzXzEubWF0cml4RnJvbUNhbWVyYSkob3ZlcnJpZGUuY2FtZXJhU3RhdGUgfHwgdGhpcy5jYW1lcmEuZ2V0U3RhdGUoKSwgb3ZlcnJpZGUudmlld3BvcnREaW1lbnNpb25zIHx8IHRoaXMuZ2V0RGltZW5zaW9ucygpLCBvdmVycmlkZS5ncmFwaERpbWVuc2lvbnMgfHwgdGhpcy5nZXRHcmFwaERpbWVuc2lvbnMoKSwgb3ZlcnJpZGUucGFkZGluZyB8fCB0aGlzLmdldFNldHRpbmcoXCJzdGFnZVBhZGRpbmdcIikgfHwgMClcbiAgICAgICAgICAgICAgICA6IHRoaXMubWF0cml4O1xuICAgICAgICB2YXIgdmlld3BvcnRQb3MgPSAoMCwgbWF0cmljZXNfMS5tdWx0aXBseVZlYzIpKG1hdHJpeCwgY29vcmRpbmF0ZXMpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogKCgxICsgdmlld3BvcnRQb3MueCkgKiB0aGlzLndpZHRoKSAvIDIsXG4gICAgICAgICAgICB5OiAoKDEgLSB2aWV3cG9ydFBvcy55KSAqIHRoaXMuaGVpZ2h0KSAvIDIsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgcmV0dXJuaW5nIHRoZSBjb29yZGluYXRlcyBvZiBhIHBvaW50IGZyb20gdGhlIHZpZXdwb3J0IHN5c3RlbSB0byB0aGUgZnJhbWVkIGdyYXBoIHN5c3RlbS4gSXQgYWxsb3dzXG4gICAgICogb3ZlcnJpZGluZyBhbnl0aGluZyB0aGF0IGlzIHVzZWQgdG8gZ2V0IHRoZSB0cmFuc2xhdGlvbiBtYXRyaXgsIG9yIGV2ZW4gdGhlIG1hdHJpeCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBCZSBjYXJlZnVsIGlmIG92ZXJyaWRpbmcgZGltZW5zaW9ucywgcGFkZGluZyBvciBjYW1lcmFTdGF0ZSwgYXMgdGhlIGNvbXB1dGF0aW9uIG9mIHRoZSBtYXRyaXggaXMgbm90IHRoZSBsaWdodGVzdFxuICAgICAqIG9mIGNvbXB1dGF0aW9ucy5cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUudmlld3BvcnRUb0ZyYW1lZEdyYXBoID0gZnVuY3Rpb24gKGNvb3JkaW5hdGVzLCBvdmVycmlkZSkge1xuICAgICAgICBpZiAob3ZlcnJpZGUgPT09IHZvaWQgMCkgeyBvdmVycmlkZSA9IHt9OyB9XG4gICAgICAgIHZhciByZWNvbXB1dGVNYXRyaXggPSAhIW92ZXJyaWRlLmNhbWVyYVN0YXRlIHx8ICEhb3ZlcnJpZGUudmlld3BvcnREaW1lbnNpb25zIHx8ICFvdmVycmlkZS5ncmFwaERpbWVuc2lvbnM7XG4gICAgICAgIHZhciBpbnZNYXRyaXggPSBvdmVycmlkZS5tYXRyaXhcbiAgICAgICAgICAgID8gb3ZlcnJpZGUubWF0cml4XG4gICAgICAgICAgICA6IHJlY29tcHV0ZU1hdHJpeFxuICAgICAgICAgICAgICAgID8gKDAsIHV0aWxzXzEubWF0cml4RnJvbUNhbWVyYSkob3ZlcnJpZGUuY2FtZXJhU3RhdGUgfHwgdGhpcy5jYW1lcmEuZ2V0U3RhdGUoKSwgb3ZlcnJpZGUudmlld3BvcnREaW1lbnNpb25zIHx8IHRoaXMuZ2V0RGltZW5zaW9ucygpLCBvdmVycmlkZS5ncmFwaERpbWVuc2lvbnMgfHwgdGhpcy5nZXRHcmFwaERpbWVuc2lvbnMoKSwgb3ZlcnJpZGUucGFkZGluZyB8fCB0aGlzLmdldFNldHRpbmcoXCJzdGFnZVBhZGRpbmdcIikgfHwgMCwgdHJ1ZSlcbiAgICAgICAgICAgICAgICA6IHRoaXMuaW52TWF0cml4O1xuICAgICAgICB2YXIgcmVzID0gKDAsIG1hdHJpY2VzXzEubXVsdGlwbHlWZWMyKShpbnZNYXRyaXgsIHtcbiAgICAgICAgICAgIHg6IChjb29yZGluYXRlcy54IC8gdGhpcy53aWR0aCkgKiAyIC0gMSxcbiAgICAgICAgICAgIHk6IDEgLSAoY29vcmRpbmF0ZXMueSAvIHRoaXMuaGVpZ2h0KSAqIDIsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaXNOYU4ocmVzLngpKVxuICAgICAgICAgICAgcmVzLnggPSAwO1xuICAgICAgICBpZiAoaXNOYU4ocmVzLnkpKVxuICAgICAgICAgICAgcmVzLnkgPSAwO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gdHJhbnNsYXRlIGEgcG9pbnQncyBjb29yZGluYXRlcyBmcm9tIHRoZSB2aWV3cG9ydCBzeXN0ZW0gKHBpeGVsIGRpc3RhbmNlIGZyb20gdGhlIHRvcC1sZWZ0IG9mIHRoZVxuICAgICAqIHN0YWdlKSB0byB0aGUgZ3JhcGggc3lzdGVtICh0aGUgcmVmZXJlbmNlIHN5c3RlbSBvZiBkYXRhIGFzIHRoZXkgYXJlIGluIHRoZSBnaXZlbiBncmFwaCBpbnN0YW5jZSkuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBhY2NlcHRzIGFuIG9wdGlvbmFsIGNhbWVyYSB3aGljaCBjYW4gYmUgdXNlZnVsIGlmIHlvdSBuZWVkIHRvIHRyYW5zbGF0ZSBjb29yZGluYXRlc1xuICAgICAqIGJhc2VkIG9uIGEgZGlmZmVyZW50IHZpZXcgdGhhbiB0aGUgb25lIGJlaW5nIGN1cnJlbnRseSBiZWluZyBkaXNwbGF5ZWQgb24gc2NyZWVuLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtDb29yZGluYXRlc30gICAgICAgICAgICAgICAgICB2aWV3cG9ydFBvaW50XG4gICAgICogQHBhcmFtIHtDb29yZGluYXRlQ29udmVyc2lvbk92ZXJyaWRlfSBvdmVycmlkZVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS52aWV3cG9ydFRvR3JhcGggPSBmdW5jdGlvbiAodmlld3BvcnRQb2ludCwgb3ZlcnJpZGUpIHtcbiAgICAgICAgaWYgKG92ZXJyaWRlID09PSB2b2lkIDApIHsgb3ZlcnJpZGUgPSB7fTsgfVxuICAgICAgICByZXR1cm4gdGhpcy5ub3JtYWxpemF0aW9uRnVuY3Rpb24uaW52ZXJzZSh0aGlzLnZpZXdwb3J0VG9GcmFtZWRHcmFwaCh2aWV3cG9ydFBvaW50LCBvdmVycmlkZSkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gdHJhbnNsYXRlIGEgcG9pbnQncyBjb29yZGluYXRlcyBmcm9tIHRoZSBncmFwaCBzeXN0ZW0gKHRoZSByZWZlcmVuY2Ugc3lzdGVtIG9mIGRhdGEgYXMgdGhleSBhcmUgaW5cbiAgICAgKiB0aGUgZ2l2ZW4gZ3JhcGggaW5zdGFuY2UpIHRvIHRoZSB2aWV3cG9ydCBzeXN0ZW0gKHBpeGVsIGRpc3RhbmNlIGZyb20gdGhlIHRvcC1sZWZ0IG9mIHRoZSBzdGFnZSkuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBhY2NlcHRzIGFuIG9wdGlvbmFsIGNhbWVyYSB3aGljaCBjYW4gYmUgdXNlZnVsIGlmIHlvdSBuZWVkIHRvIHRyYW5zbGF0ZSBjb29yZGluYXRlc1xuICAgICAqIGJhc2VkIG9uIGEgZGlmZmVyZW50IHZpZXcgdGhhbiB0aGUgb25lIGJlaW5nIGN1cnJlbnRseSBiZWluZyBkaXNwbGF5ZWQgb24gc2NyZWVuLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtDb29yZGluYXRlc30gICAgICAgICAgICAgICAgICBncmFwaFBvaW50XG4gICAgICogQHBhcmFtIHtDb29yZGluYXRlQ29udmVyc2lvbk92ZXJyaWRlfSBvdmVycmlkZVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5ncmFwaFRvVmlld3BvcnQgPSBmdW5jdGlvbiAoZ3JhcGhQb2ludCwgb3ZlcnJpZGUpIHtcbiAgICAgICAgaWYgKG92ZXJyaWRlID09PSB2b2lkIDApIHsgb3ZlcnJpZGUgPSB7fTsgfVxuICAgICAgICByZXR1cm4gdGhpcy5mcmFtZWRHcmFwaFRvVmlld3BvcnQodGhpcy5ub3JtYWxpemF0aW9uRnVuY3Rpb24oZ3JhcGhQb2ludCksIG92ZXJyaWRlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCByZXR1cm5pbmcgdGhlIGdyYXBoJ3MgYm91bmRpbmcgYm94LlxuICAgICAqXG4gICAgICogQHJldHVybiB7eyB4OiBFeHRlbnQsIHk6IEV4dGVudCB9fVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5nZXRCQm94ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIHV0aWxzXzEuZ3JhcGhFeHRlbnQpKHRoaXMuZ3JhcGgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHJldHVybmluZyB0aGUgZ3JhcGgncyBjdXN0b20gYm91bmRpbmcgYm94LCBpZiBhbnkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHt7IHg6IEV4dGVudCwgeTogRXh0ZW50IH0gfCBudWxsfVxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5nZXRDdXN0b21CQm94ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXN0b21CQm94O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gb3ZlcnJpZGUgdGhlIGdyYXBoJ3MgYm91bmRpbmcgYm94IHdpdGggYSBjdXN0b20gb25lLiBHaXZlIGBudWxsYCBhcyB0aGUgYXJndW1lbnQgdG8gc3RvcCBvdmVycmlkaW5nLlxuICAgICAqXG4gICAgICogQHJldHVybiB7U2lnbWF9XG4gICAgICovXG4gICAgU2lnbWEucHJvdG90eXBlLnNldEN1c3RvbUJCb3ggPSBmdW5jdGlvbiAoY3VzdG9tQkJveCkge1xuICAgICAgICB0aGlzLmN1c3RvbUJCb3ggPSBjdXN0b21CQm94O1xuICAgICAgICB0aGlzLl9zY2hlZHVsZVJlZnJlc2goKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdXNlZCB0byBzaHV0IHRoZSBjb250YWluZXIgJiByZWxlYXNlIGV2ZW50IGxpc3RlbmVycy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3VuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUua2lsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRW1pdHRpbmcgXCJraWxsXCIgZXZlbnRzIHNvIHRoYXQgcGx1Z2lucyBhbmQgc3VjaCBjYW4gY2xlYW51cFxuICAgICAgICB0aGlzLmVtaXQoXCJraWxsXCIpO1xuICAgICAgICAvLyBSZWxlYXNpbmcgZXZlbnRzXG4gICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgIC8vIFJlbGVhc2luZyBjYW1lcmEgaGFuZGxlcnNcbiAgICAgICAgdGhpcy5jYW1lcmEucmVtb3ZlTGlzdGVuZXIoXCJ1cGRhdGVkXCIsIHRoaXMuYWN0aXZlTGlzdGVuZXJzLmNhbWVyYSk7XG4gICAgICAgIC8vIFJlbGVhc2luZyBET00gZXZlbnRzICYgY2FwdG9yc1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLmFjdGl2ZUxpc3RlbmVycy5oYW5kbGVSZXNpemUpO1xuICAgICAgICB0aGlzLm1vdXNlQ2FwdG9yLmtpbGwoKTtcbiAgICAgICAgdGhpcy50b3VjaENhcHRvci5raWxsKCk7XG4gICAgICAgIC8vIFJlbGVhc2luZyBncmFwaCBoYW5kbGVyc1xuICAgICAgICB0aGlzLnVuYmluZEdyYXBoSGFuZGxlcnMoKTtcbiAgICAgICAgLy8gUmVsZWFzaW5nIGNhY2hlICYgc3RhdGVcbiAgICAgICAgdGhpcy5xdWFkdHJlZSA9IG5ldyBxdWFkdHJlZV8xLmRlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5ub2RlRGF0YUNhY2hlID0ge307XG4gICAgICAgIHRoaXMuZWRnZURhdGFDYWNoZSA9IHt9O1xuICAgICAgICB0aGlzLm5vZGVzV2l0aEZvcmNlZExhYmVscyA9IFtdO1xuICAgICAgICB0aGlzLmVkZ2VzV2l0aEZvcmNlZExhYmVscyA9IFtdO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodGVkTm9kZXMuY2xlYXIoKTtcbiAgICAgICAgLy8gQ2xlYXJpbmcgZnJhbWVzXG4gICAgICAgIGlmICh0aGlzLnJlbmRlckZyYW1lKSB7XG4gICAgICAgICAgICAoMCwgdXRpbHNfMS5jYW5jZWxGcmFtZSkodGhpcy5yZW5kZXJGcmFtZSk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckZyYW1lID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5yZW5kZXJIaWdobGlnaHRlZE5vZGVzRnJhbWUpIHtcbiAgICAgICAgICAgICgwLCB1dGlsc18xLmNhbmNlbEZyYW1lKSh0aGlzLnJlbmRlckhpZ2hsaWdodGVkTm9kZXNGcmFtZSk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckhpZ2hsaWdodGVkTm9kZXNGcmFtZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGVzdHJveWluZyBjYW52YXNlc1xuICAgICAgICB2YXIgY29udGFpbmVyID0gdGhpcy5jb250YWluZXI7XG4gICAgICAgIHdoaWxlIChjb250YWluZXIuZmlyc3RDaGlsZClcbiAgICAgICAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdXNlZCB0byBzY2FsZSB0aGUgZ2l2ZW4gc2l6ZSBhY2NvcmRpbmcgdG8gdGhlIGNhbWVyYSdzIHJhdGlvLCBpLmUuXG4gICAgICogem9vbWluZyBzdGF0ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge251bWJlcn0gc2l6ZSAtIFRoZSBzaXplIHRvIHNjYWxlIChub2RlIHNpemUsIGVkZ2UgdGhpY2tuZXNzIGV0Yy4pLlxuICAgICAqIEByZXR1cm4ge251bWJlcn0gICAgICAtIFRoZSBzY2FsZWQgc2l6ZS5cbiAgICAgKi9cbiAgICBTaWdtYS5wcm90b3R5cGUuc2NhbGVTaXplID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgICAgICAgcmV0dXJuIHNpemUgLyB0aGlzLmNhbWVyYVNpemVSYXRpbztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0aGF0IHJldHVybnMgdGhlIGNvbGxlY3Rpb24gb2YgYWxsIHVzZWQgY2FudmFzZXMuXG4gICAgICogQXQgdGhlIG1vbWVudCwgdGhlIGluc3RhbnRpYXRlZCBjYW52YXNlcyBhcmUgdGhlIGZvbGxvd2luZywgYW5kIGluIHRoZVxuICAgICAqIGZvbGxvd2luZyBvcmRlciBpbiB0aGUgRE9NOlxuICAgICAqIC0gYGVkZ2VzYFxuICAgICAqIC0gYG5vZGVzYFxuICAgICAqIC0gYGVkZ2VMYWJlbHNgXG4gICAgICogLSBgbGFiZWxzYFxuICAgICAqIC0gYGhvdmVyc2BcbiAgICAgKiAtIGBob3Zlck5vZGVzYFxuICAgICAqIC0gYG1vdXNlYFxuICAgICAqXG4gICAgICogQHJldHVybiB7UGxhaW5PYmplY3Q8SFRNTENhbnZhc0VsZW1lbnQ+fSAtIFRoZSBjb2xsZWN0aW9uIG9mIGNhbnZhc2VzLlxuICAgICAqL1xuICAgIFNpZ21hLnByb3RvdHlwZS5nZXRDYW52YXNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKHt9LCB0aGlzLmVsZW1lbnRzKTtcbiAgICB9O1xuICAgIHJldHVybiBTaWdtYTtcbn0odHlwZXNfMS5UeXBlZEV2ZW50RW1pdHRlcikpO1xuZXhwb3J0cy5kZWZhdWx0ID0gU2lnbWE7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlR5cGVkRXZlbnRFbWl0dGVyID0gdm9pZCAwO1xuLyoqXG4gKiBTaWdtYS5qcyBUeXBlc1xuICogPT09PT09PT09PT09PT09XG4gKlxuICogVmFyaW91cyB0eXBlIGRlY2xhcmF0aW9ucyB1c2VkIHRocm91Z2hvdXQgdGhlIGxpYnJhcnkuXG4gKiBAbW9kdWxlXG4gKi9cbnZhciBldmVudHNfMSA9IHJlcXVpcmUoXCJldmVudHNcIik7XG52YXIgVHlwZWRFdmVudEVtaXR0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFR5cGVkRXZlbnRFbWl0dGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFR5cGVkRXZlbnRFbWl0dGVyKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5yYXdFbWl0dGVyID0gX3RoaXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFR5cGVkRXZlbnRFbWl0dGVyO1xufShldmVudHNfMS5FdmVudEVtaXR0ZXIpKTtcbmV4cG9ydHMuVHlwZWRFdmVudEVtaXR0ZXIgPSBUeXBlZEV2ZW50RW1pdHRlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hbmltYXRlTm9kZXMgPSBleHBvcnRzLkFOSU1BVEVfREVGQVVMVFMgPSB2b2lkIDA7XG52YXIgaW5kZXhfMSA9IHJlcXVpcmUoXCIuL2luZGV4XCIpO1xudmFyIGVhc2luZ3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9lYXNpbmdzXCIpKTtcbmV4cG9ydHMuQU5JTUFURV9ERUZBVUxUUyA9IHtcbiAgICBlYXNpbmc6IFwicXVhZHJhdGljSW5PdXRcIixcbiAgICBkdXJhdGlvbjogMTUwLFxufTtcbi8qKlxuICogRnVuY3Rpb24gdXNlZCB0byBhbmltYXRlIHRoZSBub2Rlcy5cbiAqL1xuZnVuY3Rpb24gYW5pbWF0ZU5vZGVzKGdyYXBoLCB0YXJnZXRzLCBvcHRzLCBjYWxsYmFjaykge1xuICAgIHZhciBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZXhwb3J0cy5BTklNQVRFX0RFRkFVTFRTLCBvcHRzKTtcbiAgICB2YXIgZWFzaW5nID0gdHlwZW9mIG9wdGlvbnMuZWFzaW5nID09PSBcImZ1bmN0aW9uXCIgPyBvcHRpb25zLmVhc2luZyA6IGVhc2luZ3NfMS5kZWZhdWx0W29wdGlvbnMuZWFzaW5nXTtcbiAgICB2YXIgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHZhciBzdGFydFBvc2l0aW9ucyA9IHt9O1xuICAgIGZvciAodmFyIG5vZGUgaW4gdGFyZ2V0cykge1xuICAgICAgICB2YXIgYXR0cnMgPSB0YXJnZXRzW25vZGVdO1xuICAgICAgICBzdGFydFBvc2l0aW9uc1tub2RlXSA9IHt9O1xuICAgICAgICBmb3IgKHZhciBrIGluIGF0dHJzKVxuICAgICAgICAgICAgc3RhcnRQb3NpdGlvbnNbbm9kZV1ba10gPSBncmFwaC5nZXROb2RlQXR0cmlidXRlKG5vZGUsIGspO1xuICAgIH1cbiAgICB2YXIgZnJhbWUgPSBudWxsO1xuICAgIHZhciBzdGVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmcmFtZSA9IG51bGw7XG4gICAgICAgIHZhciBwID0gKERhdGUubm93KCkgLSBzdGFydCkgLyBvcHRpb25zLmR1cmF0aW9uO1xuICAgICAgICBpZiAocCA+PSAxKSB7XG4gICAgICAgICAgICAvLyBBbmltYXRpb24gaXMgZG9uZVxuICAgICAgICAgICAgZm9yICh2YXIgbm9kZSBpbiB0YXJnZXRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJzID0gdGFyZ2V0c1tub2RlXTtcbiAgICAgICAgICAgICAgICAvLyBXZSB1c2UgZ2l2ZW4gdmFsdWVzIHRvIGF2b2lkIHByZWNpc2lvbiBpc3N1ZXMgYW5kIGZvciBjb252ZW5pZW5jZVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgaW4gYXR0cnMpXG4gICAgICAgICAgICAgICAgICAgIGdyYXBoLnNldE5vZGVBdHRyaWJ1dGUobm9kZSwgaywgYXR0cnNba10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcCA9IGVhc2luZyhwKTtcbiAgICAgICAgZm9yICh2YXIgbm9kZSBpbiB0YXJnZXRzKSB7XG4gICAgICAgICAgICB2YXIgYXR0cnMgPSB0YXJnZXRzW25vZGVdO1xuICAgICAgICAgICAgdmFyIHMgPSBzdGFydFBvc2l0aW9uc1tub2RlXTtcbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gYXR0cnMpXG4gICAgICAgICAgICAgICAgZ3JhcGguc2V0Tm9kZUF0dHJpYnV0ZShub2RlLCBrLCBhdHRyc1trXSAqIHAgKyBzW2tdICogKDEgLSBwKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnJhbWUgPSAoMCwgaW5kZXhfMS5yZXF1ZXN0RnJhbWUpKHN0ZXApO1xuICAgIH07XG4gICAgc3RlcCgpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChmcmFtZSlcbiAgICAgICAgICAgICgwLCBpbmRleF8xLmNhbmNlbEZyYW1lKShmcmFtZSk7XG4gICAgfTtcbn1cbmV4cG9ydHMuYW5pbWF0ZU5vZGVzID0gYW5pbWF0ZU5vZGVzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkhUTUxfQ09MT1JTID0gdm9pZCAwO1xuZXhwb3J0cy5IVE1MX0NPTE9SUyA9IHtcbiAgICBibGFjazogXCIjMDAwMDAwXCIsXG4gICAgc2lsdmVyOiBcIiNDMEMwQzBcIixcbiAgICBncmF5OiBcIiM4MDgwODBcIixcbiAgICBncmV5OiBcIiM4MDgwODBcIixcbiAgICB3aGl0ZTogXCIjRkZGRkZGXCIsXG4gICAgbWFyb29uOiBcIiM4MDAwMDBcIixcbiAgICByZWQ6IFwiI0ZGMDAwMFwiLFxuICAgIHB1cnBsZTogXCIjODAwMDgwXCIsXG4gICAgZnVjaHNpYTogXCIjRkYwMEZGXCIsXG4gICAgZ3JlZW46IFwiIzAwODAwMFwiLFxuICAgIGxpbWU6IFwiIzAwRkYwMFwiLFxuICAgIG9saXZlOiBcIiM4MDgwMDBcIixcbiAgICB5ZWxsb3c6IFwiI0ZGRkYwMFwiLFxuICAgIG5hdnk6IFwiIzAwMDA4MFwiLFxuICAgIGJsdWU6IFwiIzAwMDBGRlwiLFxuICAgIHRlYWw6IFwiIzAwODA4MFwiLFxuICAgIGFxdWE6IFwiIzAwRkZGRlwiLFxuICAgIGRhcmtibHVlOiBcIiMwMDAwOEJcIixcbiAgICBtZWRpdW1ibHVlOiBcIiMwMDAwQ0RcIixcbiAgICBkYXJrZ3JlZW46IFwiIzAwNjQwMFwiLFxuICAgIGRhcmtjeWFuOiBcIiMwMDhCOEJcIixcbiAgICBkZWVwc2t5Ymx1ZTogXCIjMDBCRkZGXCIsXG4gICAgZGFya3R1cnF1b2lzZTogXCIjMDBDRUQxXCIsXG4gICAgbWVkaXVtc3ByaW5nZ3JlZW46IFwiIzAwRkE5QVwiLFxuICAgIHNwcmluZ2dyZWVuOiBcIiMwMEZGN0ZcIixcbiAgICBjeWFuOiBcIiMwMEZGRkZcIixcbiAgICBtaWRuaWdodGJsdWU6IFwiIzE5MTk3MFwiLFxuICAgIGRvZGdlcmJsdWU6IFwiIzFFOTBGRlwiLFxuICAgIGxpZ2h0c2VhZ3JlZW46IFwiIzIwQjJBQVwiLFxuICAgIGZvcmVzdGdyZWVuOiBcIiMyMjhCMjJcIixcbiAgICBzZWFncmVlbjogXCIjMkU4QjU3XCIsXG4gICAgZGFya3NsYXRlZ3JheTogXCIjMkY0RjRGXCIsXG4gICAgZGFya3NsYXRlZ3JleTogXCIjMkY0RjRGXCIsXG4gICAgbGltZWdyZWVuOiBcIiMzMkNEMzJcIixcbiAgICBtZWRpdW1zZWFncmVlbjogXCIjM0NCMzcxXCIsXG4gICAgdHVycXVvaXNlOiBcIiM0MEUwRDBcIixcbiAgICByb3lhbGJsdWU6IFwiIzQxNjlFMVwiLFxuICAgIHN0ZWVsYmx1ZTogXCIjNDY4MkI0XCIsXG4gICAgZGFya3NsYXRlYmx1ZTogXCIjNDgzRDhCXCIsXG4gICAgbWVkaXVtdHVycXVvaXNlOiBcIiM0OEQxQ0NcIixcbiAgICBpbmRpZ286IFwiIzRCMDA4MlwiLFxuICAgIGRhcmtvbGl2ZWdyZWVuOiBcIiM1NTZCMkZcIixcbiAgICBjYWRldGJsdWU6IFwiIzVGOUVBMFwiLFxuICAgIGNvcm5mbG93ZXJibHVlOiBcIiM2NDk1RURcIixcbiAgICByZWJlY2NhcHVycGxlOiBcIiM2NjMzOTlcIixcbiAgICBtZWRpdW1hcXVhbWFyaW5lOiBcIiM2NkNEQUFcIixcbiAgICBkaW1ncmF5OiBcIiM2OTY5NjlcIixcbiAgICBkaW1ncmV5OiBcIiM2OTY5NjlcIixcbiAgICBzbGF0ZWJsdWU6IFwiIzZBNUFDRFwiLFxuICAgIG9saXZlZHJhYjogXCIjNkI4RTIzXCIsXG4gICAgc2xhdGVncmF5OiBcIiM3MDgwOTBcIixcbiAgICBzbGF0ZWdyZXk6IFwiIzcwODA5MFwiLFxuICAgIGxpZ2h0c2xhdGVncmF5OiBcIiM3Nzg4OTlcIixcbiAgICBsaWdodHNsYXRlZ3JleTogXCIjNzc4ODk5XCIsXG4gICAgbWVkaXVtc2xhdGVibHVlOiBcIiM3QjY4RUVcIixcbiAgICBsYXduZ3JlZW46IFwiIzdDRkMwMFwiLFxuICAgIGNoYXJ0cmV1c2U6IFwiIzdGRkYwMFwiLFxuICAgIGFxdWFtYXJpbmU6IFwiIzdGRkZENFwiLFxuICAgIHNreWJsdWU6IFwiIzg3Q0VFQlwiLFxuICAgIGxpZ2h0c2t5Ymx1ZTogXCIjODdDRUZBXCIsXG4gICAgYmx1ZXZpb2xldDogXCIjOEEyQkUyXCIsXG4gICAgZGFya3JlZDogXCIjOEIwMDAwXCIsXG4gICAgZGFya21hZ2VudGE6IFwiIzhCMDA4QlwiLFxuICAgIHNhZGRsZWJyb3duOiBcIiM4QjQ1MTNcIixcbiAgICBkYXJrc2VhZ3JlZW46IFwiIzhGQkM4RlwiLFxuICAgIGxpZ2h0Z3JlZW46IFwiIzkwRUU5MFwiLFxuICAgIG1lZGl1bXB1cnBsZTogXCIjOTM3MERCXCIsXG4gICAgZGFya3Zpb2xldDogXCIjOTQwMEQzXCIsXG4gICAgcGFsZWdyZWVuOiBcIiM5OEZCOThcIixcbiAgICBkYXJrb3JjaGlkOiBcIiM5OTMyQ0NcIixcbiAgICB5ZWxsb3dncmVlbjogXCIjOUFDRDMyXCIsXG4gICAgc2llbm5hOiBcIiNBMDUyMkRcIixcbiAgICBicm93bjogXCIjQTUyQTJBXCIsXG4gICAgZGFya2dyYXk6IFwiI0E5QTlBOVwiLFxuICAgIGRhcmtncmV5OiBcIiNBOUE5QTlcIixcbiAgICBsaWdodGJsdWU6IFwiI0FERDhFNlwiLFxuICAgIGdyZWVueWVsbG93OiBcIiNBREZGMkZcIixcbiAgICBwYWxldHVycXVvaXNlOiBcIiNBRkVFRUVcIixcbiAgICBsaWdodHN0ZWVsYmx1ZTogXCIjQjBDNERFXCIsXG4gICAgcG93ZGVyYmx1ZTogXCIjQjBFMEU2XCIsXG4gICAgZmlyZWJyaWNrOiBcIiNCMjIyMjJcIixcbiAgICBkYXJrZ29sZGVucm9kOiBcIiNCODg2MEJcIixcbiAgICBtZWRpdW1vcmNoaWQ6IFwiI0JBNTVEM1wiLFxuICAgIHJvc3licm93bjogXCIjQkM4RjhGXCIsXG4gICAgZGFya2toYWtpOiBcIiNCREI3NkJcIixcbiAgICBtZWRpdW12aW9sZXRyZWQ6IFwiI0M3MTU4NVwiLFxuICAgIGluZGlhbnJlZDogXCIjQ0Q1QzVDXCIsXG4gICAgcGVydTogXCIjQ0Q4NTNGXCIsXG4gICAgY2hvY29sYXRlOiBcIiNEMjY5MUVcIixcbiAgICB0YW46IFwiI0QyQjQ4Q1wiLFxuICAgIGxpZ2h0Z3JheTogXCIjRDNEM0QzXCIsXG4gICAgbGlnaHRncmV5OiBcIiNEM0QzRDNcIixcbiAgICB0aGlzdGxlOiBcIiNEOEJGRDhcIixcbiAgICBvcmNoaWQ6IFwiI0RBNzBENlwiLFxuICAgIGdvbGRlbnJvZDogXCIjREFBNTIwXCIsXG4gICAgcGFsZXZpb2xldHJlZDogXCIjREI3MDkzXCIsXG4gICAgY3JpbXNvbjogXCIjREMxNDNDXCIsXG4gICAgZ2FpbnNib3JvOiBcIiNEQ0RDRENcIixcbiAgICBwbHVtOiBcIiNEREEwRERcIixcbiAgICBidXJseXdvb2Q6IFwiI0RFQjg4N1wiLFxuICAgIGxpZ2h0Y3lhbjogXCIjRTBGRkZGXCIsXG4gICAgbGF2ZW5kZXI6IFwiI0U2RTZGQVwiLFxuICAgIGRhcmtzYWxtb246IFwiI0U5OTY3QVwiLFxuICAgIHZpb2xldDogXCIjRUU4MkVFXCIsXG4gICAgcGFsZWdvbGRlbnJvZDogXCIjRUVFOEFBXCIsXG4gICAgbGlnaHRjb3JhbDogXCIjRjA4MDgwXCIsXG4gICAga2hha2k6IFwiI0YwRTY4Q1wiLFxuICAgIGFsaWNlYmx1ZTogXCIjRjBGOEZGXCIsXG4gICAgaG9uZXlkZXc6IFwiI0YwRkZGMFwiLFxuICAgIGF6dXJlOiBcIiNGMEZGRkZcIixcbiAgICBzYW5keWJyb3duOiBcIiNGNEE0NjBcIixcbiAgICB3aGVhdDogXCIjRjVERUIzXCIsXG4gICAgYmVpZ2U6IFwiI0Y1RjVEQ1wiLFxuICAgIHdoaXRlc21va2U6IFwiI0Y1RjVGNVwiLFxuICAgIG1pbnRjcmVhbTogXCIjRjVGRkZBXCIsXG4gICAgZ2hvc3R3aGl0ZTogXCIjRjhGOEZGXCIsXG4gICAgc2FsbW9uOiBcIiNGQTgwNzJcIixcbiAgICBhbnRpcXVld2hpdGU6IFwiI0ZBRUJEN1wiLFxuICAgIGxpbmVuOiBcIiNGQUYwRTZcIixcbiAgICBsaWdodGdvbGRlbnJvZHllbGxvdzogXCIjRkFGQUQyXCIsXG4gICAgb2xkbGFjZTogXCIjRkRGNUU2XCIsXG4gICAgbWFnZW50YTogXCIjRkYwMEZGXCIsXG4gICAgZGVlcHBpbms6IFwiI0ZGMTQ5M1wiLFxuICAgIG9yYW5nZXJlZDogXCIjRkY0NTAwXCIsXG4gICAgdG9tYXRvOiBcIiNGRjYzNDdcIixcbiAgICBob3RwaW5rOiBcIiNGRjY5QjRcIixcbiAgICBjb3JhbDogXCIjRkY3RjUwXCIsXG4gICAgZGFya29yYW5nZTogXCIjRkY4QzAwXCIsXG4gICAgbGlnaHRzYWxtb246IFwiI0ZGQTA3QVwiLFxuICAgIG9yYW5nZTogXCIjRkZBNTAwXCIsXG4gICAgbGlnaHRwaW5rOiBcIiNGRkI2QzFcIixcbiAgICBwaW5rOiBcIiNGRkMwQ0JcIixcbiAgICBnb2xkOiBcIiNGRkQ3MDBcIixcbiAgICBwZWFjaHB1ZmY6IFwiI0ZGREFCOVwiLFxuICAgIG5hdmFqb3doaXRlOiBcIiNGRkRFQURcIixcbiAgICBtb2NjYXNpbjogXCIjRkZFNEI1XCIsXG4gICAgYmlzcXVlOiBcIiNGRkU0QzRcIixcbiAgICBtaXN0eXJvc2U6IFwiI0ZGRTRFMVwiLFxuICAgIGJsYW5jaGVkYWxtb25kOiBcIiNGRkVCQ0RcIixcbiAgICBwYXBheWF3aGlwOiBcIiNGRkVGRDVcIixcbiAgICBsYXZlbmRlcmJsdXNoOiBcIiNGRkYwRjVcIixcbiAgICBzZWFzaGVsbDogXCIjRkZGNUVFXCIsXG4gICAgY29ybnNpbGs6IFwiI0ZGRjhEQ1wiLFxuICAgIGxlbW9uY2hpZmZvbjogXCIjRkZGQUNEXCIsXG4gICAgZmxvcmFsd2hpdGU6IFwiI0ZGRkFGMFwiLFxuICAgIHNub3c6IFwiI0ZGRkFGQVwiLFxuICAgIGxpZ2h0eWVsbG93OiBcIiNGRkZGRTBcIixcbiAgICBpdm9yeTogXCIjRkZGRkYwXCIsXG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmN1YmljSW5PdXQgPSBleHBvcnRzLmN1YmljT3V0ID0gZXhwb3J0cy5jdWJpY0luID0gZXhwb3J0cy5xdWFkcmF0aWNJbk91dCA9IGV4cG9ydHMucXVhZHJhdGljT3V0ID0gZXhwb3J0cy5xdWFkcmF0aWNJbiA9IGV4cG9ydHMubGluZWFyID0gdm9pZCAwO1xuLyoqXG4gKiBTaWdtYS5qcyBFYXNpbmdzXG4gKiA9PT09PT09PT09PT09PT09PVxuICpcbiAqIEhhbmR5IGNvbGxlY3Rpb24gb2YgZWFzaW5nIGZ1bmN0aW9ucy5cbiAqIEBtb2R1bGVcbiAqL1xudmFyIGxpbmVhciA9IGZ1bmN0aW9uIChrKSB7IHJldHVybiBrOyB9O1xuZXhwb3J0cy5saW5lYXIgPSBsaW5lYXI7XG52YXIgcXVhZHJhdGljSW4gPSBmdW5jdGlvbiAoaykgeyByZXR1cm4gayAqIGs7IH07XG5leHBvcnRzLnF1YWRyYXRpY0luID0gcXVhZHJhdGljSW47XG52YXIgcXVhZHJhdGljT3V0ID0gZnVuY3Rpb24gKGspIHsgcmV0dXJuIGsgKiAoMiAtIGspOyB9O1xuZXhwb3J0cy5xdWFkcmF0aWNPdXQgPSBxdWFkcmF0aWNPdXQ7XG52YXIgcXVhZHJhdGljSW5PdXQgPSBmdW5jdGlvbiAoaykge1xuICAgIGlmICgoayAqPSAyKSA8IDEpXG4gICAgICAgIHJldHVybiAwLjUgKiBrICogaztcbiAgICByZXR1cm4gLTAuNSAqICgtLWsgKiAoayAtIDIpIC0gMSk7XG59O1xuZXhwb3J0cy5xdWFkcmF0aWNJbk91dCA9IHF1YWRyYXRpY0luT3V0O1xudmFyIGN1YmljSW4gPSBmdW5jdGlvbiAoaykgeyByZXR1cm4gayAqIGsgKiBrOyB9O1xuZXhwb3J0cy5jdWJpY0luID0gY3ViaWNJbjtcbnZhciBjdWJpY091dCA9IGZ1bmN0aW9uIChrKSB7IHJldHVybiAtLWsgKiBrICogayArIDE7IH07XG5leHBvcnRzLmN1YmljT3V0ID0gY3ViaWNPdXQ7XG52YXIgY3ViaWNJbk91dCA9IGZ1bmN0aW9uIChrKSB7XG4gICAgaWYgKChrICo9IDIpIDwgMSlcbiAgICAgICAgcmV0dXJuIDAuNSAqIGsgKiBrICogaztcbiAgICByZXR1cm4gMC41ICogKChrIC09IDIpICogayAqIGsgKyAyKTtcbn07XG5leHBvcnRzLmN1YmljSW5PdXQgPSBjdWJpY0luT3V0O1xudmFyIGVhc2luZ3MgPSB7XG4gICAgbGluZWFyOiBleHBvcnRzLmxpbmVhcixcbiAgICBxdWFkcmF0aWNJbjogZXhwb3J0cy5xdWFkcmF0aWNJbixcbiAgICBxdWFkcmF0aWNPdXQ6IGV4cG9ydHMucXVhZHJhdGljT3V0LFxuICAgIHF1YWRyYXRpY0luT3V0OiBleHBvcnRzLnF1YWRyYXRpY0luT3V0LFxuICAgIGN1YmljSW46IGV4cG9ydHMuY3ViaWNJbixcbiAgICBjdWJpY091dDogZXhwb3J0cy5jdWJpY091dCxcbiAgICBjdWJpY0luT3V0OiBleHBvcnRzLmN1YmljSW5PdXQsXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZWFzaW5ncztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kb0VkZ2VDb2xsaWRlV2l0aFBvaW50ID0gZXhwb3J0cy5pc1BpeGVsQ29sb3JlZCA9IHZvaWQgMDtcbi8qKlxuICogVGhpcyBoZWxwZXIgcmV0dXJucyB0cnVlIGlzIHRoZSBwaXhlbCBhdCAoeCx5KSBpbiB0aGUgZ2l2ZW4gV2ViR0wgY29udGV4dCBpc1xuICogY29sb3JlZCwgYW5kIGZhbHNlIGVsc2UuXG4gKi9cbmZ1bmN0aW9uIGlzUGl4ZWxDb2xvcmVkKGdsLCB4LCB5KSB7XG4gICAgdmFyIHBpeGVscyA9IG5ldyBVaW50OEFycmF5KDQpO1xuICAgIGdsLnJlYWRQaXhlbHMoeCwgZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCAtIHksIDEsIDEsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIHBpeGVscyk7XG4gICAgcmV0dXJuIHBpeGVsc1szXSA+IDA7XG59XG5leHBvcnRzLmlzUGl4ZWxDb2xvcmVkID0gaXNQaXhlbENvbG9yZWQ7XG4vKipcbiAqIFRoaXMgaGVscGVyIGNoZWNrcyB3aGV0aGVyIG9yIG5vdCBhIHBvaW50ICh4LCB5KSBjb2xsaWRlcyB3aXRoIGFuXG4gKiBlZGdlLCBjb25uZWN0aW5nIGEgc291cmNlICh4UywgeVMpIHRvIGEgdGFyZ2V0ICh4VCwgeVQpIHdpdGggYSB0aGlja25lc3MgaW5cbiAqIHBpeGVscy5cbiAqL1xuZnVuY3Rpb24gZG9FZGdlQ29sbGlkZVdpdGhQb2ludCh4LCB5LCB4UywgeVMsIHhULCB5VCwgdGhpY2tuZXNzKSB7XG4gICAgLy8gQ2hlY2sgZmlyc3QgaWYgcG9pbnQgaXMgb3V0IG9mIHRoZSByZWN0YW5nbGUgd2hpY2ggb3Bwb3NpdGUgY29ybmVycyBhcmUgdGhlXG4gICAgLy8gc291cmNlIGFuZCB0aGUgdGFyZ2V0LCByZWN0YW5nbGUgd2UgZXhwYW5kIGJ5IGB0aGlja25lc3NgIGluIGV2ZXJ5XG4gICAgLy8gZGlyZWN0aW9uczpcbiAgICBpZiAoeCA8IHhTIC0gdGhpY2tuZXNzICYmIHggPCB4VCAtIHRoaWNrbmVzcylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh5IDwgeVMgLSB0aGlja25lc3MgJiYgeSA8IHlUIC0gdGhpY2tuZXNzKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHggPiB4UyArIHRoaWNrbmVzcyAmJiB4ID4geFQgKyB0aGlja25lc3MpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoeSA+IHlTICsgdGhpY2tuZXNzICYmIHkgPiB5VCArIHRoaWNrbmVzcylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIC8vIENoZWNrIGFjdHVhbCBjb2xsaXNpb24gbm93OiBTaW5jZSB3ZSBub3cgdGhlIHBvaW50IGlzIGluIHRoaXMgYmlnIHJlY3RhbmdsZVxuICAgIC8vIHdlIFwianVzdFwiIG5lZWQgdG8gY2hlY2sgdGhhdCB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgcG9pbnQgYW5kIHRoZSBsaW5lXG4gICAgLy8gY29ubmVjdGluZyB0aGUgc291cmNlIGFuZCB0aGUgdGFyZ2V0IGlzIGxlc3MgdGhhbiBgdGhpY2tuZXNzYDpcbiAgICAvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9EaXN0YW5jZV9mcm9tX2FfcG9pbnRfdG9fYV9saW5lXG4gICAgdmFyIGRpc3RhbmNlID0gTWF0aC5hYnMoKHhUIC0geFMpICogKHlTIC0geSkgLSAoeFMgLSB4KSAqICh5VCAtIHlTKSkgLyBNYXRoLnNxcnQoTWF0aC5wb3coeFQgLSB4UywgMikgKyBNYXRoLnBvdyh5VCAtIHlTLCAyKSk7XG4gICAgcmV0dXJuIGRpc3RhbmNlIDwgdGhpY2tuZXNzIC8gMjtcbn1cbmV4cG9ydHMuZG9FZGdlQ29sbGlkZVdpdGhQb2ludCA9IGRvRWRnZUNvbGxpZGVXaXRoUG9pbnQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmFsaWRhdGVHcmFwaCA9IGV4cG9ydHMuY2FuVXNlMzJCaXRzSW5kaWNlcyA9IGV4cG9ydHMuZXh0cmFjdFBpeGVsID0gZXhwb3J0cy5nZXRNYXRyaXhJbXBhY3QgPSBleHBvcnRzLm1hdHJpeEZyb21DYW1lcmEgPSBleHBvcnRzLmdldENvcnJlY3Rpb25SYXRpbyA9IGV4cG9ydHMuZmxvYXRDb2xvciA9IGV4cG9ydHMuZmxvYXRBcnJheUNvbG9yID0gZXhwb3J0cy5wYXJzZUNvbG9yID0gZXhwb3J0cy56SW5kZXhPcmRlcmluZyA9IGV4cG9ydHMuY3JlYXRlTm9ybWFsaXphdGlvbkZ1bmN0aW9uID0gZXhwb3J0cy5ncmFwaEV4dGVudCA9IGV4cG9ydHMuZ2V0UGl4ZWxSYXRpbyA9IGV4cG9ydHMuY3JlYXRlRWxlbWVudCA9IGV4cG9ydHMuY2FuY2VsRnJhbWUgPSBleHBvcnRzLnJlcXVlc3RGcmFtZSA9IGV4cG9ydHMuYXNzaWduRGVlcCA9IGV4cG9ydHMuYXNzaWduID0gZXhwb3J0cy5pc1BsYWluT2JqZWN0ID0gdm9pZCAwO1xudmFyIGlzX2dyYXBoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImdyYXBob2xvZ3ktdXRpbHMvaXMtZ3JhcGhcIikpO1xudmFyIG1hdHJpY2VzXzEgPSByZXF1aXJlKFwiLi9tYXRyaWNlc1wiKTtcbnZhciBkYXRhXzEgPSByZXF1aXJlKFwiLi9kYXRhXCIpO1xuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBwbGFpbiBvYmplY3QuXG4gKlxuICogQHBhcmFtICB7bWl4ZWR9ICAgdmFsdWUgLSBUYXJnZXQgdmFsdWUuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlc1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT09IG51bGwgJiYgdmFsdWUuY29uc3RydWN0b3IgPT09IE9iamVjdDtcbn1cbmV4cG9ydHMuaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7XG4vKipcbiAqIEhlbHBlciB0byB1c2UgT2JqZWN0LmFzc2lnbiB3aXRoIG1vcmUgdGhhbiB0d28gb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IHRhcmdldCAgICAgICAtIEZpcnN0IG9iamVjdC5cbiAqIEBwYXJhbSAge29iamVjdH0gWy4uLm9iamVjdHNdIC0gT2JqZWN0cyB0byBtZXJnZS5cbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gYXNzaWduKHRhcmdldCkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JqZWN0c1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdGFyZ2V0ID0gdGFyZ2V0IHx8IHt9O1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqZWN0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdmFyIG8gPSBvYmplY3RzW2ldO1xuICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0YXJnZXQsIG8pO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuZXhwb3J0cy5hc3NpZ24gPSBhc3NpZ247XG4vKipcbiAqIFZlcnkgc2ltcGxlIHJlY3Vyc2l2ZSBPYmplY3QuYXNzaWduLWxpa2UgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtICB7b2JqZWN0fSB0YXJnZXQgICAgICAgLSBGaXJzdCBvYmplY3QuXG4gKiBAcGFyYW0gIHtvYmplY3R9IFsuLi5vYmplY3RzXSAtIE9iamVjdHMgdG8gbWVyZ2UuXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGFzc2lnbkRlZXAodGFyZ2V0KSB7XG4gICAgdmFyIG9iamVjdHMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvYmplY3RzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB0YXJnZXQgPSB0YXJnZXQgfHwge307XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmplY3RzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgbyA9IG9iamVjdHNbaV07XG4gICAgICAgIGlmICghbylcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBmb3IgKHZhciBrIGluIG8pIHtcbiAgICAgICAgICAgIGlmIChpc1BsYWluT2JqZWN0KG9ba10pKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tdID0gYXNzaWduRGVlcCh0YXJnZXRba10sIG9ba10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tdID0gb1trXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuZXhwb3J0cy5hc3NpZ25EZWVwID0gYXNzaWduRGVlcDtcbi8qKlxuICogSnVzdCBzb21lIGRpcnR5IHRyaWNrIHRvIG1ha2UgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIGFuZCBjYW5jZWxBbmltYXRpb25GcmFtZSBcIndvcmtcIiBpbiBOb2RlLmpzLCBmb3IgdW5pdCB0ZXN0czpcbiAqL1xuZXhwb3J0cy5yZXF1ZXN0RnJhbWUgPSB0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lICE9PSBcInVuZGVmaW5lZFwiXG4gICAgPyBmdW5jdGlvbiAoY2FsbGJhY2spIHsgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjayk7IH1cbiAgICA6IGZ1bmN0aW9uIChjYWxsYmFjaykgeyByZXR1cm4gc2V0VGltZW91dChjYWxsYmFjaywgMCk7IH07XG5leHBvcnRzLmNhbmNlbEZyYW1lID0gdHlwZW9mIGNhbmNlbEFuaW1hdGlvbkZyYW1lICE9PSBcInVuZGVmaW5lZFwiXG4gICAgPyBmdW5jdGlvbiAocmVxdWVzdElEKSB7IHJldHVybiBjYW5jZWxBbmltYXRpb25GcmFtZShyZXF1ZXN0SUQpOyB9XG4gICAgOiBmdW5jdGlvbiAocmVxdWVzdElEKSB7IHJldHVybiBjbGVhclRpbWVvdXQocmVxdWVzdElEKTsgfTtcbi8qKlxuICogRnVuY3Rpb24gdXNlZCB0byBjcmVhdGUgRE9NIGVsZW1lbnRzIGVhc2lseS5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHRhZyAgICAgICAgLSBUYWcgbmFtZSBvZiB0aGUgZWxlbWVudCB0byBjcmVhdGUuXG4gKiBAcGFyYW0gIHtvYmplY3R9IHN0eWxlICAgICAgLSBTdHlsZXMgbWFwLlxuICogQHBhcmFtICB7b2JqZWN0fSBhdHRyaWJ1dGVzIC0gQXR0cmlidXRlcyBtYXAuXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCh0YWcsIHN0eWxlLCBhdHRyaWJ1dGVzKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gICAgaWYgKHN0eWxlKSB7XG4gICAgICAgIGZvciAodmFyIGsgaW4gc3R5bGUpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGVba10gPSBzdHlsZVtrXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYXR0cmlidXRlcykge1xuICAgICAgICBmb3IgKHZhciBrIGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGssIGF0dHJpYnV0ZXNba10pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50O1xufVxuZXhwb3J0cy5jcmVhdGVFbGVtZW50ID0gY3JlYXRlRWxlbWVudDtcbi8qKlxuICogRnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBicm93c2VyJ3MgcGl4ZWwgcmF0aW8uXG4gKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBnZXRQaXhlbFJhdGlvKCkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93LmRldmljZVBpeGVsUmF0aW8gIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICByZXR1cm4gMTtcbn1cbmV4cG9ydHMuZ2V0UGl4ZWxSYXRpbyA9IGdldFBpeGVsUmF0aW87XG4vKipcbiAqIEZ1bmN0aW9uIHJldHVybmluZyB0aGUgZ3JhcGgncyBub2RlIGV4dGVudCBpbiB4ICYgeS5cbiAqXG4gKiBAcGFyYW0gIHtHcmFwaH1cbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ3JhcGhFeHRlbnQoZ3JhcGgpIHtcbiAgICBpZiAoIWdyYXBoLm9yZGVyKVxuICAgICAgICByZXR1cm4geyB4OiBbMCwgMV0sIHk6IFswLCAxXSB9O1xuICAgIHZhciB4TWluID0gSW5maW5pdHk7XG4gICAgdmFyIHhNYXggPSAtSW5maW5pdHk7XG4gICAgdmFyIHlNaW4gPSBJbmZpbml0eTtcbiAgICB2YXIgeU1heCA9IC1JbmZpbml0eTtcbiAgICBncmFwaC5mb3JFYWNoTm9kZShmdW5jdGlvbiAoXywgYXR0cikge1xuICAgICAgICB2YXIgeCA9IGF0dHIueCwgeSA9IGF0dHIueTtcbiAgICAgICAgaWYgKHggPCB4TWluKVxuICAgICAgICAgICAgeE1pbiA9IHg7XG4gICAgICAgIGlmICh4ID4geE1heClcbiAgICAgICAgICAgIHhNYXggPSB4O1xuICAgICAgICBpZiAoeSA8IHlNaW4pXG4gICAgICAgICAgICB5TWluID0geTtcbiAgICAgICAgaWYgKHkgPiB5TWF4KVxuICAgICAgICAgICAgeU1heCA9IHk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHsgeDogW3hNaW4sIHhNYXhdLCB5OiBbeU1pbiwgeU1heF0gfTtcbn1cbmV4cG9ydHMuZ3JhcGhFeHRlbnQgPSBncmFwaEV4dGVudDtcbmZ1bmN0aW9uIGNyZWF0ZU5vcm1hbGl6YXRpb25GdW5jdGlvbihleHRlbnQpIHtcbiAgICB2YXIgX2EgPSBfX3JlYWQoZXh0ZW50LngsIDIpLCBtaW5YID0gX2FbMF0sIG1heFggPSBfYVsxXSwgX2IgPSBfX3JlYWQoZXh0ZW50LnksIDIpLCBtaW5ZID0gX2JbMF0sIG1heFkgPSBfYlsxXTtcbiAgICB2YXIgcmF0aW8gPSBNYXRoLm1heChtYXhYIC0gbWluWCwgbWF4WSAtIG1pblkpLCBkWCA9IChtYXhYICsgbWluWCkgLyAyLCBkWSA9IChtYXhZICsgbWluWSkgLyAyO1xuICAgIGlmIChyYXRpbyA9PT0gMCB8fCBNYXRoLmFicyhyYXRpbykgPT09IEluZmluaXR5IHx8IGlzTmFOKHJhdGlvKSlcbiAgICAgICAgcmF0aW8gPSAxO1xuICAgIGlmIChpc05hTihkWCkpXG4gICAgICAgIGRYID0gMDtcbiAgICBpZiAoaXNOYU4oZFkpKVxuICAgICAgICBkWSA9IDA7XG4gICAgdmFyIGZuID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IDAuNSArIChkYXRhLnggLSBkWCkgLyByYXRpbyxcbiAgICAgICAgICAgIHk6IDAuNSArIChkYXRhLnkgLSBkWSkgLyByYXRpbyxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8vIFRPRE86IHBvc3NpYmlsaXR5IHRvIGFwcGx5IHRoaXMgaW4gYmF0Y2ggb3ZlciBhcnJheSBvZiBpbmRpY2VzXG4gICAgZm4uYXBwbHlUbyA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGRhdGEueCA9IDAuNSArIChkYXRhLnggLSBkWCkgLyByYXRpbztcbiAgICAgICAgZGF0YS55ID0gMC41ICsgKGRhdGEueSAtIGRZKSAvIHJhdGlvO1xuICAgIH07XG4gICAgZm4uaW52ZXJzZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBkWCArIHJhdGlvICogKGRhdGEueCAtIDAuNSksXG4gICAgICAgICAgICB5OiBkWSArIHJhdGlvICogKGRhdGEueSAtIDAuNSksXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBmbi5yYXRpbyA9IHJhdGlvO1xuICAgIHJldHVybiBmbjtcbn1cbmV4cG9ydHMuY3JlYXRlTm9ybWFsaXphdGlvbkZ1bmN0aW9uID0gY3JlYXRlTm9ybWFsaXphdGlvbkZ1bmN0aW9uO1xuLyoqXG4gKiBGdW5jdGlvbiBvcmRlcmluZyB0aGUgZ2l2ZW4gZWxlbWVudHMgaW4gcmV2ZXJzZSB6LW9yZGVyIHNvIHRoZXkgZHJhd25cbiAqIHRoZSBjb3JyZWN0IHdheS5cbiAqXG4gKiBAcGFyYW0gIHtudW1iZXJ9ICAgZXh0ZW50ICAgLSBbbWluLCBtYXhdIHogdmFsdWVzLlxuICogQHBhcmFtICB7ZnVuY3Rpb259IGdldHRlciAgIC0gWiBhdHRyaWJ1dGUgZ2V0dGVyIGZ1bmN0aW9uLlxuICogQHBhcmFtICB7YXJyYXl9ICAgIGVsZW1lbnRzIC0gVGhlIGFycmF5IHRvIHNvcnQuXG4gKiBAcmV0dXJuIHthcnJheX0gLSBUaGUgc29ydGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiB6SW5kZXhPcmRlcmluZyhleHRlbnQsIGdldHRlciwgZWxlbWVudHMpIHtcbiAgICAvLyBJZiBrIGlzID4gbiwgd2UnbGwgdXNlIGEgc3RhbmRhcmQgc29ydFxuICAgIHJldHVybiBlbGVtZW50cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHZhciB6QSA9IGdldHRlcihhKSB8fCAwLCB6QiA9IGdldHRlcihiKSB8fCAwO1xuICAgICAgICBpZiAoekEgPCB6QilcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgaWYgKHpBID4gekIpXG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSk7XG4gICAgLy8gVE9ETzogY291bnRpbmcgc29ydCBvcHRpbWl6YXRpb25cbn1cbmV4cG9ydHMuekluZGV4T3JkZXJpbmcgPSB6SW5kZXhPcmRlcmluZztcbi8qKlxuICogV2ViR0wgdXRpbHNcbiAqID09PT09PT09PT09XG4gKi9cbi8qKlxuICogTWVtb2l6ZWQgZnVuY3Rpb24gcmV0dXJuaW5nIGEgZmxvYXQtZW5jb2RlZCBjb2xvciBmcm9tIHZhcmlvdXMgc3RyaW5nXG4gKiBmb3JtYXRzIGRlc2NyaWJpbmcgY29sb3JzLlxuICovXG52YXIgSU5UOCA9IG5ldyBJbnQ4QXJyYXkoNCk7XG52YXIgSU5UMzIgPSBuZXcgSW50MzJBcnJheShJTlQ4LmJ1ZmZlciwgMCwgMSk7XG52YXIgRkxPQVQzMiA9IG5ldyBGbG9hdDMyQXJyYXkoSU5UOC5idWZmZXIsIDAsIDEpO1xudmFyIFJHQkFfVEVTVF9SRUdFWCA9IC9eXFxzKnJnYmE/XFxzKlxcKC87XG52YXIgUkdCQV9FWFRSQUNUX1JFR0VYID0gL15cXHMqcmdiYT9cXHMqXFwoXFxzKihbMC05XSopXFxzKixcXHMqKFswLTldKilcXHMqLFxccyooWzAtOV0qKSg/OlxccyosXFxzKiguKik/KT9cXClcXHMqJC87XG5mdW5jdGlvbiBwYXJzZUNvbG9yKHZhbCkge1xuICAgIHZhciByID0gMDsgLy8gYnl0ZVxuICAgIHZhciBnID0gMDsgLy8gYnl0ZVxuICAgIHZhciBiID0gMDsgLy8gYnl0ZVxuICAgIHZhciBhID0gMTsgLy8gZmxvYXRcbiAgICAvLyBIYW5kbGluZyBoZXhhZGVjaW1hbCBub3RhdGlvblxuICAgIGlmICh2YWxbMF0gPT09IFwiI1wiKSB7XG4gICAgICAgIGlmICh2YWwubGVuZ3RoID09PSA0KSB7XG4gICAgICAgICAgICByID0gcGFyc2VJbnQodmFsLmNoYXJBdCgxKSArIHZhbC5jaGFyQXQoMSksIDE2KTtcbiAgICAgICAgICAgIGcgPSBwYXJzZUludCh2YWwuY2hhckF0KDIpICsgdmFsLmNoYXJBdCgyKSwgMTYpO1xuICAgICAgICAgICAgYiA9IHBhcnNlSW50KHZhbC5jaGFyQXQoMykgKyB2YWwuY2hhckF0KDMpLCAxNik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByID0gcGFyc2VJbnQodmFsLmNoYXJBdCgxKSArIHZhbC5jaGFyQXQoMiksIDE2KTtcbiAgICAgICAgICAgIGcgPSBwYXJzZUludCh2YWwuY2hhckF0KDMpICsgdmFsLmNoYXJBdCg0KSwgMTYpO1xuICAgICAgICAgICAgYiA9IHBhcnNlSW50KHZhbC5jaGFyQXQoNSkgKyB2YWwuY2hhckF0KDYpLCAxNik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbC5sZW5ndGggPT09IDkpIHtcbiAgICAgICAgICAgIGEgPSBwYXJzZUludCh2YWwuY2hhckF0KDcpICsgdmFsLmNoYXJBdCg4KSwgMTYpIC8gMjU1O1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEhhbmRsaW5nIHJnYiBub3RhdGlvblxuICAgIGVsc2UgaWYgKFJHQkFfVEVTVF9SRUdFWC50ZXN0KHZhbCkpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gdmFsLm1hdGNoKFJHQkFfRVhUUkFDVF9SRUdFWCk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgciA9ICttYXRjaFsxXTtcbiAgICAgICAgICAgIGcgPSArbWF0Y2hbMl07XG4gICAgICAgICAgICBiID0gK21hdGNoWzNdO1xuICAgICAgICAgICAgaWYgKG1hdGNoWzRdKVxuICAgICAgICAgICAgICAgIGEgPSArbWF0Y2hbNF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgcjogciwgZzogZywgYjogYiwgYTogYSB9O1xufVxuZXhwb3J0cy5wYXJzZUNvbG9yID0gcGFyc2VDb2xvcjtcbnZhciBGTE9BVF9DT0xPUl9DQUNIRSA9IHt9O1xuZm9yICh2YXIgaHRtbENvbG9yIGluIGRhdGFfMS5IVE1MX0NPTE9SUykge1xuICAgIEZMT0FUX0NPTE9SX0NBQ0hFW2h0bWxDb2xvcl0gPSBmbG9hdENvbG9yKGRhdGFfMS5IVE1MX0NPTE9SU1todG1sQ29sb3JdKTtcbiAgICAvLyBSZXBsaWNhdGluZyBjYWNoZSBmb3IgaGV4IHZhbHVlcyBmb3IgZnJlZVxuICAgIEZMT0FUX0NPTE9SX0NBQ0hFW2RhdGFfMS5IVE1MX0NPTE9SU1todG1sQ29sb3JdXSA9IEZMT0FUX0NPTE9SX0NBQ0hFW2h0bWxDb2xvcl07XG59XG5mdW5jdGlvbiBmbG9hdEFycmF5Q29sb3IodmFsKSB7XG4gICAgdmFsID0gZGF0YV8xLkhUTUxfQ09MT1JTW3ZhbF0gfHwgdmFsO1xuICAgIC8vIE5PVEU6IHRoaXMgdmFyaWFudCBpcyBub3QgY2FjaGVkIGJlY2F1c2UgaXQgaXMgbW9zdGx5IHVzZWQgZm9yIHVuaWZvcm1zXG4gICAgdmFyIF9hID0gcGFyc2VDb2xvcih2YWwpLCByID0gX2EuciwgZyA9IF9hLmcsIGIgPSBfYS5iLCBhID0gX2EuYTtcbiAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbciAvIDI1NSwgZyAvIDI1NSwgYiAvIDI1NSwgYV0pO1xufVxuZXhwb3J0cy5mbG9hdEFycmF5Q29sb3IgPSBmbG9hdEFycmF5Q29sb3I7XG5mdW5jdGlvbiBmbG9hdENvbG9yKHZhbCkge1xuICAgIC8vIElmIHRoZSBjb2xvciBpcyBhbHJlYWR5IGNvbXB1dGVkLCB3ZSB5aWVsZCBpdFxuICAgIGlmICh0eXBlb2YgRkxPQVRfQ09MT1JfQ0FDSEVbdmFsXSAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIEZMT0FUX0NPTE9SX0NBQ0hFW3ZhbF07XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlQ29sb3IodmFsKTtcbiAgICB2YXIgciA9IHBhcnNlZC5yLCBnID0gcGFyc2VkLmcsIGIgPSBwYXJzZWQuYjtcbiAgICB2YXIgYSA9IHBhcnNlZC5hO1xuICAgIGEgPSAoYSAqIDI1NSkgfCAwO1xuICAgIElOVDMyWzBdID0gKChhIDw8IDI0KSB8IChiIDw8IDE2KSB8IChnIDw8IDgpIHwgcikgJiAweGZlZmZmZmZmO1xuICAgIHZhciBjb2xvciA9IEZMT0FUMzJbMF07XG4gICAgRkxPQVRfQ09MT1JfQ0FDSEVbdmFsXSA9IGNvbG9yO1xuICAgIHJldHVybiBjb2xvcjtcbn1cbmV4cG9ydHMuZmxvYXRDb2xvciA9IGZsb2F0Q29sb3I7XG4vKipcbiAqIEluIHNpZ21hLCB0aGUgZ3JhcGggaXMgbm9ybWFsaXplZCBpbnRvIGEgWzAsIDFdLCBbMCwgMV0gc3F1YXJlLCBiZWZvcmUgYmVpbmcgZ2l2ZW4gdG8gdGhlIHZhcmlvdXMgcmVuZGVyZXJzLiBUaGlzXG4gKiBoZWxwcyBkZWFsaW5nIHdpdGggcXVhZHRyZWUgaW4gcGFydGljdWxhci5cbiAqIEJ1dCBhdCBzb21lIHBvaW50LCB3ZSBuZWVkIHRvIHJlc2NhbGUgaXQgc28gdGhhdCBpdCB0YWtlcyB0aGUgYmVzdCBwbGFjZSBpbiB0aGUgc2NyZWVuLCBpZS4gd2UgYWx3YXlzIHdhbnQgdG8gc2VlIHR3b1xuICogbm9kZXMgXCJ0b3VjaGluZ1wiIG9wcG9zaXRlIHNpZGVzIG9mIHRoZSBncmFwaCwgd2l0aCB0aGUgY2FtZXJhIGJlaW5nIGF0IGl0cyBkZWZhdWx0IHN0YXRlLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gZGV0ZXJtaW5lcyB0aGlzIHJhdGlvLlxuICovXG5mdW5jdGlvbiBnZXRDb3JyZWN0aW9uUmF0aW8odmlld3BvcnREaW1lbnNpb25zLCBncmFwaERpbWVuc2lvbnMpIHtcbiAgICB2YXIgdmlld3BvcnRSYXRpbyA9IHZpZXdwb3J0RGltZW5zaW9ucy5oZWlnaHQgLyB2aWV3cG9ydERpbWVuc2lvbnMud2lkdGg7XG4gICAgdmFyIGdyYXBoUmF0aW8gPSBncmFwaERpbWVuc2lvbnMuaGVpZ2h0IC8gZ3JhcGhEaW1lbnNpb25zLndpZHRoO1xuICAgIC8vIElmIHRoZSBzdGFnZSBhbmQgdGhlIGdyYXBocyBhcmUgaW4gZGlmZmVyZW50IGRpcmVjdGlvbnMgKHN1Y2ggYXMgdGhlIGdyYXBoIGJlaW5nIHdpZGVyIHRoYXQgdGFsbCB3aGlsZSB0aGUgc3RhZ2VcbiAgICAvLyBpcyB0YWxsZXIgdGhhbiB3aWRlKSwgd2UgY2FuIHN0b3AgaGVyZSB0byBoYXZlIGluZGVlZCBub2RlcyB0b3VjaGluZyBvcHBvc2l0ZSBzaWRlczpcbiAgICBpZiAoKHZpZXdwb3J0UmF0aW8gPCAxICYmIGdyYXBoUmF0aW8gPiAxKSB8fCAodmlld3BvcnRSYXRpbyA+IDEgJiYgZ3JhcGhSYXRpbyA8IDEpKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICAvLyBFbHNlLCB3ZSBuZWVkIHRvIGZpdCB0aGUgZ3JhcGggaW5zaWRlIHRoZSBzdGFnZTpcbiAgICAvLyAxLiBJZiB0aGUgZ3JhcGggaXMgXCJzcXVhcmVyXCIgKGllLiB3aXRoIGEgcmF0aW8gY2xvc2VyIHRvIDEpLCB3ZSBuZWVkIHRvIG1ha2UgdGhlIGxhcmdlc3Qgc2lkZXMgdG91Y2g7XG4gICAgLy8gMi4gSWYgdGhlIHN0YWdlIGlzIFwic3F1YXJlclwiLCB3ZSBuZWVkIHRvIG1ha2UgdGhlIHNtYWxsZXN0IHNpZGVzIHRvdWNoLlxuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChncmFwaFJhdGlvLCAxIC8gZ3JhcGhSYXRpbyksIE1hdGgubWF4KDEgLyB2aWV3cG9ydFJhdGlvLCB2aWV3cG9ydFJhdGlvKSk7XG59XG5leHBvcnRzLmdldENvcnJlY3Rpb25SYXRpbyA9IGdldENvcnJlY3Rpb25SYXRpbztcbi8qKlxuICogRnVuY3Rpb24gcmV0dXJuaW5nIGEgbWF0cml4IGZyb20gdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGNhbWVyYS5cbiAqL1xuLy8gVE9ETzogaXQncyBwb3NzaWJsZSB0byBvcHRpbWl6ZSB0aGlzIGRyYXN0aWNhbGx5IVxuZnVuY3Rpb24gbWF0cml4RnJvbUNhbWVyYShzdGF0ZSwgdmlld3BvcnREaW1lbnNpb25zLCBncmFwaERpbWVuc2lvbnMsIHBhZGRpbmcsIGludmVyc2UpIHtcbiAgICB2YXIgYW5nbGUgPSBzdGF0ZS5hbmdsZSwgcmF0aW8gPSBzdGF0ZS5yYXRpbywgeCA9IHN0YXRlLngsIHkgPSBzdGF0ZS55O1xuICAgIHZhciB3aWR0aCA9IHZpZXdwb3J0RGltZW5zaW9ucy53aWR0aCwgaGVpZ2h0ID0gdmlld3BvcnREaW1lbnNpb25zLmhlaWdodDtcbiAgICB2YXIgbWF0cml4ID0gKDAsIG1hdHJpY2VzXzEuaWRlbnRpdHkpKCk7XG4gICAgdmFyIHNtYWxsZXN0RGltZW5zaW9uID0gTWF0aC5taW4od2lkdGgsIGhlaWdodCkgLSAyICogcGFkZGluZztcbiAgICB2YXIgY29ycmVjdGlvblJhdGlvID0gZ2V0Q29ycmVjdGlvblJhdGlvKHZpZXdwb3J0RGltZW5zaW9ucywgZ3JhcGhEaW1lbnNpb25zKTtcbiAgICBpZiAoIWludmVyc2UpIHtcbiAgICAgICAgKDAsIG1hdHJpY2VzXzEubXVsdGlwbHkpKG1hdHJpeCwgKDAsIG1hdHJpY2VzXzEuc2NhbGUpKCgwLCBtYXRyaWNlc18xLmlkZW50aXR5KSgpLCAyICogKHNtYWxsZXN0RGltZW5zaW9uIC8gd2lkdGgpICogY29ycmVjdGlvblJhdGlvLCAyICogKHNtYWxsZXN0RGltZW5zaW9uIC8gaGVpZ2h0KSAqIGNvcnJlY3Rpb25SYXRpbykpO1xuICAgICAgICAoMCwgbWF0cmljZXNfMS5tdWx0aXBseSkobWF0cml4LCAoMCwgbWF0cmljZXNfMS5yb3RhdGUpKCgwLCBtYXRyaWNlc18xLmlkZW50aXR5KSgpLCAtYW5nbGUpKTtcbiAgICAgICAgKDAsIG1hdHJpY2VzXzEubXVsdGlwbHkpKG1hdHJpeCwgKDAsIG1hdHJpY2VzXzEuc2NhbGUpKCgwLCBtYXRyaWNlc18xLmlkZW50aXR5KSgpLCAxIC8gcmF0aW8pKTtcbiAgICAgICAgKDAsIG1hdHJpY2VzXzEubXVsdGlwbHkpKG1hdHJpeCwgKDAsIG1hdHJpY2VzXzEudHJhbnNsYXRlKSgoMCwgbWF0cmljZXNfMS5pZGVudGl0eSkoKSwgLXgsIC15KSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAoMCwgbWF0cmljZXNfMS5tdWx0aXBseSkobWF0cml4LCAoMCwgbWF0cmljZXNfMS50cmFuc2xhdGUpKCgwLCBtYXRyaWNlc18xLmlkZW50aXR5KSgpLCB4LCB5KSk7XG4gICAgICAgICgwLCBtYXRyaWNlc18xLm11bHRpcGx5KShtYXRyaXgsICgwLCBtYXRyaWNlc18xLnNjYWxlKSgoMCwgbWF0cmljZXNfMS5pZGVudGl0eSkoKSwgcmF0aW8pKTtcbiAgICAgICAgKDAsIG1hdHJpY2VzXzEubXVsdGlwbHkpKG1hdHJpeCwgKDAsIG1hdHJpY2VzXzEucm90YXRlKSgoMCwgbWF0cmljZXNfMS5pZGVudGl0eSkoKSwgYW5nbGUpKTtcbiAgICAgICAgKDAsIG1hdHJpY2VzXzEubXVsdGlwbHkpKG1hdHJpeCwgKDAsIG1hdHJpY2VzXzEuc2NhbGUpKCgwLCBtYXRyaWNlc18xLmlkZW50aXR5KSgpLCB3aWR0aCAvIHNtYWxsZXN0RGltZW5zaW9uIC8gMiAvIGNvcnJlY3Rpb25SYXRpbywgaGVpZ2h0IC8gc21hbGxlc3REaW1lbnNpb24gLyAyIC8gY29ycmVjdGlvblJhdGlvKSk7XG4gICAgfVxuICAgIHJldHVybiBtYXRyaXg7XG59XG5leHBvcnRzLm1hdHJpeEZyb21DYW1lcmEgPSBtYXRyaXhGcm9tQ2FtZXJhO1xuLyoqXG4gKiBBbGwgdGhlc2UgdHJhbnNmb3JtYXRpb25zIHdlIGFwcGx5IG9uIHRoZSBtYXRyaXggdG8gZ2V0IGl0IHJlc2NhbGUgdGhlIGdyYXBoXG4gKiBhcyB3ZSB3YW50IG1ha2UgaXQgdmVyeSBoYXJkIHRvIGdldCBwaXhlbC1wZXJmZWN0IGRpc3RhbmNlcyBpbiBXZWJHTC4gVGhpc1xuICogZnVuY3Rpb24gcmV0dXJucyBhIGZhY3RvciB0aGF0IHByb3Blcmx5IGNhbmNlbHMgdGhlIG1hdHJpeCBlZmZlY3Qgb24gbGVuZ3Rocy5cbiAqXG4gKiBbamFjb215YWxdXG4gKiBUbyBiZSBmdWxseSBob25lc3QsIEkgY2FuJ3QgcmVhbGx5IGV4cGxhaW4gaGFwcGVucyBoZXJlLi4uIEkgbm90aWNlIHRoYXQgdGhlXG4gKiBmb2xsb3dpbmcgcmF0aW8gd29ya3MgKGllLiBpdCBjb3JyZWN0bHkgY29tcGVuc2F0ZXMgdGhlIG1hdHJpeCBpbXBhY3Qgb24gYWxsXG4gKiBjYW1lcmEgc3RhdGVzIEkgY291bGQgdHJ5KTpcbiAqID4gYFIgPSBzaXplKFYpIC8gc2l6ZShNICogVikgLyBXYFxuICogYXMgbG9uZyBhcyBgTSAqIFZgIGlzIGluIHRoZSBkaXJlY3Rpb24gb2YgVyAoaWUuIHBhcmFsbGVsIHRvIChPeCkpLiBJdCB3b3Jrc1xuICogYXMgd2VsbCB3aXRoIEggYW5kIGEgdmVjdG9yIHRoYXQgdHJhbnNmb3JtcyBpbnRvIHNvbWV0aGluZyBwYXJhbGxlbCB0byAoT3kpLlxuICpcbiAqIEFsc28sIG5vdGUgdGhhdCB3ZSB1c2UgYGFuZ2xlYCBhbmQgbm90IGAtYW5nbGVgICh0aGF0IHdvdWxkIHNlZW0gbG9naWNhbCxcbiAqIHNpbmNlIHdlIHdhbnQgdG8gYW50aWNpcGF0ZSB0aGUgcm90YXRpb24pLCBiZWNhdXNlIG9mIHRoZSBmYWN0IHRoYXQgaW4gV2ViR0wsXG4gKiB0aGUgaW1hZ2UgaXMgdmVydGljYWxseSBzd2FwcGVkLlxuICovXG5mdW5jdGlvbiBnZXRNYXRyaXhJbXBhY3QobWF0cml4LCBjYW1lcmFTdGF0ZSwgdmlld3BvcnREaW1lbnNpb25zKSB7XG4gICAgdmFyIF9hID0gKDAsIG1hdHJpY2VzXzEubXVsdGlwbHlWZWMyKShtYXRyaXgsIHsgeDogTWF0aC5jb3MoY2FtZXJhU3RhdGUuYW5nbGUpLCB5OiBNYXRoLnNpbihjYW1lcmFTdGF0ZS5hbmdsZSkgfSwgMCksIHggPSBfYS54LCB5ID0gX2EueTtcbiAgICByZXR1cm4gMSAvIE1hdGguc3FydChNYXRoLnBvdyh4LCAyKSArIE1hdGgucG93KHksIDIpKSAvIHZpZXdwb3J0RGltZW5zaW9ucy53aWR0aDtcbn1cbmV4cG9ydHMuZ2V0TWF0cml4SW1wYWN0ID0gZ2V0TWF0cml4SW1wYWN0O1xuLyoqXG4gKiBGdW5jdGlvbiBleHRyYWN0aW5nIHRoZSBjb2xvciBhdCB0aGUgZ2l2ZW4gcGl4ZWwuXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RQaXhlbChnbCwgeCwgeSwgYXJyYXkpIHtcbiAgICB2YXIgZGF0YSA9IGFycmF5IHx8IG5ldyBVaW50OEFycmF5KDQpO1xuICAgIGdsLnJlYWRQaXhlbHMoeCwgeSwgMSwgMSwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgZGF0YSk7XG4gICAgcmV0dXJuIGRhdGE7XG59XG5leHBvcnRzLmV4dHJhY3RQaXhlbCA9IGV4dHJhY3RQaXhlbDtcbi8qKlxuICogRnVuY3Rpb24gdXNlZCB0byBrbm93IHdoZXRoZXIgZ2l2ZW4gd2ViZ2wgY29udGV4dCBjYW4gdXNlIDMyIGJpdHMgaW5kaWNlcy5cbiAqL1xuZnVuY3Rpb24gY2FuVXNlMzJCaXRzSW5kaWNlcyhnbCkge1xuICAgIHZhciB3ZWJnbDIgPSB0eXBlb2YgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbCBpbnN0YW5jZW9mIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQ7XG4gICAgcmV0dXJuIHdlYmdsMiB8fCAhIWdsLmdldEV4dGVuc2lvbihcIk9FU19lbGVtZW50X2luZGV4X3VpbnRcIik7XG59XG5leHBvcnRzLmNhblVzZTMyQml0c0luZGljZXMgPSBjYW5Vc2UzMkJpdHNJbmRpY2VzO1xuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ3JhcGggdmFyaWFibGUgaXMgYSB2YWxpZCBncmFwaCwgYW5kIGlmIHNpZ21hIGNhbiByZW5kZXIgaXQuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlR3JhcGgoZ3JhcGgpIHtcbiAgICAvLyBjaGVjayBpZiBpdCdzIGEgdmFsaWQgZ3JhcGhvbG9neSBpbnN0YW5jZVxuICAgIGlmICghKDAsIGlzX2dyYXBoXzEuZGVmYXVsdCkoZ3JhcGgpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaWdtYTogaW52YWxpZCBncmFwaCBpbnN0YW5jZS5cIik7XG4gICAgLy8gY2hlY2sgaWYgbm9kZXMgaGF2ZSB4L3kgYXR0cmlidXRlc1xuICAgIGdyYXBoLmZvckVhY2hOb2RlKGZ1bmN0aW9uIChrZXksIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUoYXR0cmlidXRlcy54KSB8fCAhTnVtYmVyLmlzRmluaXRlKGF0dHJpYnV0ZXMueSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNpZ21hOiBDb29yZGluYXRlcyBvZiBub2RlIFwiLmNvbmNhdChrZXksIFwiIGFyZSBpbnZhbGlkLiBBIG5vZGUgbXVzdCBoYXZlIGEgbnVtZXJpYyAneCcgYW5kICd5JyBhdHRyaWJ1dGUuXCIpKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy52YWxpZGF0ZUdyYXBoID0gdmFsaWRhdGVHcmFwaDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tdWx0aXBseVZlYzIgPSBleHBvcnRzLm11bHRpcGx5ID0gZXhwb3J0cy50cmFuc2xhdGUgPSBleHBvcnRzLnJvdGF0ZSA9IGV4cG9ydHMuc2NhbGUgPSBleHBvcnRzLmlkZW50aXR5ID0gdm9pZCAwO1xuZnVuY3Rpb24gaWRlbnRpdHkoKSB7XG4gICAgcmV0dXJuIEZsb2F0MzJBcnJheS5vZigxLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAxKTtcbn1cbmV4cG9ydHMuaWRlbnRpdHkgPSBpZGVudGl0eTtcbi8vIFRPRE86IG9wdGltaXplXG5mdW5jdGlvbiBzY2FsZShtLCB4LCB5KSB7XG4gICAgbVswXSA9IHg7XG4gICAgbVs0XSA9IHR5cGVvZiB5ID09PSBcIm51bWJlclwiID8geSA6IHg7XG4gICAgcmV0dXJuIG07XG59XG5leHBvcnRzLnNjYWxlID0gc2NhbGU7XG5mdW5jdGlvbiByb3RhdGUobSwgcikge1xuICAgIHZhciBzID0gTWF0aC5zaW4ociksIGMgPSBNYXRoLmNvcyhyKTtcbiAgICBtWzBdID0gYztcbiAgICBtWzFdID0gcztcbiAgICBtWzNdID0gLXM7XG4gICAgbVs0XSA9IGM7XG4gICAgcmV0dXJuIG07XG59XG5leHBvcnRzLnJvdGF0ZSA9IHJvdGF0ZTtcbmZ1bmN0aW9uIHRyYW5zbGF0ZShtLCB4LCB5KSB7XG4gICAgbVs2XSA9IHg7XG4gICAgbVs3XSA9IHk7XG4gICAgcmV0dXJuIG07XG59XG5leHBvcnRzLnRyYW5zbGF0ZSA9IHRyYW5zbGF0ZTtcbmZ1bmN0aW9uIG11bHRpcGx5KGEsIGIpIHtcbiAgICB2YXIgYTAwID0gYVswXSwgYTAxID0gYVsxXSwgYTAyID0gYVsyXTtcbiAgICB2YXIgYTEwID0gYVszXSwgYTExID0gYVs0XSwgYTEyID0gYVs1XTtcbiAgICB2YXIgYTIwID0gYVs2XSwgYTIxID0gYVs3XSwgYTIyID0gYVs4XTtcbiAgICB2YXIgYjAwID0gYlswXSwgYjAxID0gYlsxXSwgYjAyID0gYlsyXTtcbiAgICB2YXIgYjEwID0gYlszXSwgYjExID0gYls0XSwgYjEyID0gYls1XTtcbiAgICB2YXIgYjIwID0gYls2XSwgYjIxID0gYls3XSwgYjIyID0gYls4XTtcbiAgICBhWzBdID0gYjAwICogYTAwICsgYjAxICogYTEwICsgYjAyICogYTIwO1xuICAgIGFbMV0gPSBiMDAgKiBhMDEgKyBiMDEgKiBhMTEgKyBiMDIgKiBhMjE7XG4gICAgYVsyXSA9IGIwMCAqIGEwMiArIGIwMSAqIGExMiArIGIwMiAqIGEyMjtcbiAgICBhWzNdID0gYjEwICogYTAwICsgYjExICogYTEwICsgYjEyICogYTIwO1xuICAgIGFbNF0gPSBiMTAgKiBhMDEgKyBiMTEgKiBhMTEgKyBiMTIgKiBhMjE7XG4gICAgYVs1XSA9IGIxMCAqIGEwMiArIGIxMSAqIGExMiArIGIxMiAqIGEyMjtcbiAgICBhWzZdID0gYjIwICogYTAwICsgYjIxICogYTEwICsgYjIyICogYTIwO1xuICAgIGFbN10gPSBiMjAgKiBhMDEgKyBiMjEgKiBhMTEgKyBiMjIgKiBhMjE7XG4gICAgYVs4XSA9IGIyMCAqIGEwMiArIGIyMSAqIGExMiArIGIyMiAqIGEyMjtcbiAgICByZXR1cm4gYTtcbn1cbmV4cG9ydHMubXVsdGlwbHkgPSBtdWx0aXBseTtcbmZ1bmN0aW9uIG11bHRpcGx5VmVjMihhLCBiLCB6KSB7XG4gICAgaWYgKHogPT09IHZvaWQgMCkgeyB6ID0gMTsgfVxuICAgIHZhciBhMDAgPSBhWzBdO1xuICAgIHZhciBhMDEgPSBhWzFdO1xuICAgIHZhciBhMTAgPSBhWzNdO1xuICAgIHZhciBhMTEgPSBhWzRdO1xuICAgIHZhciBhMjAgPSBhWzZdO1xuICAgIHZhciBhMjEgPSBhWzddO1xuICAgIHZhciBiMCA9IGIueDtcbiAgICB2YXIgYjEgPSBiLnk7XG4gICAgcmV0dXJuIHsgeDogYjAgKiBhMDAgKyBiMSAqIGExMCArIGEyMCAqIHosIHk6IGIwICogYTAxICsgYjEgKiBhMTEgKyBhMjEgKiB6IH07XG59XG5leHBvcnRzLm11bHRpcGx5VmVjMiA9IG11bHRpcGx5VmVjMjtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvKipcbiAqIFNpZ21hLmpzIFdlYkdMIFJlbmRlcmVyIE5vZGUgUHJvZ3JhbVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIFNpbXBsZSBwcm9ncmFtIHJlbmRlcmluZyBub2RlcyBhcyBkaXNjcywgc2hhcGVkIGJ5IHRyaWFuZ2xlcyB1c2luZyB0aGVcbiAqIGBnbC5UUklBTkdMRVNgIGRpc3BsYXkgbW9kZS4gU28sIHRvIGRyYXcgb25lIG5vZGUsIGl0IHdpbGwgbmVlZCB0byBzdG9yZVxuICogdGhyZWUgdGltZXMgdGhlIGNlbnRlciBvZiB0aGUgbm9kZSwgd2l0aCB0aGUgY29sb3IsIHRoZSBzaXplIGFuZCBhbiBhbmdsZVxuICogaW5kaWNhdGluZyB3aGljaCBcImNvcm5lclwiIG9mIHRoZSB0cmlhbmdsZSB0byBkcmF3LlxuICogSXQgZG9lcyBub3QgZXh0ZW5kIEFic3RyYWN0Tm9kZVByb2dyYW0sIHdoaWNoIHdvcmtzIHZlcnkgZGlmZmVyZW50bHksIGFuZFxuICogcmVhbGx5IHRhcmdldHMgdGhlIGdsLlBPSU5UUyBkcmF3aW5nIG1ldGhvZHMuXG4gKiBAbW9kdWxlXG4gKi9cbmltcG9ydCB7IE5vZGVEaXNwbGF5RGF0YSB9IGZyb20gXCJzaWdtYS90eXBlc1wiO1xuaW1wb3J0IHsgZmxvYXRDb2xvciB9IGZyb20gXCJzaWdtYS91dGlsc1wiO1xuaW1wb3J0IHZlcnRleFNoYWRlclNvdXJjZSBmcm9tIFwiLi9ub2RlLnNxdWFyZS52ZXJ0Lmdsc2xcIjtcbmltcG9ydCBmcmFnbWVudFNoYWRlclNvdXJjZSBmcm9tIFwiLi9ub2RlLnNxdWFyZS5mcmFnLmdsc2xcIjtcbmltcG9ydCB7IEFic3RyYWN0UHJvZ3JhbSB9IGZyb20gXCJzaWdtYS9yZW5kZXJpbmcvd2ViZ2wvcHJvZ3JhbXMvY29tbW9uL3Byb2dyYW1cIjtcbmltcG9ydCB7IFJlbmRlclBhcmFtcyB9IGZyb20gXCJzaWdtYS9yZW5kZXJpbmcvd2ViZ2wvcHJvZ3JhbXMvY29tbW9uL3Byb2dyYW1cIjtcblxuY29uc3QgUE9JTlRTID0gMztcbmNvbnN0IEFUVFJJQlVURVMgPSA1O1xuXG5jb25zdCBBTkdMRV8xID0gMDtcbmNvbnN0IEFOR0xFXzIgPSAoMiAqIE1hdGguUEkpIC8gMztcbmNvbnN0IEFOR0xFXzMgPSAoNCAqTWF0aC5QSSkgLyAzO1xuXG5leHBvcnQgY2xhc3MgTm9kZVByb2dyYW1TcXVhcmUgZXh0ZW5kcyBBYnN0cmFjdFByb2dyYW0ge1xuICBwb3NpdGlvbkxvY2F0aW9uOiBHTGludDtcbiAgc2l6ZUxvY2F0aW9uOiBHTGludDtcbiAgY29sb3JMb2NhdGlvbjogR0xpbnQ7XG4gIGFuZ2xlTG9jYXRpb246IEdMaW50O1xuXG4gIG1hdHJpeExvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjtcbiAgc3FydFpvb21SYXRpb0xvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjtcbiAgY29ycmVjdGlvblJhdGlvTG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcbiAgICBzdXBlcihnbCwgdmVydGV4U2hhZGVyU291cmNlLCBmcmFnbWVudFNoYWRlclNvdXJjZSwgUE9JTlRTLCBBVFRSSUJVVEVTKTtcblxuICAgIC8vIExvY2F0aW9uc1xuICAgIHRoaXMucG9zaXRpb25Mb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgXCJhX3Bvc2l0aW9uXCIpO1xuICAgIHRoaXMuc2l6ZUxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24odGhpcy5wcm9ncmFtLCBcImFfc2l6ZVwiKTtcbiAgICB0aGlzLmNvbG9yTG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbih0aGlzLnByb2dyYW0sIFwiYV9jb2xvclwiKTtcbiAgICB0aGlzLmFuZ2xlTG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbih0aGlzLnByb2dyYW0sIFwiYV9hbmdsZVwiKTtcblxuICAgIC8vIFVuaWZvcm0gTG9jYXRpb25cbiAgICBjb25zdCBtYXRyaXhMb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnByb2dyYW0sIFwidV9tYXRyaXhcIik7XG4gICAgaWYgKG1hdHJpeExvY2F0aW9uID09PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoXCJBYnN0cmFjdE5vZGVQcm9ncmFtOiBlcnJvciB3aGlsZSBnZXR0aW5nIG1hdHJpeExvY2F0aW9uXCIpO1xuICAgIHRoaXMubWF0cml4TG9jYXRpb24gPSBtYXRyaXhMb2NhdGlvbjtcblxuICAgIGNvbnN0IHNxcnRab29tUmF0aW9Mb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnByb2dyYW0sIFwidV9zcXJ0Wm9vbVJhdGlvXCIpO1xuICAgIGlmIChzcXJ0Wm9vbVJhdGlvTG9jYXRpb24gPT09IG51bGwpIHRocm93IG5ldyBFcnJvcihcIk5vZGVQcm9ncmFtOiBlcnJvciB3aGlsZSBnZXR0aW5nIHNxcnRab29tUmF0aW9Mb2NhdGlvblwiKTtcbiAgICB0aGlzLnNxcnRab29tUmF0aW9Mb2NhdGlvbiA9IHNxcnRab29tUmF0aW9Mb2NhdGlvbjtcblxuICAgIGNvbnN0IGNvcnJlY3Rpb25SYXRpb0xvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgXCJ1X2NvcnJlY3Rpb25SYXRpb1wiKTtcbiAgICBpZiAoY29ycmVjdGlvblJhdGlvTG9jYXRpb24gPT09IG51bGwpIHRocm93IG5ldyBFcnJvcihcIk5vZGVQcm9ncmFtOiBlcnJvciB3aGlsZSBnZXR0aW5nIGNvcnJlY3Rpb25SYXRpb0xvY2F0aW9uXCIpO1xuICAgIHRoaXMuY29ycmVjdGlvblJhdGlvTG9jYXRpb24gPSBjb3JyZWN0aW9uUmF0aW9Mb2NhdGlvbjtcblxuICAgIHRoaXMuYmluZCgpO1xuICB9XG5cbiAgYmluZCgpOiB2b2lkIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG5cbiAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLnBvc2l0aW9uTG9jYXRpb24pO1xuICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMuc2l6ZUxvY2F0aW9uKTtcbiAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLmNvbG9yTG9jYXRpb24pO1xuICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMuYW5nbGVMb2NhdGlvbik7XG5cbiAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKFxuICAgICAgdGhpcy5wb3NpdGlvbkxvY2F0aW9uLFxuICAgICAgMixcbiAgICAgIGdsLkZMT0FULFxuICAgICAgZmFsc2UsXG4gICAgICB0aGlzLmF0dHJpYnV0ZXMgKiBGbG9hdDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQsXG4gICAgICAwLFxuICAgICk7XG4gICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLnNpemVMb2NhdGlvbiwgMSwgZ2wuRkxPQVQsIGZhbHNlLCB0aGlzLmF0dHJpYnV0ZXMgKiBGbG9hdDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQsIDgpO1xuICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoXG4gICAgICB0aGlzLmNvbG9yTG9jYXRpb24sXG4gICAgICA0LFxuICAgICAgZ2wuVU5TSUdORURfQllURSxcbiAgICAgIHRydWUsXG4gICAgICB0aGlzLmF0dHJpYnV0ZXMgKiBGbG9hdDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQsXG4gICAgICAxMixcbiAgICApO1xuICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoXG4gICAgICB0aGlzLmFuZ2xlTG9jYXRpb24sXG4gICAgICAxLFxuICAgICAgZ2wuRkxPQVQsXG4gICAgICBmYWxzZSxcbiAgICAgIHRoaXMuYXR0cmlidXRlcyAqIEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgIDE2LFxuICAgICk7XG4gIH1cblxuICBwcm9jZXNzKGRhdGE6IE5vZGVEaXNwbGF5RGF0YSwgaGlkZGVuOiBib29sZWFuLCBvZmZzZXQ6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IGFycmF5ID0gdGhpcy5hcnJheTtcbiAgICBsZXQgaSA9IG9mZnNldCAqIFBPSU5UUyAqIEFUVFJJQlVURVM7XG5cbiAgICBpZiAoaGlkZGVuKSB7XG4gICAgICBmb3IgKGxldCBsID0gaSArIFBPSU5UUyAqIEFUVFJJQlVURVM7IGkgPCBsOyBpKyspIGFycmF5W2ldID0gMDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBjb2xvciA9IGZsb2F0Q29sb3IoZGF0YS5jb2xvcik7XG5cbiAgICBhcnJheVtpKytdID0gZGF0YS54O1xuICAgIGFycmF5W2krK10gPSBkYXRhLnk7XG4gICAgYXJyYXlbaSsrXSA9IGRhdGEuc2l6ZTtcbiAgICBhcnJheVtpKytdID0gY29sb3I7XG4gICAgYXJyYXlbaSsrXSA9IEFOR0xFXzE7XG5cbiAgICBhcnJheVtpKytdID0gZGF0YS54O1xuICAgIGFycmF5W2krK10gPSBkYXRhLnk7XG4gICAgYXJyYXlbaSsrXSA9IGRhdGEuc2l6ZTtcbiAgICBhcnJheVtpKytdID0gY29sb3I7XG4gICAgYXJyYXlbaSsrXSA9IEFOR0xFXzI7XG5cbiAgICBhcnJheVtpKytdID0gZGF0YS54O1xuICAgIGFycmF5W2krK10gPSBkYXRhLnk7XG4gICAgYXJyYXlbaSsrXSA9IGRhdGEuc2l6ZTtcbiAgICBhcnJheVtpKytdID0gY29sb3I7XG4gICAgYXJyYXlbaV0gPSBBTkdMRV8zO1xuICB9XG5cbiAgcmVuZGVyKHBhcmFtczogUmVuZGVyUGFyYW1zKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaGFzTm90aGluZ1RvUmVuZGVyKCkpIHJldHVybjtcblxuICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcbiAgICBjb25zdCBwcm9ncmFtID0gdGhpcy5wcm9ncmFtO1xuXG4gICAgZ2wudXNlUHJvZ3JhbShwcm9ncmFtKTtcblxuICAgIGdsLnVuaWZvcm1NYXRyaXgzZnYodGhpcy5tYXRyaXhMb2NhdGlvbiwgZmFsc2UsIHBhcmFtcy5tYXRyaXgpO1xuICAgIGdsLnVuaWZvcm0xZih0aGlzLnNxcnRab29tUmF0aW9Mb2NhdGlvbiwgTWF0aC5zcXJ0KHBhcmFtcy5yYXRpbykpO1xuICAgIGdsLnVuaWZvcm0xZih0aGlzLmNvcnJlY3Rpb25SYXRpb0xvY2F0aW9uLCBwYXJhbXMuY29ycmVjdGlvblJhdGlvKTtcblxuICAgIGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVTLCAwLCB0aGlzLmFycmF5Lmxlbmd0aCAvIEFUVFJJQlVURVMpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgXCJhdHRyaWJ1dGUgdmVjMiBhX3Bvc2l0aW9uO1xcbmF0dHJpYnV0ZSBmbG9hdCBhX3NpemU7XFxuYXR0cmlidXRlIGZsb2F0IGFfYW5nbGU7XFxuYXR0cmlidXRlIHZlYzQgYV9jb2xvcjtcXG5cXG51bmlmb3JtIG1hdDMgdV9tYXRyaXg7XFxudW5pZm9ybSBmbG9hdCB1X3NxcnRab29tUmF0aW87XFxudW5pZm9ybSBmbG9hdCB1X2NvcnJlY3Rpb25SYXRpbztcXG5cXG52YXJ5aW5nIHZlYzQgdl9jb2xvcjtcXG52YXJ5aW5nIHZlYzIgdl9kaWZmVmVjdG9yO1xcbnZhcnlpbmcgZmxvYXQgdl9yYWRpdXM7XFxudmFyeWluZyBmbG9hdCB2X2JvcmRlcjtcXG5cXG5jb25zdCBmbG9hdCBiaWFzID0gMjU1LjAgLyAyNTQuMDtcXG5jb25zdCBmbG9hdCBtYXJnaW5SYXRpbyA9IDEuMDU7XFxuXFxudm9pZCBtYWluKCkge1xcbiAgZmxvYXQgc2l6ZSA9IGFfc2l6ZSAqIHVfY29ycmVjdGlvblJhdGlvICogdV9zcXJ0Wm9vbVJhdGlvICogNC4wO1xcbiAgdmVjMiBkaWZmVmVjdG9yID0gc2l6ZSAqIHZlYzIoY29zKGFfYW5nbGUpLCBzaW4oYV9hbmdsZSkpO1xcbiAgdmVjMiBwb3NpdGlvbiA9IGFfcG9zaXRpb24gKyBkaWZmVmVjdG9yICogbWFyZ2luUmF0aW87XFxuICBnbF9Qb3NpdGlvbiA9IHZlYzQoXFxuICAgICh1X21hdHJpeCAqIHZlYzMocG9zaXRpb24sIDEpKS54eSxcXG4gICAgMCxcXG4gICAgMVxcbiAgKTtcXG5cXG4gIHZfYm9yZGVyID0gdV9jb3JyZWN0aW9uUmF0aW8gKiB1X3NxcnRab29tUmF0aW8gKiB1X3NxcnRab29tUmF0aW87XFxuICB2X2RpZmZWZWN0b3IgPSBkaWZmVmVjdG9yO1xcbiAgdl9yYWRpdXMgPSBzaXplIC8gMi4wIC8gbWFyZ2luUmF0aW87XFxuXFxuICB2X2NvbG9yID0gYV9jb2xvcjtcXG4gIHZfY29sb3IuYSAqPSBiaWFzO1xcbn1cIiIsImV4cG9ydCBkZWZhdWx0IFwiI2lmZGVmIEdMX0ZSQUdNRU5UX1BSRUNJU0lPTl9ISUdIXFxuICAgcHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbiNlbHNlXFxuICAgcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxuI2VuZGlmXFxuXFxudmFyeWluZyB2ZWM0IHZfY29sb3I7XFxudmFyeWluZyB2ZWMyIHZfZGlmZlZlY3RvcjtcXG52YXJ5aW5nIGZsb2F0IHZfcmFkaXVzO1xcbnZhcnlpbmcgZmxvYXQgdl9ib3JkZXI7XFxuXFxuY29uc3QgdmVjNCB0cmFuc3BhcmVudCA9IHZlYzQoMC4wLCAwLjAsIDAuMCwgMC4wKTtcXG5cXG52b2lkIG1haW4odm9pZCkge1xcbiAgZmxvYXQgZGlzdCA9IGxlbmd0aCh2X2RpZmZWZWN0b3IpIC0gdl9yYWRpdXM7XFxuXFxuICBmbG9hdCB0ID0gMC4wO1xcbiAgaWYgKGRpc3QgPiB2X2JvcmRlcilcXG4gICAgdCA9IDEuMDtcXG4gIGVsc2UgaWYgKGRpc3QgPiAwLjApXFxuICAgIHQgPSBkaXN0IC8gdl9ib3JkZXI7XFxuXFxuICBnbF9GcmFnQ29sb3IgPSBtaXgodl9jb2xvciwgdHJhbnNwYXJlbnQsIHQpO1xcbn1cIiIsImltcG9ydCBHcmFwaCBmcm9tIFwiZ3JhcGhvbG9neVwiO1xyXG5pbXBvcnQgU2lnbWEgZnJvbSBcInNpZ21hXCI7XHJcbmltcG9ydCBkYXRhIGZyb20gXCIuL2RhdGEyLmpzb25cIjtcclxuaW1wb3J0IHsgTm9kZVByb2dyYW1TcXVhcmUgfSBmcm9tIFwiLi9ub2RlLnNxdWFyZVwiO1xyXG5pbXBvcnQgeyBDb29yZGluYXRlcywgRWRnZURpc3BsYXlEYXRhLCBOb2RlRGlzcGxheURhdGEgfSBmcm9tIFwic2lnbWEvdHlwZXNcIjtcclxuaW1wb3J0IF8gZnJvbSBcImxvZGFzaFwiO1xyXG5pbXBvcnQgeyBnZXRTeXN0ZW1FcnJvck1hcCB9IGZyb20gXCJ1dGlsXCI7XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIGhvdmVyZWROb2RlPzogc3RyaW5nO1xyXG4gIHNlYXJjaFF1ZXJ5OiBzdHJpbmc7XHJcbiAgLy8gU3RhdGUgZGVyaXZlZCBmcm9tIHF1ZXJ5OlxyXG5cclxuICBzZWxlY3RlZE5vZGU/OiBzdHJpbmc7XHJcbiAgc3VnZ2VzdGlvbnM/OiBTZXQ8c3RyaW5nPjtcclxuXHJcbiAgLy8gU3RhdGUgZGVyaXZlZCBmcm9tIGhvdmVyZWQgbm9kZTpcclxuICBob3ZlcmVkTmVpZ2hib3JzPzogU2V0PHN0cmluZz47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTaWdtYUdyYXBoQ3JlYXRvciBpbXBsZW1lbnRzIFN0YXRlIHtcclxuICAvL3RoZSBvcmRlcmluZyBncmFwaCBodG1sXHJcbiAgcm9vdGVsZW1lbnQ7XHJcbiAgLy90aGUgZGl2IGVsZW1lbnQsIHdoZXJlIHRoZSBncmFwaCB3aWxsIGJlXHJcbiAgc2lnbWFDb250YWluZXI7XHJcbiAgLy90aGUgZGl2IGVsZW1lbnQgZm9yIHRoZSBzZWFyY2ggd2luZG93XHJcbiAgc2VhcmNoV2luZG93Q29udGFpbmVyO1xyXG4gIHNlYXJjaFdpbmRvd0lucHV0Q29udGFpbmVyO1xyXG4gIHNlYXJjaFdpbmRvd0RhdGFsaXN0OiBIVE1MRGF0YUxpc3RFbGVtZW50O1xyXG4gIC8vdGhlIGNhbnZhcyBlbGVtZW50cyB3aGljaCBtYWtlIHVwIHRoZSBncmFwaFxyXG4gIGdyYXBoO1xyXG4gIHJlbmRlcmVyO1xyXG5cclxuICAvL3N0YXRlIHZhcmlhYmxlc1xyXG4gIHN0YXRlOiBTdGF0ZTtcclxuICBob3ZlcmVkTm9kZT86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICBzZWFyY2hRdWVyeTogc3RyaW5nO1xyXG4gIHNlbGVjdGVkTm9kZT86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICBzdWdnZXN0aW9ucz86IFNldDxzdHJpbmc+IHwgdW5kZWZpbmVkO1xyXG4gIGhvdmVyZWROZWlnaGJvcnM/OiBTZXQ8c3RyaW5nPiB8IHVuZGVmaW5lZDtcclxuXHJcbiAgY29uc3RydWN0b3Iocm9vdGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XHJcbiAgICAvL2dyYXBoXHJcbiAgICB0aGlzLnN0YXRlID0geyBzZWFyY2hRdWVyeTogXCJcIiB9O1xyXG4gICAgdGhpcy5yb290ZWxlbWVudCA9IHJvb3RlbGVtZW50O1xyXG5cclxuICAgIHRoaXMuc2lnbWFDb250YWluZXIgPSByb290ZWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBcIiNzaWdtYS1jb250YWluZXJcIlxyXG4gICAgKSBhcyBIVE1MRWxlbWVudDtcclxuICAgIHRoaXMuc2VhcmNoV2luZG93SW5wdXRDb250YWluZXIgPSByb290ZWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBcIiNzZWFyY2gtaW5wdXRcIlxyXG4gICAgKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICAgdGhpcy5zZWFyY2hXaW5kb3dEYXRhbGlzdCA9IHJvb3RlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiI3N1Z2dlc3Rpb25zXCJcclxuICAgICkgYXMgSFRNTERhdGFMaXN0RWxlbWVudDtcclxuICB9XHJcblxyXG4gIC8vIEFjdGlvbnM6XHJcbiAgcHJpdmF0ZSBzZXRTZWFyY2hRdWVyeShxdWVyeTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLnN0YXRlLnNlYXJjaFF1ZXJ5ID0gcXVlcnk7XHJcblxyXG4gICAgaWYgKHRoaXMuc2VhcmNoV2luZG93SW5wdXRDb250YWluZXIudmFsdWUgIT09IHF1ZXJ5KVxyXG4gICAgICB0aGlzLnNlYXJjaFdpbmRvd0lucHV0Q29udGFpbmVyLnZhbHVlID0gcXVlcnk7XHJcblxyXG4gICAgaWYgKHF1ZXJ5KSB7XHJcbiAgICAgIGNvbnN0IGxjUXVlcnkgPSBxdWVyeS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICB2YXIgc3VnZ2VzdGlvbnMgPSB0aGlzLmdyYXBoXHJcbiAgICAgICAgLm5vZGVzKClcclxuICAgICAgICAubWFwKChuKSA9PiAoe1xyXG4gICAgICAgICAgaWQ6IG4sXHJcbiAgICAgICAgICBsYWJlbDogdGhpcy5ncmFwaC5nZXROb2RlQXR0cmlidXRlKG4sIFwibGFiZWxcIikgYXMgc3RyaW5nLFxyXG4gICAgICAgIH0pKVxyXG4gICAgICAgIC5maWx0ZXIoKHsgbGFiZWwgfSkgPT4gbGFiZWwudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhsY1F1ZXJ5KSk7XHJcbiAgICAgIC8vIElmIHdlIGhhdmUgYSBzaW5nbGUgcGVyZmVjdCBtYXRjaCwgdGhlbSB3ZSByZW1vdmUgdGhlIHN1Z2dlc3Rpb25zLCBhbmRcclxuICAgICAgLy8gd2UgY29uc2lkZXIgdGhlIHVzZXIgaGFzIHNlbGVjdGVkIGEgbm9kZSB0aHJvdWdoIHRoZSBkYXRhbGlzdFxyXG4gICAgICAvLyBhdXRvY29tcGxldGU6XHJcbiAgICAgIGlmIChzdWdnZXN0aW9uc1swXS5sYWJlbCA9PT0gcXVlcnkpIHtcclxuICAgICAgICB0aGlzLnN0YXRlLnNlbGVjdGVkTm9kZSA9IHN1Z2dlc3Rpb25zWzBdLmlkO1xyXG4gICAgICAgIHRoaXMuc3RhdGUuc3VnZ2VzdGlvbnMgPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIC8vIE1vdmUgdGhlIGNhbWVyYSB0byBjZW50ZXIgaXQgb24gdGhlIHNlbGVjdGVkIG5vZGU6XHJcbiAgICAgICAgY29uc3Qgbm9kZVBvc2l0aW9uID0gdGhpcy5yZW5kZXJlci5nZXROb2RlRGlzcGxheURhdGEoXHJcbiAgICAgICAgICB0aGlzLnN0YXRlLnNlbGVjdGVkTm9kZVxyXG4gICAgICAgICkgYXMgQ29vcmRpbmF0ZXM7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlci5nZXRDYW1lcmEoKS5hbmltYXRlKG5vZGVQb3NpdGlvbiwge1xyXG4gICAgICAgICAgZHVyYXRpb246IDUwMCxcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICAvLyBFbHNlLCB3ZSBkaXNwbGF5IHRoZSBzdWdnZXN0aW9ucyBsaXN0OlxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB0aGlzLnN0YXRlLnNlbGVjdGVkTm9kZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLnN0YXRlLnN1Z2dlc3Rpb25zID0gbmV3IFNldChzdWdnZXN0aW9ucy5tYXAoKHsgaWQgfSkgPT4gaWQpKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gSWYgdGhlIHF1ZXJ5IGlzIGVtcHR5LCB0aGVuIHdlIHJlc2V0IHRoZSBzZWxlY3RlZE5vZGUgLyBzdWdnZXN0aW9ucyBzdGF0ZTpcclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLnN0YXRlLnNlbGVjdGVkTm9kZSA9IHVuZGVmaW5lZDtcclxuICAgICAgdGhpcy5zdGF0ZS5zdWdnZXN0aW9ucyA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIC8vIFJlZnJlc2ggcmVuZGVyaW5nOlxyXG4gICAgdGhpcy5yZW5kZXJlci5yZWZyZXNoKCk7XHJcbiAgfVxyXG4gIHByaXZhdGUgc2V0SG92ZXJlZE5vZGUobm9kZT86IHN0cmluZykge1xyXG4gICAgaWYgKG5vZGUpIHtcclxuICAgICAgdGhpcy5zdGF0ZS5ob3ZlcmVkTm9kZSA9IG5vZGU7XHJcbiAgICAgIGNvbnN0IG5vZGVUcmFpbklEID0gdGhpcy5ncmFwaC5nZXROb2RlQXR0cmlidXRlKG5vZGUsIFwidHJhaW5faWRcIik7XHJcbiAgICAgIHRoaXMuc3RhdGUuaG92ZXJlZE5laWdoYm9ycyA9IHRoaXMuZmlsdGVyTm9kZXNGb3JHaXZlblRhcmdldChub2RlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc3RhdGUuaG92ZXJlZE5vZGUgPSB1bmRlZmluZWQ7XHJcbiAgICAgIHRoaXMuc3RhdGUuaG92ZXJlZE5laWdoYm9ycyA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZWZyZXNoIHJlbmRlcmluZzpcclxuICAgIHRoaXMucmVuZGVyZXIucmVmcmVzaCgpO1xyXG4gIH1cclxuXHJcbiAgLy9kZXRlcm1pbmVzIHdoaWNoIG90aGVyIHRyYWlucyBhcmUgbGlua2VkIGRpcmVjdGx5IHRvIHRoZSBnaXZlbiBub2RlJ3MgdHJhaW4gaWRcclxuICAvL2FuZCByZXR1cm5zIGEgc2V0IG9mIHRoZSBmaWx0ZXJlZCBub2Rlc1xyXG4gIHByaXZhdGUgZmlsdGVyTm9kZXNGb3JHaXZlblRhcmdldChub2RlPzogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBub2RlVHJhaW5JRDogc3RyaW5nID0gdGhpcy5ncmFwaC5nZXROb2RlQXR0cmlidXRlKG5vZGUsIFwidHJhaW5faWRcIik7XHJcbiAgICBsZXQgZmlsdGVyZWROb2RlcyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xyXG4gICAgZmlsdGVyZWROb2Rlcy5hZGQobm9kZVRyYWluSUQpO1xyXG5cclxuICAgIHRoaXMuZ3JhcGgubWFwRWRnZXMoKGVkZ2UpID0+IHtcclxuICAgICAgY29uc3QgdHJhaW5faWRfc291cmNlID0gdGhpcy5ncmFwaC5nZXRFZGdlQXR0cmlidXRlKFxyXG4gICAgICAgIGVkZ2UsXHJcbiAgICAgICAgXCJ0cmFpbl9pZF9zb3VyY2VcIlxyXG4gICAgICApO1xyXG4gICAgICBjb25zdCB0cmFpbl9pZF90YXJnZXQgPSB0aGlzLmdyYXBoLmdldEVkZ2VBdHRyaWJ1dGUoXHJcbiAgICAgICAgZWRnZSxcclxuICAgICAgICBcInRyYWluX2lkX3RhcmdldFwiXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBpZiAodHJhaW5faWRfc291cmNlID09PSBub2RlVHJhaW5JRCkge1xyXG4gICAgICAgIGZpbHRlcmVkTm9kZXMuYWRkKHRyYWluX2lkX3RhcmdldCk7XHJcbiAgICAgIH0gZWxzZSBpZiAodHJhaW5faWRfdGFyZ2V0ID09PSBub2RlVHJhaW5JRCkge1xyXG4gICAgICAgIGZpbHRlcmVkTm9kZXMuYWRkKHRyYWluX2lkX3NvdXJjZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIChmaWx0ZXJlZE5vZGVzID0gbmV3IFNldDxzdHJpbmc+KFxyXG4gICAgICB0aGlzLmdyYXBoLmZpbHRlck5vZGVzKChub2RlKSA9PlxyXG4gICAgICAgIGZpbHRlcmVkTm9kZXMuaGFzKHRoaXMuZ3JhcGguZ2V0Tm9kZUF0dHJpYnV0ZShub2RlLCBcInRyYWluX2lkXCIpKVxyXG4gICAgICApXHJcbiAgICApKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBjcmVhdGVTaWdtYUdyYXBoKCkge1xyXG4gICAgdGhpcy5ncmFwaCA9IG5ldyBHcmFwaCgpO1xyXG4gICAgdGhpcy5ncmFwaC5pbXBvcnQoZGF0YSk7XHJcbiAgICB2YXIgdHJhaW5JZER1bW15O1xyXG4gICAgdmFyIG5vZGVYVmFsdWUgPSAwO1xyXG5cclxuICAgIC8vbm9kZXNcclxuICAgIHRoaXMuZ3JhcGguZm9yRWFjaE5vZGUoKG5vZGUsIGkpID0+IHtcclxuICAgICAgbGV0IGN1cnJyZW50VHJhaW5JZCA9IHRoaXMuZ3JhcGguZ2V0Tm9kZUF0dHJpYnV0ZShub2RlLCBcInRyYWluX2lkXCIpO1xyXG4gICAgICBpZiAodHJhaW5JZER1bW15ID09PSBjdXJycmVudFRyYWluSWQpIHtcclxuICAgICAgICBub2RlWFZhbHVlKys7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdHJhaW5JZER1bW15ID0gY3VycnJlbnRUcmFpbklkO1xyXG4gICAgICAgIG5vZGVYVmFsdWUgPSAwO1xyXG4gICAgICB9XHJcbiAgICAgIC8vY29vcmRpbmF0ZXMgb2YgZWFjaCBub2RlXHJcbiAgICAgIHRoaXMuZ3JhcGhcclxuICAgICAgICAuc2V0Tm9kZUF0dHJpYnV0ZShub2RlLCBcInhcIiwgbm9kZVhWYWx1ZSAvIDIpXHJcbiAgICAgICAgLnNldE5vZGVBdHRyaWJ1dGUobm9kZSwgXCJ5XCIsIGN1cnJyZW50VHJhaW5JZCAvIDIpO1xyXG5cclxuICAgICAgLy9zdHlsZSBlbGVtZW50c1xyXG4gICAgICBsZXQgbGFiZWxOYW1lID0gXCJUcmFpbjpcIiArIGN1cnJyZW50VHJhaW5JZDtcclxuXHJcbiAgICAgIHRoaXMuZ3JhcGhcclxuICAgICAgICAubWVyZ2VOb2RlQXR0cmlidXRlcyhub2RlLCB7IGxhYmVsOiBsYWJlbE5hbWUgfSlcclxuICAgICAgICAuc2V0Tm9kZUF0dHJpYnV0ZShub2RlLCBcImNvbG9yXCIsIFwiIzAwMDAwMFwiKVxyXG4gICAgICAgIC5zZXROb2RlQXR0cmlidXRlKG5vZGUsIFwidHlwZVwiLCBcInNxdWFyZVwiKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vZWRnZXNcclxuICAgIHRoaXMuZ3JhcGguZm9yRWFjaEVkZ2UoKGVkZ2UpID0+IHtcclxuICAgICAgLy90aGlzIGFkZHMgdGhlIHRyYWluX2lkIGZvciBib3RoIG5vZGVzIG9mIHRoZSBlZGdlXHJcbiAgICAgIGNvbnN0IHRyYWluX2lkX3NvdXJjZSA9IHRoaXMuZ3JhcGguZmluZE5vZGUoXHJcbiAgICAgICAgKG5vZGUpID0+IG5vZGUgPT09IHRoaXMuZ3JhcGguc291cmNlKGVkZ2UpXHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnN0IHRyYWluX2lkX3RhcmdldCA9IHRoaXMuZ3JhcGguZmluZE5vZGUoXHJcbiAgICAgICAgKG5vZGUpID0+IG5vZGUgPT09IHRoaXMuZ3JhcGgudGFyZ2V0KGVkZ2UpXHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvL3N0eWxlIGVsZW1lbnRzXHJcbiAgICAgIHRoaXMuZ3JhcGhcclxuICAgICAgICAuc2V0RWRnZUF0dHJpYnV0ZShlZGdlLCBcInR5cGVcIiwgXCJhcnJvd1wiKVxyXG4gICAgICAgIC5zZXRFZGdlQXR0cmlidXRlKFxyXG4gICAgICAgICAgZWRnZSxcclxuICAgICAgICAgIFwidHJhaW5faWRfc291cmNlXCIsXHJcbiAgICAgICAgICB0aGlzLmdyYXBoLmdldE5vZGVBdHRyaWJ1dGUodHJhaW5faWRfc291cmNlLCBcInRyYWluX2lkXCIpXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5zZXRFZGdlQXR0cmlidXRlKFxyXG4gICAgICAgICAgZWRnZSxcclxuICAgICAgICAgIFwidHJhaW5faWRfdGFyZ2V0XCIsXHJcbiAgICAgICAgICB0aGlzLmdyYXBoLmdldE5vZGVBdHRyaWJ1dGUodHJhaW5faWRfdGFyZ2V0LCBcInRyYWluX2lkXCIpXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5zZXRFZGdlQXR0cmlidXRlKGVkZ2UsIFwic2l6ZVwiLCBcIjNcIik7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnJlbmRlcmVyID0gbmV3IFNpZ21hKHRoaXMuZ3JhcGgsIHRoaXMuc2lnbWFDb250YWluZXIsIHtcclxuICAgICAgYWxsb3dJbnZhbGlkQ29udGFpbmVyOiB0cnVlLFxyXG4gICAgICBub2RlUHJvZ3JhbUNsYXNzZXM6IHtcclxuICAgICAgICBzcXVhcmU6IE5vZGVQcm9ncmFtU3F1YXJlLFxyXG4gICAgICB9LFxyXG4gICAgICByZW5kZXJFZGdlTGFiZWxzOiB0cnVlLFxyXG4gICAgfSk7XHJcblxyXG4gICAgLy9nZXQgYWxsIG5vZGVzIGR1ZSB0byBsYWJsZSBhbmQgcmVtb3ZlIGR1cGxpY2F0ZSBub2RlcyBmcm9tIHN1Z2dlc3Rpb25zIGRyb3BEb3duTGlzdFxyXG4gICAgdmFyIHVuaXFOb2Rlc0xpc3QgPSB0aGlzLmdyYXBoXHJcbiAgICAgIC5ub2RlcygpXHJcbiAgICAgIC5tYXAoKG5vZGUpID0+IHRoaXMuZ3JhcGguZ2V0Tm9kZUF0dHJpYnV0ZShub2RlLCBcImxhYmVsXCIpKTtcclxuXHJcbiAgICAvL2l0ZXJhdGUgb3ZlciBhbGwgbm9kZXMgaW4gdGhlIGdyYXBoIGFuZCByZW1vdmUgZHVwbGljYXRlc1xyXG4gICAgdmFyIGxhc3ROb2RlID0gdW5pcU5vZGVzTGlzdFswXTtcclxuICAgIHZhciBjdXJyID0gMTtcclxuICAgIHdoaWxlIChjdXJyIDwgdW5pcU5vZGVzTGlzdC5sZW5ndGgpIHtcclxuICAgICAgLy9jaGVjayBpZmxhc3Qgbm9kZSBpcyB0aGUgc2FtZSBhcyBjdXJyZW50IG5vZGUgYW5kIHJtb3ZlIGl0XHJcbiAgICAgIGlmICh1bmlxTm9kZXNMaXN0W2N1cnJdID09PSBsYXN0Tm9kZSkgdW5pcU5vZGVzTGlzdC5zcGxpY2UoY3VyciwgMSk7XHJcbiAgICAgIC8vc2V0IG5ldyBub2RlIGFzIGxhc3ROb2RlIHRvIGNoZWNrIHdpdGggbmV4dCBub2Rlc1xyXG4gICAgICBlbHNlIGxhc3ROb2RlID0gdW5pcU5vZGVzTGlzdFtjdXJyKytdO1xyXG4gICAgfVxyXG4gICAgLy9kaXNwbGF5IHRoZSBub2Rlc2xpc3RcclxuICAgIHRoaXMuc2VhcmNoV2luZG93RGF0YWxpc3QuaW5uZXJIVE1MID0gdW5pcU5vZGVzTGlzdFxyXG4gICAgICAubWFwKChub2RlKSA9PiBgPG9wdGlvbiB2YWx1ZT1cIiR7bm9kZX1cIj48L29wdGlvbj5gKVxyXG4gICAgICAuam9pbihcIlxcblwiKTtcclxuICAgIC8vIEJpbmQgc2VhcmNoIGlucHV0IGludGVyYWN0aW9uczpcclxuICAgIHRoaXMuc2VhcmNoV2luZG93SW5wdXRDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+IHtcclxuICAgICAgdGhpcy5zZXRTZWFyY2hRdWVyeSh0aGlzLnNlYXJjaFdpbmRvd0lucHV0Q29udGFpbmVyLnZhbHVlIHx8IFwiXCIpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLnNlYXJjaFdpbmRvd0lucHV0Q29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5zZXRTZWFyY2hRdWVyeShcIlwiKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEJpbmQgZ3JhcGggaW50ZXJhY3Rpb25zOlxyXG4gICAgdGhpcy5yZW5kZXJlci5vbihcImVudGVyTm9kZVwiLCAoeyBub2RlIH0pID0+IHtcclxuICAgICAgdGhpcy5zZXRIb3ZlcmVkTm9kZShub2RlKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5yZW5kZXJlci5vbihcImxlYXZlTm9kZVwiLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuc2V0SG92ZXJlZE5vZGUodW5kZWZpbmVkKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFJlbmRlciBub2RlcyBhY2NvcmRpbmdseSB0byB0aGUgaW50ZXJuYWwgc3RhdGU6XHJcbiAgICAvLyAxLiBJZiBhIG5vZGUgaXMgc2VsZWN0ZWQsIGl0IGlzIGhpZ2hsaWdodGVkXHJcbiAgICAvLyAyLiBJZiB0aGVyZSBpcyBxdWVyeSwgYWxsIG5vbi1tYXRjaGluZyBub2RlcyBhcmUgZ3JleWVkXHJcbiAgICAvLyAzLiBJZiB0aGVyZSBpcyBhIGhvdmVyZWQgbm9kZSwgYWxsIG5vbi1uZWlnaGJvciBub2RlcyBhcmUgZ3JleWVkXHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldFNldHRpbmcoXCJub2RlUmVkdWNlclwiLCAobm9kZSwgZGF0YSkgPT4ge1xyXG4gICAgICBjb25zdCByZXM6IFBhcnRpYWw8Tm9kZURpc3BsYXlEYXRhPiA9IHsgLi4uZGF0YSB9O1xyXG5cclxuICAgICAgaWYgKFxyXG4gICAgICAgIHRoaXMuc3RhdGUuaG92ZXJlZE5laWdoYm9ycyAmJlxyXG4gICAgICAgICF0aGlzLnN0YXRlLmhvdmVyZWROZWlnaGJvcnMuaGFzKG5vZGUpICYmXHJcbiAgICAgICAgdGhpcy5zdGF0ZS5ob3ZlcmVkTm9kZSAhPT0gbm9kZVxyXG4gICAgICApIHtcclxuICAgICAgICByZXMubGFiZWwgPSBcIlwiO1xyXG4gICAgICAgIHJlcy5jb2xvciA9IFwiI2Y2ZjZmNlwiO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGhpcy5zdGF0ZS5zZWxlY3RlZE5vZGUgPT09IG5vZGUpIHtcclxuICAgICAgICByZXMuaGlnaGxpZ2h0ZWQgPSB0cnVlO1xyXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUuc3VnZ2VzdGlvbnMgJiYgIXRoaXMuc3RhdGUuc3VnZ2VzdGlvbnMuaGFzKG5vZGUpKSB7XHJcbiAgICAgICAgcmVzLmxhYmVsID0gXCJcIjtcclxuICAgICAgICByZXMuY29sb3IgPSBcIiNmNmY2ZjZcIjtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcmVzO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gUmVuZGVyIGVkZ2VzIGFjY29yZGluZ2x5IHRvIHRoZSBpbnRlcm5hbCBzdGF0ZTpcclxuICAgIC8vIDEuIElmIGEgbm9kZSBpcyBob3ZlcmVkLCB0aGUgZWRnZSBpcyBoaWRkZW4gaWYgaXQgaXMgbm90IGNvbm5lY3RlZCB0byB0aGVcclxuICAgIC8vICAgIG5vZGVcclxuICAgIC8vIDIuIElmIHRoZXJlIGlzIGEgcXVlcnksIHRoZSBlZGdlIGlzIG9ubHkgdmlzaWJsZSBpZiBpdCBjb25uZWN0cyB0d29cclxuICAgIC8vICAgIHN1Z2dlc3Rpb25zXHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldFNldHRpbmcoXCJlZGdlUmVkdWNlclwiLCAoZWRnZSwgZGF0YSkgPT4ge1xyXG4gICAgICBjb25zdCByZXM6IFBhcnRpYWw8RWRnZURpc3BsYXlEYXRhPiA9IHsgLi4uZGF0YSB9O1xyXG5cclxuICAgICAgaWYgKFxyXG4gICAgICAgIHRoaXMuc3RhdGUuaG92ZXJlZE5vZGUgJiZcclxuICAgICAgICAhdGhpcy5ncmFwaC5oYXNFeHRyZW1pdHkoZWRnZSwgdGhpcy5zdGF0ZS5ob3ZlcmVkTm9kZSlcclxuICAgICAgKSB7XHJcbiAgICAgICAgcmVzLmhpZGRlbiA9IHRydWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChcclxuICAgICAgICB0aGlzLnN0YXRlLnN1Z2dlc3Rpb25zICYmXHJcbiAgICAgICAgKCF0aGlzLnN0YXRlLnN1Z2dlc3Rpb25zLmhhcyh0aGlzLmdyYXBoLnNvdXJjZShlZGdlKSkgfHxcclxuICAgICAgICAgICF0aGlzLnN0YXRlLnN1Z2dlc3Rpb25zLmhhcyh0aGlzLmdyYXBoLnRhcmdldChlZGdlKSkpXHJcbiAgICAgICkge1xyXG4gICAgICAgIHJlcy5oaWRkZW4gPSB0cnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gcmVzO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVzaXplU2lnbWFHcmFwaCgpIHtcclxuICAgIGlmICh0aGlzLnJlbmRlcmVyICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgdGhpcy5yZW5kZXJlci5yZWZyZXNoKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmxvZyhcImdyYXBoIGRvZXNuJ3QgZXhpc3QhXCIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy91c2VkIHRvIGNsb3NlIHRoZSBjYW52YXMgdG8gbm90IHJ1biBpbnRvIGVycm9ycyB3aGVuIG9wZW5pbmcgdG8gbWFueSB3aW5kb3dzXHJcbiAgcHVibGljIGRlc3Ryb3lTaWdtYUdyYXBoKCkge1xyXG4gICAgaWYgKHRoaXMucmVuZGVyZXIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLmNsZWFyKCk7XHJcbiAgICAgIHRoaXMucmVuZGVyZXIua2lsbCgpO1xyXG4gICAgICB0aGlzLnJvb3RlbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuc2lnbWFDb250YWluZXIpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwic2VsZiIsImFycmF5IiwidmFsdWVzIiwibDIiLCJsZW5ndGgiLCJsMSIsImkiLCJSZWZsZWN0T3duS2V5cyIsIlIiLCJSZWZsZWN0IiwiUmVmbGVjdEFwcGx5IiwiYXBwbHkiLCJ0YXJnZXQiLCJyZWNlaXZlciIsImFyZ3MiLCJGdW5jdGlvbiIsInByb3RvdHlwZSIsImNhbGwiLCJvd25LZXlzIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImNvbmNhdCIsIk51bWJlcklzTmFOIiwiTnVtYmVyIiwiaXNOYU4iLCJ2YWx1ZSIsIkV2ZW50RW1pdHRlciIsImluaXQiLCJ0aGlzIiwib25jZSIsImVtaXR0ZXIiLCJuYW1lIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJlcnJvckxpc3RlbmVyIiwiZXJyIiwicmVtb3ZlTGlzdGVuZXIiLCJyZXNvbHZlciIsInNsaWNlIiwiYXJndW1lbnRzIiwiZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyIiwiaGFuZGxlciIsImZsYWdzIiwib24iLCJhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlciIsIl9ldmVudHMiLCJ1bmRlZmluZWQiLCJfZXZlbnRzQ291bnQiLCJfbWF4TGlzdGVuZXJzIiwiZGVmYXVsdE1heExpc3RlbmVycyIsImNoZWNrTGlzdGVuZXIiLCJsaXN0ZW5lciIsIlR5cGVFcnJvciIsIl9nZXRNYXhMaXN0ZW5lcnMiLCJ0aGF0IiwiX2FkZExpc3RlbmVyIiwidHlwZSIsInByZXBlbmQiLCJtIiwiZXZlbnRzIiwiZXhpc3RpbmciLCJ3YXJuaW5nIiwiY3JlYXRlIiwibmV3TGlzdGVuZXIiLCJlbWl0IiwidW5zaGlmdCIsInB1c2giLCJ3YXJuZWQiLCJ3IiwiRXJyb3IiLCJTdHJpbmciLCJjb3VudCIsImNvbnNvbGUiLCJ3YXJuIiwib25jZVdyYXBwZXIiLCJmaXJlZCIsIndyYXBGbiIsIl9vbmNlV3JhcCIsInN0YXRlIiwid3JhcHBlZCIsImJpbmQiLCJfbGlzdGVuZXJzIiwidW53cmFwIiwiZXZsaXN0ZW5lciIsImFyciIsInJldCIsIkFycmF5IiwidW53cmFwTGlzdGVuZXJzIiwiYXJyYXlDbG9uZSIsImxpc3RlbmVyQ291bnQiLCJuIiwiY29weSIsImFkZEV2ZW50TGlzdGVuZXIiLCJ3cmFwTGlzdGVuZXIiLCJhcmciLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwic2V0IiwiUmFuZ2VFcnJvciIsImdldFByb3RvdHlwZU9mIiwic2V0TWF4TGlzdGVuZXJzIiwiZ2V0TWF4TGlzdGVuZXJzIiwiZG9FcnJvciIsImVycm9yIiwiZXIiLCJtZXNzYWdlIiwiY29udGV4dCIsImxlbiIsImxpc3RlbmVycyIsImFkZExpc3RlbmVyIiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3QiLCJwb3NpdGlvbiIsIm9yaWdpbmFsTGlzdGVuZXIiLCJzaGlmdCIsImluZGV4IiwicG9wIiwic3BsaWNlT25lIiwib2ZmIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwia2V5Iiwia2V5cyIsInJhd0xpc3RlbmVycyIsImV2ZW50TmFtZXMiLCJhZGRVbmRpcmVjdGVkRWRnZVdpdGhLZXkiLCJkcm9wTm9kZSIsIm11bHRpIiwidCIsImUiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwiciIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiY29uc3RydWN0Iiwic2hhbSIsIlByb3h5IiwiQm9vbGVhbiIsInZhbHVlT2YiLCJvIiwiYSIsIk1hcCIsInRvU3RyaW5nIiwiaW5kZXhPZiIsImhhcyIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiYyIsIlJlZmVyZW5jZUVycm9yIiwidSIsImQiLCJfbm9kZXMiLCJvdXQiLCJ1bmRpcmVjdGVkIiwicyIsImgiLCJwIiwiZiIsImwiLCJhdHRyaWJ1dGVzIiwiaXNBcnJheSIsImFzc2lnbiIsImciLCJ5IiwidiIsImIiLCJVIiwiayIsIl8iLCJHIiwieCIsIkUiLCJBIiwiTCIsIkQiLCJTIiwiTiIsIm5leHQiLCJvZiIsImRvbmUiLCJlbXB0eSIsImZyb21TZXF1ZW5jZSIsImlzIiwiTyIsImoiLCJBUlJBWV9CVUZGRVJfU1VQUE9SVCIsIkFycmF5QnVmZmVyIiwiU1lNQk9MX1NVUFBPUlQiLCJDIiwiTSIsInoiLCJXIiwiUCIsImlzVmlldyIsIksiLCJUIiwiQiIsImNhcHR1cmVTdGFja1RyYWNlIiwiRiIsIkkiLCJZIiwiY2xlYXIiLCJxIiwiSiIsIlYiLCJzb3VyY2UiLCJIIiwiX2VkZ2VzIiwiaW5EZWdyZWUiLCJvdXREZWdyZWUiLCJ1bmRpcmVjdGVkRGVncmVlIiwidW5kaXJlY3RlZExvb3BzIiwiZGlyZWN0ZWRMb29wcyIsImluIiwiYXR0YWNoIiwiYXR0YWNoTXVsdGkiLCJwcmV2aW91cyIsImRldGFjaCIsImRldGFjaE11bHRpIiwiUSIsImF0dGFjaGVyIiwiaGFzT3duUHJvcGVydHkiLCJkYXRhIiwiWCIsIloiLCIkIiwidHQiLCJldCIsImRpcmVjdGlvbiIsIm50IiwicnQiLCJpdCIsImVkZ2UiLCJzb3VyY2VBdHRyaWJ1dGVzIiwidGFyZ2V0QXR0cmlidXRlcyIsIm90IiwiYXQiLCJjdCIsInV0Iiwic2l6ZSIsImZyb20iLCJ1bmRpcmVjdGVkU2l6ZSIsImRpcmVjdGVkU2l6ZSIsImR0Iiwic3QiLCJodCIsInB0IiwiZnQiLCJsdCIsImd0IiwieXQiLCJ3dCIsInZ0IiwiYnQiLCJtdCIsIndyYXAiLCJrdCIsIm5laWdoYm9yIiwieHQiLCJFdCIsIkF0IiwiTHQiLCJTdCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsIkR0IiwiU2V0IiwiVXQiLCJOdCIsImFsbG93U2VsZkxvb3BzIiwiT3QiLCJOb2RlRGF0YUNsYXNzIiwianQiLCJfZWRnZUtleUdlbmVyYXRvciIsIl91bmRpcmVjdGVkU2VsZkxvb3BDb3VudCIsIl9kaXJlY3RlZFNlbGZMb29wQ291bnQiLCJfdW5kaXJlY3RlZFNpemUiLCJfZGlyZWN0ZWRTaXplIiwiQ3QiLCJNdCIsImRlbGV0ZSIsInp0IiwiZm9yRWFjaCIsIl9vcHRpb25zIiwiX3Jlc2V0SW5zdGFuY2VDb3VudGVycyIsImhhc05vZGUiLCJoYXNEaXJlY3RlZEVkZ2UiLCJoYXNVbmRpcmVjdGVkRWRnZSIsImhhc0VkZ2UiLCJkaXJlY3RlZEVkZ2UiLCJ1bmRpcmVjdGVkRWRnZSIsImFyZURpcmVjdGVkTmVpZ2hib3JzIiwiYXJlT3V0TmVpZ2hib3JzIiwiYXJlSW5OZWlnaGJvcnMiLCJhcmVVbmRpcmVjdGVkTmVpZ2hib3JzIiwiYXJlTmVpZ2hib3JzIiwiYXJlSW5ib3VuZE5laWdoYm9ycyIsImFyZU91dGJvdW5kTmVpZ2hib3JzIiwiZGlyZWN0ZWREZWdyZWUiLCJpbmJvdW5kRGVncmVlIiwib3V0Ym91bmREZWdyZWUiLCJkZWdyZWUiLCJpbkRlZ3JlZVdpdGhvdXRTZWxmTG9vcHMiLCJvdXREZWdyZWVXaXRob3V0U2VsZkxvb3BzIiwiZGlyZWN0ZWREZWdyZWVXaXRob3V0U2VsZkxvb3BzIiwidW5kaXJlY3RlZERlZ3JlZVdpdGhvdXRTZWxmTG9vcHMiLCJpbmJvdW5kRGVncmVlV2l0aG91dFNlbGZMb29wcyIsIm91dGJvdW5kRGVncmVlV2l0aG91dFNlbGZMb29wcyIsImRlZ3JlZVdpdGhvdXRTZWxmTG9vcHMiLCJleHRyZW1pdGllcyIsIm9wcG9zaXRlIiwiaGFzRXh0cmVtaXR5IiwiaXNVbmRpcmVjdGVkIiwiaXNEaXJlY3RlZCIsImlzU2VsZkxvb3AiLCJhZGROb2RlIiwibWVyZ2VOb2RlIiwidXBkYXRlTm9kZSIsImRyb3BFZGdlIiwiZHJvcERpcmVjdGVkRWRnZSIsImRyb3BVbmRpcmVjdGVkRWRnZSIsImNsZWFyRWRnZXMiLCJnZXRBdHRyaWJ1dGUiLCJfYXR0cmlidXRlcyIsImdldEF0dHJpYnV0ZXMiLCJoYXNBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJ1cGRhdGVBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJyZXBsYWNlQXR0cmlidXRlcyIsIm1lcmdlQXR0cmlidXRlcyIsInVwZGF0ZUF0dHJpYnV0ZXMiLCJ1cGRhdGVFYWNoTm9kZUF0dHJpYnV0ZXMiLCJoaW50cyIsInVwZGF0ZUVhY2hFZGdlQXR0cmlidXRlcyIsImZvckVhY2hBZGphY2VuY3lFbnRyeSIsImZvckVhY2hBZGphY2VuY3lFbnRyeVdpdGhPcnBoYW5zIiwiZm9yRWFjaEFzc3ltZXRyaWNBZGphY2VuY3lFbnRyeSIsImZvckVhY2hBc3N5bWV0cmljQWRqYWNlbmN5RW50cnlXaXRoT3JwaGFucyIsIm5vZGVzIiwiZm9yRWFjaE5vZGUiLCJmaW5kTm9kZSIsIm1hcE5vZGVzIiwib3JkZXIiLCJzb21lTm9kZSIsImV2ZXJ5Tm9kZSIsImZpbHRlck5vZGVzIiwicmVkdWNlTm9kZXMiLCJub2RlRW50cmllcyIsIm5vZGUiLCJleHBvcnQiLCJvcHRpb25zIiwiZWRnZXMiLCJpbXBvcnQiLCJmb3JFYWNoRWRnZSIsIm1lcmdlVW5kaXJlY3RlZEVkZ2VXaXRoS2V5IiwibWVyZ2VEaXJlY3RlZEVkZ2VXaXRoS2V5IiwiYWRkRGlyZWN0ZWRFZGdlV2l0aEtleSIsIm1lcmdlVW5kaXJlY3RlZEVkZ2UiLCJtZXJnZURpcmVjdGVkRWRnZSIsImFkZFVuZGlyZWN0ZWRFZGdlIiwiYWRkRGlyZWN0ZWRFZGdlIiwibnVsbENvcHkiLCJlbXB0eUNvcHkiLCJ0b0pTT04iLCJpbnNwZWN0Iiwic3RhcnRzV2l0aCIsImZvciIsImdlbmVyYXRlS2V5IiwidG9VcHBlckNhc2UiLCJfdCIsIkd0IiwiV3QiLCJQdCIsIlJ0IiwiS3QiLCJUdCIsIkJ0IiwiR3JhcGgiLCJEaXJlY3RlZEdyYXBoIiwiVW5kaXJlY3RlZEdyYXBoIiwiTXVsdGlHcmFwaCIsIk11bHRpRGlyZWN0ZWRHcmFwaCIsIk11bHRpVW5kaXJlY3RlZEdyYXBoIiwiSW52YWxpZEFyZ3VtZW50c0dyYXBoRXJyb3IiLCJOb3RGb3VuZEdyYXBoRXJyb3IiLCJVc2FnZUdyYXBoRXJyb3IiLCJleHRlbmRTdGF0aWNzIiwiX19leHRlbmRzIiwiX18iLCJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiYW5pbWF0ZV8xIiwiZWFzaW5nc18xIiwidXRpbHNfMSIsInR5cGVzXzEiLCJERUZBVUxUX1pPT01JTkdfUkFUSU8iLCJDYW1lcmEiLCJfc3VwZXIiLCJfdGhpcyIsImFuZ2xlIiwicmF0aW8iLCJtaW5SYXRpbyIsIm1heFJhdGlvIiwibmV4dEZyYW1lIiwicHJldmlvdXNTdGF0ZSIsImVuYWJsZWQiLCJnZXRTdGF0ZSIsInNldFN0YXRlIiwiZW5hYmxlIiwiZGlzYWJsZSIsImhhc1N0YXRlIiwiZ2V0UHJldmlvdXNTdGF0ZSIsImdldEJvdW5kZWRSYXRpbyIsIm1heCIsIm1pbiIsInZhbGlkYXRlU3RhdGUiLCJ2YWxpZGF0ZWRTdGF0ZSIsImlzQW5pbWF0ZWQiLCJ2YWxpZFN0YXRlIiwidXBkYXRlU3RhdGUiLCJ1cGRhdGVyIiwiYW5pbWF0ZSIsIm9wdHMiLCJjYWxsYmFjayIsIkFOSU1BVEVfREVGQVVMVFMiLCJlYXNpbmciLCJkZWZhdWx0Iiwic3RhcnQiLCJEYXRlIiwibm93IiwiaW5pdGlhbFN0YXRlIiwiZm4iLCJkdXJhdGlvbiIsImFuaW1hdGlvbkNhbGxiYWNrIiwiY29lZmZpY2llbnQiLCJuZXdTdGF0ZSIsInJlcXVlc3RGcmFtZSIsImNhbmNlbEZyYW1lIiwiYW5pbWF0ZWRab29tIiwiZmFjdG9yT3JPcHRpb25zIiwiZmFjdG9yIiwiYW5pbWF0ZWRVbnpvb20iLCJhbmltYXRlZFJlc2V0IiwiVHlwZWRFdmVudEVtaXR0ZXIiLCJfX2Fzc2lnbiIsImdldFdoZWVsRGVsdGEiLCJnZXRUb3VjaENvb3JkcyIsImdldFRvdWNoZXNBcnJheSIsImdldFdoZWVsQ29vcmRzIiwiZ2V0TW91c2VDb29yZHMiLCJnZXRQb3NpdGlvbiIsImRvbSIsImJib3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRYIiwibGVmdCIsImNsaWVudFkiLCJ0b3AiLCJyZXMiLCJzaWdtYURlZmF1bHRQcmV2ZW50ZWQiLCJwcmV2ZW50U2lnbWFEZWZhdWx0Iiwib3JpZ2luYWwiLCJ0b3VjaGVzIiwiZGVsdGFZIiwiZGV0YWlsIiwiZGVsdGEiLCJtYXAiLCJ0b3VjaCIsIkNhcHRvciIsImNvbnRhaW5lciIsInJlbmRlcmVyIiwiX19jcmVhdGVCaW5kaW5nIiwiazIiLCJfX3NldE1vZHVsZURlZmF1bHQiLCJfX2ltcG9ydFN0YXIiLCJyZXN1bHQiLCJjYXB0b3JfMSIsIk1vdXNlQ2FwdG9yIiwiZHJhZ2dlZEV2ZW50cyIsImRvd25TdGFydFRpbWUiLCJsYXN0TW91c2VYIiwibGFzdE1vdXNlWSIsImlzTW91c2VEb3duIiwiaXNNb3ZpbmciLCJtb3ZpbmdUaW1lb3V0Iiwic3RhcnRDYW1lcmFTdGF0ZSIsImNsaWNrcyIsImRvdWJsZUNsaWNrVGltZW91dCIsImN1cnJlbnRXaGVlbERpcmVjdGlvbiIsImhhbmRsZUNsaWNrIiwiaGFuZGxlUmlnaHRDbGljayIsImhhbmRsZURvd24iLCJoYW5kbGVVcCIsImhhbmRsZU1vdmUiLCJoYW5kbGVXaGVlbCIsImhhbmRsZU91dCIsImRvY3VtZW50Iiwia2lsbCIsImNsZWFyVGltZW91dCIsImhhbmRsZURvdWJsZUNsaWNrIiwic2V0VGltZW91dCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwibW91c2VDb29yZHMiLCJjYW1lcmEiLCJnZXRDYW1lcmEiLCJuZXdSYXRpbyIsImdldFZpZXdwb3J0Wm9vbWVkU3RhdGUiLCJidXR0b24iLCJfYSIsImNhbWVyYVN0YXRlIiwicHJldmlvdXNDYW1lcmFTdGF0ZSIsInJlZnJlc2giLCJ3aW5kb3ciLCJlWCIsImVZIiwibGFzdE1vdXNlIiwidmlld3BvcnRUb0ZyYW1lZEdyYXBoIiwibW91c2UiLCJvZmZzZXRYIiwib2Zmc2V0WSIsIndoZWVsQ29vcmRzIiwicmF0aW9EaWZmIiwid2hlZWxEaXJlY3Rpb24iLCJsYXN0V2hlZWxUcmlnZ2VyVGltZSIsIk1PVVNFX1pPT01fRFVSQVRJT04iLCJfX3JlYWQiLCJhciIsIlRvdWNoQ2FwdG9yIiwiaGFzTW92ZWQiLCJ0b3VjaE1vZGUiLCJzdGFydFRvdWNoZXNQb3NpdGlvbnMiLCJoYW5kbGVTdGFydCIsImhhbmRsZUxlYXZlIiwiZ2V0RGltZW5zaW9ucyIsIndpZHRoIiwib2Zmc2V0V2lkdGgiLCJoZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJkaXNwYXRjaFJlbGF0ZWRNb3VzZUV2ZW50IiwibW91c2VQb3NpdGlvbiIsIm1vdXNlRXZlbnQiLCJNb3VzZUV2ZW50IiwiYWx0S2V5IiwiY3RybEtleSIsImlzRmFrZVNpZ21hTW91c2VFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJsYXN0VG91Y2hlcyIsImxhc3RUb3VjaGVzUG9zaXRpb25zIiwiX2IiLCJ4MCIsInkwIiwiX2MiLCJ4MSIsInkxIiwic3RhcnRUb3VjaGVzQW5nbGUiLCJhdGFuMiIsInN0YXJ0VG91Y2hlc0Rpc3RhbmNlIiwic3FydCIsInBvdyIsInRvdWNoZXNQb3NpdGlvbnMiLCJzb21lIiwiaWR4Iiwic3RhcnRQb3NpdGlvbiIsInhTdGFydCIsInlTdGFydCIsIm5ld0NhbWVyYVN0YXRlIiwiX2QiLCJfZSIsImFuZ2xlRGlmZiIsImh5cG90IiwiZGltZW5zaW9ucyIsInRvdWNoR3JhcGhQb3NpdGlvbiIsInNtYWxsZXN0RGltZW5zaW9uIiwiZHgiLCJjb3MiLCJzaW4iLCJlZGdlTGFiZWxzVG9EaXNwbGF5RnJvbU5vZGVzIiwiTGFiZWxHcmlkIiwiTGFiZWxDYW5kaWRhdGUiLCJjb21wYXJlIiwiZmlyc3QiLCJzZWNvbmQiLCJjZWxsU2l6ZSIsImNvbHVtbnMiLCJyb3dzIiwiY2VsbHMiLCJyZXNpemVBbmRDbGVhciIsImNlaWwiLCJnZXRJbmRleCIsInBvcyIsInhJbmRleCIsImFkZCIsImNhbmRpZGF0ZSIsImNlbGwiLCJvcmdhbml6ZSIsInNvcnQiLCJnZXRMYWJlbHNUb0Rpc3BsYXkiLCJkZW5zaXR5IiwiY2VsbEFyZWEiLCJzY2FsZWREZW5zaXR5IiwibGFiZWxzVG9EaXNwbGF5UGVyQ2VsbCIsImxhYmVscyIsInBhcmFtcyIsImdyYXBoIiwiaG92ZXJlZE5vZGUiLCJoaWdobGlnaHRlZE5vZGVzIiwiZGlzcGxheWVkTm9kZUxhYmVscyIsIndvcnRoeUVkZ2VzIiwicmVjdGFuZ2xlQ29sbGlkZXNXaXRoUXVhZCIsInNxdWFyZUNvbGxpZGVzV2l0aFF1YWQiLCJnZXRDaXJjdW1zY3JpYmVkQWxpZ25lZFJlY3RhbmdsZSIsImlzUmVjdGFuZ2xlQWxpZ25lZCIsImV4dGVuZF8xIiwiaGFzV2FybmVkVG9vTXVjaE91dHNpZGUiLCJyZWN0IiwieDIiLCJ5MiIsImhlaWdodFZlY3RvciIsInRsIiwidHIiLCJibCIsImJyIiwieEwiLCJ4UiIsInlUIiwicXgiLCJxeSIsInF3IiwicWgiLCJwb2ludElzSW5RdWFkIiwiUXVhZFRyZWUiLCJjb250YWluZXJzIiwiT1VUU0lERV9CTE9DSyIsImNhY2hlIiwibGFzdFJlY3RhbmdsZSIsIkZsb2F0MzJBcnJheSIsImJvdW5kYXJpZXMiLCJyZXNpemUiLCJtYXhMZXZlbCIsImxldmVsIiwiYmxvY2siLCJ0b3BMZWZ0QmxvY2siLCJ0b3BSaWdodEJsb2NrIiwiYm90dG9tTGVmdEJsb2NrIiwiYm90dG9tUmlnaHRCbG9jayIsImNvbGxpZGluZ1dpdGhUb3BMZWZ0IiwiY29sbGlkaW5nV2l0aFRvcFJpZ2h0IiwiY29sbGlkaW5nV2l0aEJvdHRvbUxlZnQiLCJjb2xsaWRpbmdXaXRoQm90dG9tUmlnaHQiLCJjb2xsaXNpb25zIiwicmVkdWNlIiwiYWNjIiwiY3VycmVudCIsImluc2VydE5vZGUiLCJzdGFjayIsImh3IiwiaGgiLCJidWlsZFF1YWRyYW50cyIsInBvaW50IiwicmVjdGFuZ2xlIiwibHIiLCJjb2xsZWN0ZWROb2RlcyIsImdldE5vZGVzSW5BeGlzQWxpZ25lZFJlY3RhbmdsZUFyZWEiLCJhYnMiLCJTaWdtYSIsInNpZ21hXzEiLCJjYW1lcmFfMSIsInF1YWR0cmVlXzEiLCJtb3VzZV8xIiwiZWRnZURhdGEiLCJzb3VyY2VEYXRhIiwidGFyZ2V0RGF0YSIsInNldHRpbmdzIiwiZWRnZUxhYmVsU2l6ZSIsImZvbnQiLCJlZGdlTGFiZWxGb250Iiwid2VpZ2h0IiwiZWRnZUxhYmVsV2VpZ2h0IiwiY29sb3IiLCJlZGdlTGFiZWxDb2xvciIsImF0dHJpYnV0ZSIsImxhYmVsIiwiZmlsbFN0eWxlIiwiY3giLCJjeSIsInNTaXplIiwidFNpemUiLCJzeCIsInN5IiwidHgiLCJ0eSIsImR5IiwidGV4dExlbmd0aCIsIm1lYXN1cmVUZXh0IiwiYWNvcyIsImFzaW4iLCJQSSIsInNhdmUiLCJ0cmFuc2xhdGUiLCJyb3RhdGUiLCJmaWxsVGV4dCIsInJlc3RvcmUiLCJsYWJlbF8xIiwibGFiZWxTaXplIiwibGFiZWxGb250IiwibGFiZWxXZWlnaHQiLCJzaGFkb3dPZmZzZXRYIiwic2hhZG93T2Zmc2V0WSIsInNoYWRvd0JsdXIiLCJzaGFkb3dDb2xvciIsInRleHRXaWR0aCIsImJveFdpZHRoIiwicm91bmQiLCJib3hIZWlnaHQiLCJyYWRpdXMiLCJhbmdsZVJhZGlhbiIsInhEZWx0YUNvb3JkIiwiYmVnaW5QYXRoIiwibW92ZVRvIiwibGluZVRvIiwiYXJjIiwiY2xvc2VQYXRoIiwiZmlsbCIsImxhYmVsQ29sb3IiLCJjcmVhdGVFZGdlQ29tcG91bmRQcm9ncmFtIiwiQWJzdHJhY3RFZGdlUHJvZ3JhbSIsImdsIiwidmVydGV4U2hhZGVyU291cmNlIiwiZnJhZ21lbnRTaGFkZXJTb3VyY2UiLCJwb2ludHMiLCJBYnN0cmFjdFByb2dyYW0iLCJwcm9ncmFtQ2xhc3NlcyIsIkVkZ2VDb21wb3VuZFByb2dyYW0iLCJwcm9ncmFtcyIsIlByb2dyYW1DbGFzcyIsImJ1ZmZlckRhdGEiLCJwcm9ncmFtIiwiYWxsb2NhdGUiLCJjYXBhY2l0eSIsImNvbXB1dGVJbmRpY2VzIiwicmVuZGVyIiwicHJvY2VzcyIsImhpZGRlbiIsIm9mZnNldCIsImNyZWF0ZU5vZGVDb21wb3VuZFByb2dyYW0iLCJBYnN0cmFjdE5vZGVQcm9ncmFtIiwicG9zaXRpb25Mb2NhdGlvbiIsImdldEF0dHJpYkxvY2F0aW9uIiwic2l6ZUxvY2F0aW9uIiwiY29sb3JMb2NhdGlvbiIsIm1hdHJpeExvY2F0aW9uIiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwicmF0aW9Mb2NhdGlvbiIsInNjYWxlTG9jYXRpb24iLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJGTE9BVCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiVU5TSUdORURfQllURSIsIk5vZGVDb21wb3VuZFByb2dyYW0iLCJidWZmZXIiLCJjcmVhdGVCdWZmZXIiLCJiaW5kQnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwidmVydGV4U2hhZGVyIiwibG9hZFZlcnRleFNoYWRlciIsImZyYWdtZW50U2hhZGVyIiwibG9hZEZyYWdtZW50U2hhZGVyIiwibG9hZFByb2dyYW0iLCJEWU5BTUlDX0RSQVciLCJoYXNOb3RoaW5nVG9SZW5kZXIiLCJlZGdlXzEiLCJlZGdlX2Fycm93SGVhZF8xIiwiZWRnZV9jbGFtcGVkXzEiLCJFZGdlQXJyb3dQcm9ncmFtIiwiZWRnZV9hcnJvd0hlYWRfdmVydF9nbHNsXzEiLCJlZGdlX2Fycm93SGVhZF9mcmFnX2dsc2xfMSIsIkVkZ2VBcnJvd0hlYWRQcm9ncmFtIiwibm9ybWFsTG9jYXRpb24iLCJyYWRpdXNMb2NhdGlvbiIsImJhcnljZW50cmljTG9jYXRpb24iLCJzcXJ0Wm9vbVJhdGlvTG9jYXRpb24iLCJjb3JyZWN0aW9uUmF0aW9Mb2NhdGlvbiIsImlfMSIsIlBPSU5UUyIsInRoaWNrbmVzcyIsImZsb2F0Q29sb3IiLCJuMSIsIm4yIiwidXNlUHJvZ3JhbSIsInVuaWZvcm1NYXRyaXgzZnYiLCJtYXRyaXgiLCJ1bmlmb3JtMWYiLCJjb3JyZWN0aW9uUmF0aW8iLCJkcmF3QXJyYXlzIiwiVFJJQU5HTEVTIiwiZWRnZV9jbGFtcGVkX3ZlcnRfZ2xzbF8xIiwiZWRnZV9mcmFnX2dsc2xfMSIsIkVkZ2VDbGFtcGVkUHJvZ3JhbSIsImluZGljZXNCdWZmZXIiLCJjYW5Vc2UzMkJpdHNJbmRpY2VzIiwiSW5kaWNlc0FycmF5IiwiVWludDMyQXJyYXkiLCJVaW50MTZBcnJheSIsImluZGljZXNBcnJheSIsImluZGljZXNUeXBlIiwiVU5TSUdORURfSU5UIiwiVU5TSUdORURfU0hPUlQiLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsImluZGljZXMiLCJTVEFUSUNfRFJBVyIsImRyYXdFbGVtZW50cyIsImVkZ2VfdmVydF9nbHNsXzEiLCJFZGdlUHJvZ3JhbSIsIm5vZGVfZmFzdF92ZXJ0X2dsc2xfMSIsIm5vZGVfZmFzdF9mcmFnX2dsc2xfMSIsIk5vZGVGYXN0UHJvZ3JhbSIsInNjYWxpbmdSYXRpbyIsInRvU3RyaW5nVGFnIiwibG9hZFNoYWRlciIsImdsVHlwZSIsIlZFUlRFWF9TSEFERVIiLCJGUkFHTUVOVF9TSEFERVIiLCJzaGFkZXIiLCJjcmVhdGVTaGFkZXIiLCJzaGFkZXJTb3VyY2UiLCJjb21waWxlU2hhZGVyIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJpbmZvTG9nIiwiZ2V0U2hhZGVySW5mb0xvZyIsImRlbGV0ZVNoYWRlciIsInNoYWRlcnMiLCJjcmVhdGVQcm9ncmFtIiwiYXR0YWNoU2hhZGVyIiwibGlua1Byb2dyYW0iLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiTElOS19TVEFUVVMiLCJkZWxldGVQcm9ncmFtIiwicmVzb2x2ZVNldHRpbmdzIiwidmFsaWRhdGVTZXR0aW5ncyIsIkRFRkFVTFRfRURHRV9QUk9HUkFNX0NMQVNTRVMiLCJERUZBVUxUX05PREVfUFJPR1JBTV9DTEFTU0VTIiwiREVGQVVMVF9TRVRUSU5HUyIsImhvdmVyXzEiLCJlZGdlX2xhYmVsXzEiLCJub2RlX2Zhc3RfMSIsImVkZ2VfYXJyb3dfMSIsImhpZGVFZGdlc09uTW92ZSIsImhpZGVMYWJlbHNPbk1vdmUiLCJyZW5kZXJMYWJlbHMiLCJyZW5kZXJFZGdlTGFiZWxzIiwiZW5hYmxlRWRnZUNsaWNrRXZlbnRzIiwiZW5hYmxlRWRnZVdoZWVsRXZlbnRzIiwiZW5hYmxlRWRnZUhvdmVyRXZlbnRzIiwiZGVmYXVsdE5vZGVDb2xvciIsImRlZmF1bHROb2RlVHlwZSIsImRlZmF1bHRFZGdlQ29sb3IiLCJkZWZhdWx0RWRnZVR5cGUiLCJzdGFnZVBhZGRpbmciLCJsYWJlbERlbnNpdHkiLCJsYWJlbEdyaWRDZWxsU2l6ZSIsImxhYmVsUmVuZGVyZWRTaXplVGhyZXNob2xkIiwibm9kZVJlZHVjZXIiLCJlZGdlUmVkdWNlciIsInpJbmRleCIsIm1pbkNhbWVyYVJhdGlvIiwibWF4Q2FtZXJhUmF0aW8iLCJsYWJlbFJlbmRlcmVyIiwiaG92ZXJSZW5kZXJlciIsImVkZ2VMYWJlbFJlbmRlcmVyIiwiYWxsb3dJbnZhbGlkQ29udGFpbmVyIiwibm9kZVByb2dyYW1DbGFzc2VzIiwibm9kZUhvdmVyUHJvZ3JhbUNsYXNzZXMiLCJlZGdlUHJvZ3JhbUNsYXNzZXMiLCJjaXJjbGUiLCJhcnJvdyIsImxpbmUiLCJyZXNvbHZlZFNldHRpbmdzIiwiX192YWx1ZXMiLCJsYWJlbHNfMSIsInNldHRpbmdzXzEiLCJ0b3VjaF8xIiwibWF0cmljZXNfMSIsImVkZ2VfY29sbGlzaW9uc18xIiwiYXBwbHlOb2RlRGVmYXVsdHMiLCJoaWdobGlnaHRlZCIsImZvcmNlTGFiZWwiLCJhcHBseUVkZ2VEZWZhdWx0cyIsImVsZW1lbnRzIiwiY2FudmFzQ29udGV4dHMiLCJ3ZWJHTENvbnRleHRzIiwiYWN0aXZlTGlzdGVuZXJzIiwicXVhZHRyZWUiLCJsYWJlbEdyaWQiLCJub2RlRGF0YUNhY2hlIiwiZWRnZURhdGFDYWNoZSIsIm5vZGVzV2l0aEZvcmNlZExhYmVscyIsImVkZ2VzV2l0aEZvcmNlZExhYmVscyIsIm5vZGVFeHRlbnQiLCJpZGVudGl0eSIsImludk1hdHJpeCIsImN1c3RvbUJCb3giLCJub3JtYWxpemF0aW9uRnVuY3Rpb24iLCJjcmVhdGVOb3JtYWxpemF0aW9uRnVuY3Rpb24iLCJjYW1lcmFTaXplUmF0aW8iLCJwaXhlbFJhdGlvIiwiZ2V0UGl4ZWxSYXRpbyIsImRpc3BsYXllZExhYmVscyIsImhvdmVyZWRFZGdlIiwicmVuZGVyRnJhbWUiLCJyZW5kZXJIaWdobGlnaHRlZE5vZGVzRnJhbWUiLCJuZWVkVG9Qcm9jZXNzIiwibmVlZFRvU29mdFByb2Nlc3MiLCJjaGVja0VkZ2VzRXZlbnRzRnJhbWUiLCJub2RlUHJvZ3JhbXMiLCJub2RlSG92ZXJQcm9ncmFtcyIsImVkZ2VQcm9ncmFtcyIsInZhbGlkYXRlR3JhcGgiLCJIVE1MRWxlbWVudCIsImNyZWF0ZVdlYkdMQ29udGV4dCIsInByZXNlcnZlRHJhd2luZ0J1ZmZlciIsImNyZWF0ZUNhbnZhc0NvbnRleHQiLCJibGVuZEZ1bmMiLCJPTkUiLCJPTkVfTUlOVVNfU1JDX0FMUEhBIiwiQkxFTkQiLCJOb2RlUHJvZ3JhbUNsYXNzIiwiTm9kZUhvdmVyUHJvZ3JhbSIsImhvdmVyTm9kZXMiLCJFZGdlUHJvZ3JhbUNsYXNzIiwiYmluZENhbWVyYUhhbmRsZXJzIiwibW91c2VDYXB0b3IiLCJ0b3VjaENhcHRvciIsImJpbmRFdmVudEhhbmRsZXJzIiwiYmluZEdyYXBoSGFuZGxlcnMiLCJoYW5kbGVTZXR0aW5nc1VwZGF0ZSIsImNyZWF0ZUNhbnZhcyIsImlkIiwiY2FudmFzIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzIiwiYXBwZW5kQ2hpbGQiLCJnZXRDb250ZXh0IiwiYW50aWFsaWFzIiwiY29udGV4dE9wdGlvbnMiLCJfc2NoZWR1bGVSZWZyZXNoIiwibW91c2VJc09uTm9kZSIsIm5vZGVYIiwibm9kZVkiLCJnZXRRdWFkTm9kZXMiLCJtb3VzZUdyYXBoUG9zaXRpb24iLCJnZXROb2RlQXRQb3NpdGlvbiIsInF1YWROb2RlcyIsIm1pbkRpc3RhbmNlIiwiSW5maW5pdHkiLCJub2RlQXRQb3NpdGlvbiIsIm5vZGVQb3NpdGlvbiIsImZyYW1lZEdyYXBoVG9WaWV3cG9ydCIsInNjYWxlU2l6ZSIsImRpc3RhbmNlIiwiaGFuZGxlUmVzaXplIiwiYmFzZUV2ZW50IiwiZXZlbnQiLCJub2RlVG9Ib3ZlciIsInNjaGVkdWxlSGlnaGxpZ2h0ZWROb2Rlc1JlbmRlciIsImNoZWNrRWRnZUhvdmVyRXZlbnRzIiwiY3JlYXRlTW91c2VMaXN0ZW5lciIsImV2ZW50VHlwZSIsImdldEVkZ2VBdFBvaW50IiwiZ3JhcGhVcGRhdGUiLCJzb2Z0R3JhcGhVcGRhdGUiLCJkcm9wTm9kZUdyYXBoVXBkYXRlIiwiZHJvcEVkZ2VHcmFwaFVwZGF0ZSIsImNsZWFyRWRnZXNHcmFwaFVwZGF0ZSIsImNsZWFyR3JhcGhVcGRhdGUiLCJ1bmJpbmRHcmFwaEhhbmRsZXJzIiwicGF5bG9hZCIsImVkZ2VUb0hvdmVyIiwiZV8xIiwiaXNQaXhlbENvbG9yZWQiLCJ2aWV3cG9ydFRvR3JhcGgiLCJncmFwaFgiLCJncmFwaFkiLCJ0cmFuc2Zvcm1hdGlvblJhdGlvIiwic29tZUVkZ2UiLCJzb3VyY2VJZCIsInRhcmdldElkIiwieHMiLCJ5cyIsImdyYXBoTGVuZ3RoIiwiZ3JhcGhUb1ZpZXdwb3J0IiwidnBfeHMiLCJ2cF95cyIsInZwX3h0IiwidnBfeXQiLCJ2aWV3cG9ydExlbmd0aCIsImZpbHRlckVkZ2VzIiwiZWRnZUF0dHJpYnV0ZXMiLCJzb3VyY2VQb3NpdGlvbiIsInRhcmdldFBvc2l0aW9uIiwiZG9FZGdlQ29sbGlkZVdpdGhQb2ludCIsInNlbGVjdGVkRWRnZSIsImhpZ2hlc3RaSW5kZXgiLCJlZGdlc18xIiwiZWRnZXNfMV8xIiwiZ2V0RWRnZUF0dHJpYnV0ZSIsImVfMV8xIiwicmV0dXJuIiwia2VlcEFycmF5cyIsIm5vZGVaRXh0ZW50IiwiZWRnZVpFeHRlbnQiLCJncmFwaEV4dGVudCIsIm51bGxDYW1lcmEiLCJudWxsQ2FtZXJhTWF0cml4IiwibWF0cml4RnJvbUNhbWVyYSIsImdldEdyYXBoRGltZW5zaW9ucyIsImdldFNldHRpbmciLCJub2Rlc1BlclByb2dyYW1zIiwiYXR0ciIsImdldE5vZGVBdHRyaWJ1dGVzIiwiYXBwbHlUbyIsInpJbmRleE9yZGVyaW5nIiwibm9kZVByb2dyYW0iLCJlZGdlc1BlclByb2dyYW1zIiwiZ2V0RWRnZUF0dHJpYnV0ZXMiLCJfcmVmcmVzaCIsImxhYmVsc1RvRGlzcGxheSIsImVkZ2VMYWJlbHMiLCJjbGVhclJlY3QiLCJlZGdlTGFiZWxzVG9EaXNwbGF5IiwicmVuZGVySGlnaGxpZ2h0ZWROb2RlcyIsImhvdmVycyIsIm5vZGVzVG9SZW5kZXIiLCJDT0xPUl9CVUZGRVJfQklUIiwiZXhpdFJlbmRlciIsInVwZGF0ZUNhY2hlZFZhbHVlcyIsIm1vdmluZyIsInZpZXdwb3J0RGltZW5zaW9ucyIsImdyYXBoRGltZW5zaW9ucyIsInBhZGRpbmciLCJnZXRNYXRyaXhJbXBhY3QiLCJnZXRDb250YWluZXIiLCJnZXRHcmFwaCIsInNldEdyYXBoIiwiZ2V0TW91c2VDYXB0b3IiLCJnZXRUb3VjaENhcHRvciIsImV4dGVudCIsImdldE5vZGVEaXNwbGF5RGF0YSIsImdldEVkZ2VEaXNwbGF5RGF0YSIsImdldFNldHRpbmdzIiwic2V0U2V0dGluZyIsInVwZGF0ZVNldHRpbmciLCJwcmV2aW91c1dpZHRoIiwicHJldmlvdXNIZWlnaHQiLCJlbGVtZW50Iiwic3R5bGUiLCJzY2FsZSIsInZpZXdwb3J0Iiwic2NoZWR1bGVSZWZyZXNoIiwidmlld3BvcnRUYXJnZXQiLCJjZW50ZXIiLCJncmFwaE1vdXNlUG9zaXRpb24iLCJncmFwaENlbnRlclBvc2l0aW9uIiwidmlld1JlY3RhbmdsZSIsIm1hcmdpblgiLCJtYXJnaW5ZIiwicDEiLCJwMiIsImNvb3JkaW5hdGVzIiwib3ZlcnJpZGUiLCJyZWNvbXB1dGVNYXRyaXgiLCJ2aWV3cG9ydFBvcyIsIm11bHRpcGx5VmVjMiIsInZpZXdwb3J0UG9pbnQiLCJpbnZlcnNlIiwiZ3JhcGhQb2ludCIsImdldEJCb3giLCJnZXRDdXN0b21CQm94Iiwic2V0Q3VzdG9tQkJveCIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImdldENhbnZhc2VzIiwicmF3RW1pdHRlciIsImFuaW1hdGVOb2RlcyIsImluZGV4XzEiLCJ0YXJnZXRzIiwic3RhcnRQb3NpdGlvbnMiLCJhdHRycyIsImdldE5vZGVBdHRyaWJ1dGUiLCJmcmFtZSIsInN0ZXAiLCJzZXROb2RlQXR0cmlidXRlIiwiSFRNTF9DT0xPUlMiLCJibGFjayIsInNpbHZlciIsImdyYXkiLCJncmV5Iiwid2hpdGUiLCJtYXJvb24iLCJyZWQiLCJwdXJwbGUiLCJmdWNoc2lhIiwiZ3JlZW4iLCJsaW1lIiwib2xpdmUiLCJ5ZWxsb3ciLCJuYXZ5IiwiYmx1ZSIsInRlYWwiLCJhcXVhIiwiZGFya2JsdWUiLCJtZWRpdW1ibHVlIiwiZGFya2dyZWVuIiwiZGFya2N5YW4iLCJkZWVwc2t5Ymx1ZSIsImRhcmt0dXJxdW9pc2UiLCJtZWRpdW1zcHJpbmdncmVlbiIsInNwcmluZ2dyZWVuIiwiY3lhbiIsIm1pZG5pZ2h0Ymx1ZSIsImRvZGdlcmJsdWUiLCJsaWdodHNlYWdyZWVuIiwiZm9yZXN0Z3JlZW4iLCJzZWFncmVlbiIsImRhcmtzbGF0ZWdyYXkiLCJkYXJrc2xhdGVncmV5IiwibGltZWdyZWVuIiwibWVkaXVtc2VhZ3JlZW4iLCJ0dXJxdW9pc2UiLCJyb3lhbGJsdWUiLCJzdGVlbGJsdWUiLCJkYXJrc2xhdGVibHVlIiwibWVkaXVtdHVycXVvaXNlIiwiaW5kaWdvIiwiZGFya29saXZlZ3JlZW4iLCJjYWRldGJsdWUiLCJjb3JuZmxvd2VyYmx1ZSIsInJlYmVjY2FwdXJwbGUiLCJtZWRpdW1hcXVhbWFyaW5lIiwiZGltZ3JheSIsImRpbWdyZXkiLCJzbGF0ZWJsdWUiLCJvbGl2ZWRyYWIiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibWVkaXVtc2xhdGVibHVlIiwibGF3bmdyZWVuIiwiY2hhcnRyZXVzZSIsImFxdWFtYXJpbmUiLCJza3libHVlIiwibGlnaHRza3libHVlIiwiYmx1ZXZpb2xldCIsImRhcmtyZWQiLCJkYXJrbWFnZW50YSIsInNhZGRsZWJyb3duIiwiZGFya3NlYWdyZWVuIiwibGlnaHRncmVlbiIsIm1lZGl1bXB1cnBsZSIsImRhcmt2aW9sZXQiLCJwYWxlZ3JlZW4iLCJkYXJrb3JjaGlkIiwieWVsbG93Z3JlZW4iLCJzaWVubmEiLCJicm93biIsImRhcmtncmF5IiwiZGFya2dyZXkiLCJsaWdodGJsdWUiLCJncmVlbnllbGxvdyIsInBhbGV0dXJxdW9pc2UiLCJsaWdodHN0ZWVsYmx1ZSIsInBvd2RlcmJsdWUiLCJmaXJlYnJpY2siLCJkYXJrZ29sZGVucm9kIiwibWVkaXVtb3JjaGlkIiwicm9zeWJyb3duIiwiZGFya2toYWtpIiwibWVkaXVtdmlvbGV0cmVkIiwiaW5kaWFucmVkIiwicGVydSIsImNob2NvbGF0ZSIsInRhbiIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JleSIsInRoaXN0bGUiLCJvcmNoaWQiLCJnb2xkZW5yb2QiLCJwYWxldmlvbGV0cmVkIiwiY3JpbXNvbiIsImdhaW5zYm9ybyIsInBsdW0iLCJidXJseXdvb2QiLCJsaWdodGN5YW4iLCJsYXZlbmRlciIsImRhcmtzYWxtb24iLCJ2aW9sZXQiLCJwYWxlZ29sZGVucm9kIiwibGlnaHRjb3JhbCIsImtoYWtpIiwiYWxpY2VibHVlIiwiaG9uZXlkZXciLCJhenVyZSIsInNhbmR5YnJvd24iLCJ3aGVhdCIsImJlaWdlIiwid2hpdGVzbW9rZSIsIm1pbnRjcmVhbSIsImdob3N0d2hpdGUiLCJzYWxtb24iLCJhbnRpcXVld2hpdGUiLCJsaW5lbiIsImxpZ2h0Z29sZGVucm9keWVsbG93Iiwib2xkbGFjZSIsIm1hZ2VudGEiLCJkZWVwcGluayIsIm9yYW5nZXJlZCIsInRvbWF0byIsImhvdHBpbmsiLCJjb3JhbCIsImRhcmtvcmFuZ2UiLCJsaWdodHNhbG1vbiIsIm9yYW5nZSIsImxpZ2h0cGluayIsInBpbmsiLCJnb2xkIiwicGVhY2hwdWZmIiwibmF2YWpvd2hpdGUiLCJtb2NjYXNpbiIsImJpc3F1ZSIsIm1pc3R5cm9zZSIsImJsYW5jaGVkYWxtb25kIiwicGFwYXlhd2hpcCIsImxhdmVuZGVyYmx1c2giLCJzZWFzaGVsbCIsImNvcm5zaWxrIiwibGVtb25jaGlmZm9uIiwiZmxvcmFsd2hpdGUiLCJzbm93IiwibGlnaHR5ZWxsb3ciLCJpdm9yeSIsImN1YmljSW5PdXQiLCJjdWJpY091dCIsImN1YmljSW4iLCJxdWFkcmF0aWNJbk91dCIsInF1YWRyYXRpY091dCIsInF1YWRyYXRpY0luIiwibGluZWFyIiwiZWFzaW5ncyIsInBpeGVscyIsIlVpbnQ4QXJyYXkiLCJyZWFkUGl4ZWxzIiwiZHJhd2luZ0J1ZmZlckhlaWdodCIsIlJHQkEiLCJ4UyIsInlTIiwieFQiLCJleHRyYWN0UGl4ZWwiLCJnZXRDb3JyZWN0aW9uUmF0aW8iLCJmbG9hdEFycmF5Q29sb3IiLCJwYXJzZUNvbG9yIiwiYXNzaWduRGVlcCIsImlzUGxhaW5PYmplY3QiLCJpc19ncmFwaF8xIiwiZGF0YV8xIiwib2JqZWN0cyIsIl9pIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0SUQiLCJ0YWciLCJkZXZpY2VQaXhlbFJhdGlvIiwieE1pbiIsInhNYXgiLCJ5TWluIiwieU1heCIsIm1pblgiLCJtYXhYIiwibWluWSIsIm1heFkiLCJkWCIsImRZIiwiZ2V0dGVyIiwiekEiLCJ6QiIsIklOVDgiLCJJbnQ4QXJyYXkiLCJJTlQzMiIsIkludDMyQXJyYXkiLCJGTE9BVDMyIiwiUkdCQV9URVNUX1JFR0VYIiwiUkdCQV9FWFRSQUNUX1JFR0VYIiwidmFsIiwicGFyc2VJbnQiLCJjaGFyQXQiLCJ0ZXN0IiwibWF0Y2giLCJGTE9BVF9DT0xPUl9DQUNIRSIsImh0bWxDb2xvciIsInBhcnNlZCIsInZpZXdwb3J0UmF0aW8iLCJncmFwaFJhdGlvIiwibXVsdGlwbHkiLCJXZWJHTDJSZW5kZXJpbmdDb250ZXh0IiwiZ2V0RXh0ZW5zaW9uIiwiaXNGaW5pdGUiLCJhMDAiLCJhMDEiLCJhMDIiLCJhMTAiLCJhMTEiLCJhMTIiLCJhMjAiLCJhMjEiLCJhMjIiLCJiMDAiLCJiMDEiLCJiMDIiLCJiMTAiLCJiMTEiLCJiMTIiLCJiMjAiLCJiMjEiLCJiMjIiLCJiMCIsImIxIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImRlZmluaXRpb24iLCJvYmoiLCJwcm9wIiwiQU5HTEVfMiIsIkFOR0xFXzMiLCJOb2RlUHJvZ3JhbVNxdWFyZSIsInN1cGVyIiwiYW5nbGVMb2NhdGlvbiIsIlNpZ21hR3JhcGhDcmVhdG9yIiwicm9vdGVsZW1lbnQiLCJzZWFyY2hRdWVyeSIsInNpZ21hQ29udGFpbmVyIiwicXVlcnlTZWxlY3RvciIsInNlYXJjaFdpbmRvd0lucHV0Q29udGFpbmVyIiwic2VhcmNoV2luZG93RGF0YWxpc3QiLCJzZXRTZWFyY2hRdWVyeSIsInF1ZXJ5IiwibGNRdWVyeSIsInRvTG93ZXJDYXNlIiwic3VnZ2VzdGlvbnMiLCJmaWx0ZXIiLCJpbmNsdWRlcyIsInNlbGVjdGVkTm9kZSIsInNldEhvdmVyZWROb2RlIiwiaG92ZXJlZE5laWdoYm9ycyIsImZpbHRlck5vZGVzRm9yR2l2ZW5UYXJnZXQiLCJub2RlVHJhaW5JRCIsImZpbHRlcmVkTm9kZXMiLCJtYXBFZGdlcyIsInRyYWluX2lkX3NvdXJjZSIsInRyYWluX2lkX3RhcmdldCIsImNyZWF0ZVNpZ21hR3JhcGgiLCJ0cmFpbklkRHVtbXkiLCJub2RlWFZhbHVlIiwiY3VycnJlbnRUcmFpbklkIiwibGFiZWxOYW1lIiwibWVyZ2VOb2RlQXR0cmlidXRlcyIsInNldEVkZ2VBdHRyaWJ1dGUiLCJzcXVhcmUiLCJ1bmlxTm9kZXNMaXN0IiwibGFzdE5vZGUiLCJjdXJyIiwic3BsaWNlIiwiaW5uZXJIVE1MIiwiam9pbiIsInJlc2l6ZVNpZ21hR3JhcGgiLCJsb2ciLCJkZXN0cm95U2lnbWFHcmFwaCJdLCJzb3VyY2VSb290IjoiIn0=